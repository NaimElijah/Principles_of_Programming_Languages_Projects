{"D:\\degree\\ppl\\assignment2\\L3\\L3-ast.ts":{"path":"D:\\degree\\ppl\\assignment2\\L3\\L3-ast.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":1034}},"2":{"start":{"line":6,"column":16},"end":{"line":6,"column":32}},"3":{"start":{"line":7,"column":19},"end":{"line":7,"column":40}},"4":{"start":{"line":8,"column":15},"end":{"line":8,"column":40}},"5":{"start":{"line":9,"column":26},"end":{"line":9,"column":62}},"6":{"start":{"line":10,"column":17},"end":{"line":10,"column":44}},"7":{"start":{"line":11,"column":17},"end":{"line":11,"column":44}},"8":{"start":{"line":13,"column":20},"end":{"line":13,"column":62}},"9":{"start":{"line":13,"column":31},"end":{"line":13,"column":61}},"10":{"start":{"line":14,"column":0},"end":{"line":14,"column":34}},"11":{"start":{"line":15,"column":22},"end":{"line":15,"column":74}},"12":{"start":{"line":15,"column":35},"end":{"line":15,"column":73}},"13":{"start":{"line":16,"column":0},"end":{"line":16,"column":38}},"14":{"start":{"line":17,"column":19},"end":{"line":17,"column":53}},"15":{"start":{"line":17,"column":27},"end":{"line":17,"column":52}},"16":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}},"17":{"start":{"line":19,"column":20},"end":{"line":19,"column":55}},"18":{"start":{"line":19,"column":28},"end":{"line":19,"column":54}},"19":{"start":{"line":20,"column":0},"end":{"line":20,"column":34}},"20":{"start":{"line":21,"column":19},"end":{"line":21,"column":53}},"21":{"start":{"line":21,"column":27},"end":{"line":21,"column":52}},"22":{"start":{"line":22,"column":0},"end":{"line":22,"column":32}},"23":{"start":{"line":23,"column":19},"end":{"line":23,"column":54}},"24":{"start":{"line":23,"column":28},"end":{"line":23,"column":53}},"25":{"start":{"line":24,"column":0},"end":{"line":24,"column":32}},"26":{"start":{"line":25,"column":19},"end":{"line":25,"column":53}},"27":{"start":{"line":25,"column":27},"end":{"line":25,"column":52}},"28":{"start":{"line":26,"column":0},"end":{"line":26,"column":32}},"29":{"start":{"line":27,"column":20},"end":{"line":27,"column":55}},"30":{"start":{"line":27,"column":28},"end":{"line":27,"column":54}},"31":{"start":{"line":28,"column":0},"end":{"line":28,"column":34}},"32":{"start":{"line":29,"column":19},"end":{"line":29,"column":84}},"33":{"start":{"line":29,"column":38},"end":{"line":29,"column":83}},"34":{"start":{"line":30,"column":0},"end":{"line":30,"column":32}},"35":{"start":{"line":32,"column":18},"end":{"line":32,"column":91}},"36":{"start":{"line":32,"column":40},"end":{"line":32,"column":90}},"37":{"start":{"line":33,"column":0},"end":{"line":33,"column":30}},"38":{"start":{"line":34,"column":20},"end":{"line":34,"column":80}},"39":{"start":{"line":34,"column":37},"end":{"line":34,"column":79}},"40":{"start":{"line":35,"column":0},"end":{"line":35,"column":34}},"41":{"start":{"line":36,"column":20},"end":{"line":36,"column":96}},"42":{"start":{"line":36,"column":33},"end":{"line":36,"column":95}},"43":{"start":{"line":37,"column":0},"end":{"line":37,"column":34}},"44":{"start":{"line":38,"column":19},"end":{"line":38,"column":90}},"45":{"start":{"line":38,"column":40},"end":{"line":38,"column":89}},"46":{"start":{"line":39,"column":0},"end":{"line":39,"column":32}},"47":{"start":{"line":41,"column":19},"end":{"line":41,"column":57}},"48":{"start":{"line":41,"column":29},"end":{"line":41,"column":56}},"49":{"start":{"line":42,"column":0},"end":{"line":42,"column":32}},"50":{"start":{"line":43,"column":21},"end":{"line":43,"column":97}},"51":{"start":{"line":43,"column":43},"end":{"line":43,"column":96}},"52":{"start":{"line":44,"column":0},"end":{"line":44,"column":36}},"53":{"start":{"line":46,"column":18},"end":{"line":46,"column":44}},"54":{"start":{"line":46,"column":25},"end":{"line":46,"column":44}},"55":{"start":{"line":47,"column":0},"end":{"line":47,"column":30}},"56":{"start":{"line":48,"column":20},"end":{"line":48,"column":48}},"57":{"start":{"line":48,"column":27},"end":{"line":48,"column":48}},"58":{"start":{"line":49,"column":0},"end":{"line":49,"column":34}},"59":{"start":{"line":50,"column":17},"end":{"line":50,"column":42}},"60":{"start":{"line":50,"column":24},"end":{"line":50,"column":42}},"61":{"start":{"line":51,"column":0},"end":{"line":51,"column":28}},"62":{"start":{"line":52,"column":18},"end":{"line":52,"column":44}},"63":{"start":{"line":52,"column":25},"end":{"line":52,"column":44}},"64":{"start":{"line":53,"column":0},"end":{"line":53,"column":30}},"65":{"start":{"line":54,"column":17},"end":{"line":54,"column":42}},"66":{"start":{"line":54,"column":24},"end":{"line":54,"column":42}},"67":{"start":{"line":55,"column":0},"end":{"line":55,"column":28}},"68":{"start":{"line":56,"column":17},"end":{"line":56,"column":42}},"69":{"start":{"line":56,"column":24},"end":{"line":56,"column":42}},"70":{"start":{"line":57,"column":0},"end":{"line":57,"column":28}},"71":{"start":{"line":58,"column":17},"end":{"line":58,"column":42}},"72":{"start":{"line":58,"column":24},"end":{"line":58,"column":42}},"73":{"start":{"line":59,"column":0},"end":{"line":59,"column":28}},"74":{"start":{"line":60,"column":18},"end":{"line":60,"column":44}},"75":{"start":{"line":60,"column":25},"end":{"line":60,"column":44}},"76":{"start":{"line":61,"column":0},"end":{"line":61,"column":30}},"77":{"start":{"line":62,"column":17},"end":{"line":62,"column":42}},"78":{"start":{"line":62,"column":24},"end":{"line":62,"column":42}},"79":{"start":{"line":63,"column":0},"end":{"line":63,"column":28}},"80":{"start":{"line":65,"column":16},"end":{"line":65,"column":40}},"81":{"start":{"line":65,"column":23},"end":{"line":65,"column":40}},"82":{"start":{"line":66,"column":0},"end":{"line":66,"column":26}},"83":{"start":{"line":67,"column":18},"end":{"line":67,"column":44}},"84":{"start":{"line":67,"column":25},"end":{"line":67,"column":44}},"85":{"start":{"line":68,"column":0},"end":{"line":68,"column":30}},"86":{"start":{"line":69,"column":18},"end":{"line":69,"column":44}},"87":{"start":{"line":69,"column":25},"end":{"line":69,"column":44}},"88":{"start":{"line":70,"column":0},"end":{"line":70,"column":30}},"89":{"start":{"line":71,"column":17},"end":{"line":71,"column":42}},"90":{"start":{"line":71,"column":24},"end":{"line":71,"column":42}},"91":{"start":{"line":72,"column":0},"end":{"line":72,"column":28}},"92":{"start":{"line":74,"column":17},"end":{"line":74,"column":42}},"93":{"start":{"line":74,"column":24},"end":{"line":74,"column":42}},"94":{"start":{"line":75,"column":0},"end":{"line":75,"column":28}},"95":{"start":{"line":76,"column":19},"end":{"line":76,"column":46}},"96":{"start":{"line":76,"column":26},"end":{"line":76,"column":46}},"97":{"start":{"line":77,"column":0},"end":{"line":77,"column":32}},"98":{"start":{"line":79,"column":14},"end":{"line":79,"column":74}},"99":{"start":{"line":79,"column":21},"end":{"line":79,"column":74}},"100":{"start":{"line":80,"column":0},"end":{"line":80,"column":22}},"101":{"start":{"line":81,"column":20},"end":{"line":82,"column":56}},"102":{"start":{"line":81,"column":27},"end":{"line":82,"column":56}},"103":{"start":{"line":83,"column":0},"end":{"line":83,"column":34}},"104":{"start":{"line":84,"column":22},"end":{"line":84,"column":195}},"105":{"start":{"line":84,"column":29},"end":{"line":84,"column":195}},"106":{"start":{"line":85,"column":0},"end":{"line":85,"column":38}},"107":{"start":{"line":86,"column":15},"end":{"line":86,"column":82}},"108":{"start":{"line":86,"column":22},"end":{"line":86,"column":82}},"109":{"start":{"line":87,"column":0},"end":{"line":87,"column":24}},"110":{"start":{"line":90,"column":16},"end":{"line":90,"column":89}},"111":{"start":{"line":90,"column":23},"end":{"line":90,"column":89}},"112":{"start":{"line":91,"column":0},"end":{"line":91,"column":26}},"113":{"start":{"line":92,"column":23},"end":{"line":95,"column":86}},"114":{"start":{"line":92,"column":33},"end":{"line":95,"column":86}},"115":{"start":{"line":96,"column":0},"end":{"line":96,"column":40}},"116":{"start":{"line":97,"column":27},"end":{"line":98,"column":117}},"117":{"start":{"line":97,"column":46},"end":{"line":98,"column":117}},"118":{"start":{"line":97,"column":175},"end":{"line":97,"column":205}},"119":{"start":{"line":100,"column":19},"end":{"line":104,"column":55}},"120":{"start":{"line":100,"column":29},"end":{"line":104,"column":55}},"121":{"start":{"line":105,"column":0},"end":{"line":105,"column":32}},"122":{"start":{"line":107,"column":27},"end":{"line":108,"column":48}},"123":{"start":{"line":107,"column":43},"end":{"line":108,"column":48}},"124":{"start":{"line":109,"column":0},"end":{"line":109,"column":48}},"125":{"start":{"line":111,"column":28},"end":{"line":112,"column":27}},"126":{"start":{"line":111,"column":44},"end":{"line":112,"column":27}},"127":{"start":{"line":113,"column":0},"end":{"line":113,"column":50}},"128":{"start":{"line":114,"column":27},"end":{"line":127,"column":58}},"129":{"start":{"line":114,"column":43},"end":{"line":127,"column":58}},"130":{"start":{"line":128,"column":0},"end":{"line":128,"column":48}},"131":{"start":{"line":130,"column":20},"end":{"line":134,"column":59}},"132":{"start":{"line":130,"column":32},"end":{"line":134,"column":59}},"133":{"start":{"line":135,"column":0},"end":{"line":135,"column":34}},"134":{"start":{"line":136,"column":24},"end":{"line":137,"column":135}},"135":{"start":{"line":136,"column":43},"end":{"line":137,"column":135}},"136":{"start":{"line":137,"column":65},"end":{"line":137,"column":134}},"137":{"start":{"line":138,"column":20},"end":{"line":142,"column":54}},"138":{"start":{"line":138,"column":30},"end":{"line":142,"column":54}},"139":{"start":{"line":143,"column":0},"end":{"line":143,"column":34}},"140":{"start":{"line":145,"column":22},"end":{"line":150,"column":83}},"141":{"start":{"line":145,"column":33},"end":{"line":150,"column":83}},"142":{"start":{"line":151,"column":0},"end":{"line":151,"column":38}},"143":{"start":{"line":157,"column":22},"end":{"line":159,"column":60}},"144":{"start":{"line":157,"column":29},"end":{"line":159,"column":60}},"145":{"start":{"line":160,"column":22},"end":{"line":160,"column":82}},"146":{"start":{"line":160,"column":29},"end":{"line":160,"column":82}},"147":{"start":{"line":161,"column":20},"end":{"line":161,"column":219}},"148":{"start":{"line":161,"column":36},"end":{"line":161,"column":219}},"149":{"start":{"line":161,"column":96},"end":{"line":161,"column":218}},"150":{"start":{"line":161,"column":180},"end":{"line":161,"column":217}},"151":{"start":{"line":162,"column":22},"end":{"line":166,"column":1}},"152":{"start":{"line":163,"column":27},"end":{"line":163,"column":63}},"153":{"start":{"line":164,"column":4},"end":{"line":165,"column":93}},"154":{"start":{"line":164,"column":146},"end":{"line":164,"column":241}},"155":{"start":{"line":167,"column":35},"end":{"line":174,"column":1}},"156":{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},"157":{"start":{"line":169,"column":8},"end":{"line":169,"column":85}},"158":{"start":{"line":171,"column":17},"end":{"line":171,"column":54}},"159":{"start":{"line":171,"column":39},"end":{"line":171,"column":43}},"160":{"start":{"line":172,"column":23},"end":{"line":172,"column":110}},"161":{"start":{"line":173,"column":4},"end":{"line":173,"column":107}},"162":{"start":{"line":173,"column":52},"end":{"line":173,"column":105}},"163":{"start":{"line":175,"column":19},"end":{"line":176,"column":141}},"164":{"start":{"line":175,"column":31},"end":{"line":176,"column":141}},"165":{"start":{"line":176,"column":88},"end":{"line":176,"column":140}},"166":{"start":{"line":177,"column":21},"end":{"line":178,"column":87}},"167":{"start":{"line":177,"column":37},"end":{"line":178,"column":87}},"168":{"start":{"line":177,"column":212},"end":{"line":177,"column":288}},"169":{"start":{"line":179,"column":23},"end":{"line":181,"column":94}},"170":{"start":{"line":179,"column":37},"end":{"line":181,"column":94}},"171":{"start":{"line":182,"column":20},"end":{"line":193,"column":1}},"172":{"start":{"line":183,"column":4},"end":{"line":185,"column":5}},"173":{"start":{"line":184,"column":8},"end":{"line":184,"column":83}},"174":{"start":{"line":189,"column":17},"end":{"line":189,"column":54}},"175":{"start":{"line":189,"column":39},"end":{"line":189,"column":43}},"176":{"start":{"line":190,"column":23},"end":{"line":190,"column":110}},"177":{"start":{"line":191,"column":27},"end":{"line":191,"column":122}},"178":{"start":{"line":191,"column":68},"end":{"line":191,"column":121}},"179":{"start":{"line":192,"column":4},"end":{"line":192,"column":183}},"180":{"start":{"line":192,"column":60},"end":{"line":192,"column":181}},"181":{"start":{"line":192,"column":141},"end":{"line":192,"column":180}},"182":{"start":{"line":195,"column":20},"end":{"line":195,"column":121}},"183":{"start":{"line":195,"column":31},"end":{"line":195,"column":121}},"184":{"start":{"line":195,"column":91},"end":{"line":195,"column":120}},"185":{"start":{"line":196,"column":0},"end":{"line":196,"column":34}},"186":{"start":{"line":197,"column":21},"end":{"line":198,"column":20}},"187":{"start":{"line":197,"column":32},"end":{"line":198,"column":20}},"188":{"start":{"line":199,"column":0},"end":{"line":199,"column":36}},"189":{"start":{"line":200,"column":23},"end":{"line":200,"column":206}},"190":{"start":{"line":200,"column":34},"end":{"line":200,"column":206}},"191":{"start":{"line":200,"column":97},"end":{"line":200,"column":205}},"192":{"start":{"line":200,"column":160},"end":{"line":200,"column":204}},"193":{"start":{"line":201,"column":0},"end":{"line":201,"column":40}},"194":{"start":{"line":203,"column":18},"end":{"line":214,"column":78}},"195":{"start":{"line":203,"column":28},"end":{"line":214,"column":78}},"196":{"start":{"line":213,"column":110},"end":{"line":213,"column":232}},"197":{"start":{"line":213,"column":187},"end":{"line":213,"column":231}},"198":{"start":{"line":215,"column":0},"end":{"line":215,"column":30}},"199":{"start":{"line":218,"column":19},"end":{"line":218,"column":40}},"200":{"start":{"line":219,"column":17},"end":{"line":219,"column":44}},"201":{"start":{"line":221,"column":22},"end":{"line":224,"column":23}},"202":{"start":{"line":221,"column":30},"end":{"line":224,"column":23}},"203":{"start":{"line":225,"column":21},"end":{"line":225,"column":80}},"204":{"start":{"line":225,"column":30},"end":{"line":225,"column":80}},"205":{"start":{"line":226,"column":23},"end":{"line":226,"column":121}},"206":{"start":{"line":226,"column":31},"end":{"line":226,"column":121}},"207":{"start":{"line":226,"column":67},"end":{"line":226,"column":72}},"208":{"start":{"line":227,"column":22},"end":{"line":227,"column":165}},"209":{"start":{"line":227,"column":30},"end":{"line":227,"column":165}},"210":{"start":{"line":227,"column":63},"end":{"line":227,"column":112}},"211":{"start":{"line":228,"column":24},"end":{"line":228,"column":122}},"212":{"start":{"line":228,"column":32},"end":{"line":228,"column":122}},"213":{"start":{"line":228,"column":67},"end":{"line":228,"column":72}},"214":{"start":{"line":229,"column":18},"end":{"line":242,"column":55}},"215":{"start":{"line":229,"column":27},"end":{"line":242,"column":55}},"216":{"start":{"line":243,"column":0},"end":{"line":243,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":20},"end":{"line":13,"column":21}},"loc":{"start":{"line":13,"column":31},"end":{"line":13,"column":61}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":22},"end":{"line":15,"column":23}},"loc":{"start":{"line":15,"column":35},"end":{"line":15,"column":73}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":19},"end":{"line":17,"column":20}},"loc":{"start":{"line":17,"column":27},"end":{"line":17,"column":52}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":19,"column":20},"end":{"line":19,"column":21}},"loc":{"start":{"line":19,"column":28},"end":{"line":19,"column":54}},"line":19},"4":{"name":"(anonymous_4)","decl":{"start":{"line":21,"column":19},"end":{"line":21,"column":20}},"loc":{"start":{"line":21,"column":27},"end":{"line":21,"column":52}},"line":21},"5":{"name":"(anonymous_5)","decl":{"start":{"line":23,"column":19},"end":{"line":23,"column":20}},"loc":{"start":{"line":23,"column":28},"end":{"line":23,"column":53}},"line":23},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":19},"end":{"line":25,"column":20}},"loc":{"start":{"line":25,"column":27},"end":{"line":25,"column":52}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":27,"column":20},"end":{"line":27,"column":21}},"loc":{"start":{"line":27,"column":28},"end":{"line":27,"column":54}},"line":27},"8":{"name":"(anonymous_8)","decl":{"start":{"line":29,"column":19},"end":{"line":29,"column":20}},"loc":{"start":{"line":29,"column":38},"end":{"line":29,"column":83}},"line":29},"9":{"name":"(anonymous_9)","decl":{"start":{"line":32,"column":18},"end":{"line":32,"column":19}},"loc":{"start":{"line":32,"column":40},"end":{"line":32,"column":90}},"line":32},"10":{"name":"(anonymous_10)","decl":{"start":{"line":34,"column":20},"end":{"line":34,"column":21}},"loc":{"start":{"line":34,"column":37},"end":{"line":34,"column":79}},"line":34},"11":{"name":"(anonymous_11)","decl":{"start":{"line":36,"column":20},"end":{"line":36,"column":21}},"loc":{"start":{"line":36,"column":33},"end":{"line":36,"column":95}},"line":36},"12":{"name":"(anonymous_12)","decl":{"start":{"line":38,"column":19},"end":{"line":38,"column":20}},"loc":{"start":{"line":38,"column":40},"end":{"line":38,"column":89}},"line":38},"13":{"name":"(anonymous_13)","decl":{"start":{"line":41,"column":19},"end":{"line":41,"column":20}},"loc":{"start":{"line":41,"column":29},"end":{"line":41,"column":56}},"line":41},"14":{"name":"(anonymous_14)","decl":{"start":{"line":43,"column":21},"end":{"line":43,"column":22}},"loc":{"start":{"line":43,"column":43},"end":{"line":43,"column":96}},"line":43},"15":{"name":"(anonymous_15)","decl":{"start":{"line":46,"column":18},"end":{"line":46,"column":19}},"loc":{"start":{"line":46,"column":25},"end":{"line":46,"column":44}},"line":46},"16":{"name":"(anonymous_16)","decl":{"start":{"line":48,"column":20},"end":{"line":48,"column":21}},"loc":{"start":{"line":48,"column":27},"end":{"line":48,"column":48}},"line":48},"17":{"name":"(anonymous_17)","decl":{"start":{"line":50,"column":17},"end":{"line":50,"column":18}},"loc":{"start":{"line":50,"column":24},"end":{"line":50,"column":42}},"line":50},"18":{"name":"(anonymous_18)","decl":{"start":{"line":52,"column":18},"end":{"line":52,"column":19}},"loc":{"start":{"line":52,"column":25},"end":{"line":52,"column":44}},"line":52},"19":{"name":"(anonymous_19)","decl":{"start":{"line":54,"column":17},"end":{"line":54,"column":18}},"loc":{"start":{"line":54,"column":24},"end":{"line":54,"column":42}},"line":54},"20":{"name":"(anonymous_20)","decl":{"start":{"line":56,"column":17},"end":{"line":56,"column":18}},"loc":{"start":{"line":56,"column":24},"end":{"line":56,"column":42}},"line":56},"21":{"name":"(anonymous_21)","decl":{"start":{"line":58,"column":17},"end":{"line":58,"column":18}},"loc":{"start":{"line":58,"column":24},"end":{"line":58,"column":42}},"line":58},"22":{"name":"(anonymous_22)","decl":{"start":{"line":60,"column":18},"end":{"line":60,"column":19}},"loc":{"start":{"line":60,"column":25},"end":{"line":60,"column":44}},"line":60},"23":{"name":"(anonymous_23)","decl":{"start":{"line":62,"column":17},"end":{"line":62,"column":18}},"loc":{"start":{"line":62,"column":24},"end":{"line":62,"column":42}},"line":62},"24":{"name":"(anonymous_24)","decl":{"start":{"line":65,"column":16},"end":{"line":65,"column":17}},"loc":{"start":{"line":65,"column":23},"end":{"line":65,"column":40}},"line":65},"25":{"name":"(anonymous_25)","decl":{"start":{"line":67,"column":18},"end":{"line":67,"column":19}},"loc":{"start":{"line":67,"column":25},"end":{"line":67,"column":44}},"line":67},"26":{"name":"(anonymous_26)","decl":{"start":{"line":69,"column":18},"end":{"line":69,"column":19}},"loc":{"start":{"line":69,"column":25},"end":{"line":69,"column":44}},"line":69},"27":{"name":"(anonymous_27)","decl":{"start":{"line":71,"column":17},"end":{"line":71,"column":18}},"loc":{"start":{"line":71,"column":24},"end":{"line":71,"column":42}},"line":71},"28":{"name":"(anonymous_28)","decl":{"start":{"line":74,"column":17},"end":{"line":74,"column":18}},"loc":{"start":{"line":74,"column":24},"end":{"line":74,"column":42}},"line":74},"29":{"name":"(anonymous_29)","decl":{"start":{"line":76,"column":19},"end":{"line":76,"column":20}},"loc":{"start":{"line":76,"column":26},"end":{"line":76,"column":46}},"line":76},"30":{"name":"(anonymous_30)","decl":{"start":{"line":79,"column":14},"end":{"line":79,"column":15}},"loc":{"start":{"line":79,"column":21},"end":{"line":79,"column":74}},"line":79},"31":{"name":"(anonymous_31)","decl":{"start":{"line":81,"column":20},"end":{"line":81,"column":21}},"loc":{"start":{"line":81,"column":27},"end":{"line":82,"column":56}},"line":81},"32":{"name":"(anonymous_32)","decl":{"start":{"line":84,"column":22},"end":{"line":84,"column":23}},"loc":{"start":{"line":84,"column":29},"end":{"line":84,"column":195}},"line":84},"33":{"name":"(anonymous_33)","decl":{"start":{"line":86,"column":15},"end":{"line":86,"column":16}},"loc":{"start":{"line":86,"column":22},"end":{"line":86,"column":82}},"line":86},"34":{"name":"(anonymous_34)","decl":{"start":{"line":90,"column":16},"end":{"line":90,"column":17}},"loc":{"start":{"line":90,"column":23},"end":{"line":90,"column":89}},"line":90},"35":{"name":"(anonymous_35)","decl":{"start":{"line":92,"column":23},"end":{"line":92,"column":24}},"loc":{"start":{"line":92,"column":33},"end":{"line":95,"column":86}},"line":92},"36":{"name":"(anonymous_36)","decl":{"start":{"line":97,"column":27},"end":{"line":97,"column":28}},"loc":{"start":{"line":97,"column":46},"end":{"line":98,"column":117}},"line":97},"37":{"name":"(anonymous_37)","decl":{"start":{"line":97,"column":165},"end":{"line":97,"column":166}},"loc":{"start":{"line":97,"column":175},"end":{"line":97,"column":205}},"line":97},"38":{"name":"(anonymous_38)","decl":{"start":{"line":100,"column":19},"end":{"line":100,"column":20}},"loc":{"start":{"line":100,"column":29},"end":{"line":104,"column":55}},"line":100},"39":{"name":"(anonymous_39)","decl":{"start":{"line":107,"column":27},"end":{"line":107,"column":28}},"loc":{"start":{"line":107,"column":43},"end":{"line":108,"column":48}},"line":107},"40":{"name":"(anonymous_40)","decl":{"start":{"line":111,"column":28},"end":{"line":111,"column":29}},"loc":{"start":{"line":111,"column":44},"end":{"line":112,"column":27}},"line":111},"41":{"name":"(anonymous_41)","decl":{"start":{"line":114,"column":27},"end":{"line":114,"column":28}},"loc":{"start":{"line":114,"column":43},"end":{"line":127,"column":58}},"line":114},"42":{"name":"(anonymous_42)","decl":{"start":{"line":130,"column":20},"end":{"line":130,"column":21}},"loc":{"start":{"line":130,"column":32},"end":{"line":134,"column":59}},"line":130},"43":{"name":"(anonymous_43)","decl":{"start":{"line":136,"column":24},"end":{"line":136,"column":25}},"loc":{"start":{"line":136,"column":43},"end":{"line":137,"column":135}},"line":136},"44":{"name":"(anonymous_44)","decl":{"start":{"line":137,"column":54},"end":{"line":137,"column":55}},"loc":{"start":{"line":137,"column":65},"end":{"line":137,"column":134}},"line":137},"45":{"name":"(anonymous_45)","decl":{"start":{"line":138,"column":20},"end":{"line":138,"column":21}},"loc":{"start":{"line":138,"column":30},"end":{"line":142,"column":54}},"line":138},"46":{"name":"(anonymous_46)","decl":{"start":{"line":145,"column":22},"end":{"line":145,"column":23}},"loc":{"start":{"line":145,"column":33},"end":{"line":150,"column":83}},"line":145},"47":{"name":"(anonymous_47)","decl":{"start":{"line":157,"column":22},"end":{"line":157,"column":23}},"loc":{"start":{"line":157,"column":29},"end":{"line":159,"column":60}},"line":157},"48":{"name":"(anonymous_48)","decl":{"start":{"line":160,"column":22},"end":{"line":160,"column":23}},"loc":{"start":{"line":160,"column":29},"end":{"line":160,"column":82}},"line":160},"49":{"name":"(anonymous_49)","decl":{"start":{"line":161,"column":20},"end":{"line":161,"column":21}},"loc":{"start":{"line":161,"column":36},"end":{"line":161,"column":219}},"line":161},"50":{"name":"(anonymous_50)","decl":{"start":{"line":161,"column":85},"end":{"line":161,"column":86}},"loc":{"start":{"line":161,"column":96},"end":{"line":161,"column":218}},"line":161},"51":{"name":"(anonymous_51)","decl":{"start":{"line":161,"column":169},"end":{"line":161,"column":170}},"loc":{"start":{"line":161,"column":180},"end":{"line":161,"column":217}},"line":161},"52":{"name":"(anonymous_52)","decl":{"start":{"line":162,"column":22},"end":{"line":162,"column":23}},"loc":{"start":{"line":162,"column":42},"end":{"line":166,"column":1}},"line":162},"53":{"name":"(anonymous_53)","decl":{"start":{"line":164,"column":139},"end":{"line":164,"column":140}},"loc":{"start":{"line":164,"column":146},"end":{"line":164,"column":241}},"line":164},"54":{"name":"(anonymous_54)","decl":{"start":{"line":167,"column":35},"end":{"line":167,"column":36}},"loc":{"start":{"line":167,"column":49},"end":{"line":174,"column":1}},"line":167},"55":{"name":"(anonymous_55)","decl":{"start":{"line":171,"column":34},"end":{"line":171,"column":35}},"loc":{"start":{"line":171,"column":39},"end":{"line":171,"column":43}},"line":171},"56":{"name":"(anonymous_56)","decl":{"start":{"line":173,"column":42},"end":{"line":173,"column":43}},"loc":{"start":{"line":173,"column":52},"end":{"line":173,"column":105}},"line":173},"57":{"name":"(anonymous_57)","decl":{"start":{"line":175,"column":19},"end":{"line":175,"column":20}},"loc":{"start":{"line":175,"column":31},"end":{"line":176,"column":141}},"line":175},"58":{"name":"(anonymous_58)","decl":{"start":{"line":176,"column":77},"end":{"line":176,"column":78}},"loc":{"start":{"line":176,"column":88},"end":{"line":176,"column":140}},"line":176},"59":{"name":"(anonymous_59)","decl":{"start":{"line":177,"column":21},"end":{"line":177,"column":22}},"loc":{"start":{"line":177,"column":37},"end":{"line":178,"column":87}},"line":177},"60":{"name":"(anonymous_60)","decl":{"start":{"line":177,"column":201},"end":{"line":177,"column":202}},"loc":{"start":{"line":177,"column":212},"end":{"line":177,"column":288}},"line":177},"61":{"name":"(anonymous_61)","decl":{"start":{"line":179,"column":23},"end":{"line":179,"column":24}},"loc":{"start":{"line":179,"column":37},"end":{"line":181,"column":94}},"line":179},"62":{"name":"(anonymous_62)","decl":{"start":{"line":182,"column":20},"end":{"line":182,"column":21}},"loc":{"start":{"line":182,"column":40},"end":{"line":193,"column":1}},"line":182},"63":{"name":"(anonymous_63)","decl":{"start":{"line":189,"column":34},"end":{"line":189,"column":35}},"loc":{"start":{"line":189,"column":39},"end":{"line":189,"column":43}},"line":189},"64":{"name":"(anonymous_64)","decl":{"start":{"line":191,"column":58},"end":{"line":191,"column":59}},"loc":{"start":{"line":191,"column":68},"end":{"line":191,"column":121}},"line":191},"65":{"name":"(anonymous_65)","decl":{"start":{"line":192,"column":46},"end":{"line":192,"column":47}},"loc":{"start":{"line":192,"column":60},"end":{"line":192,"column":181}},"line":192},"66":{"name":"(anonymous_66)","decl":{"start":{"line":192,"column":131},"end":{"line":192,"column":132}},"loc":{"start":{"line":192,"column":141},"end":{"line":192,"column":180}},"line":192},"67":{"name":"(anonymous_67)","decl":{"start":{"line":195,"column":20},"end":{"line":195,"column":21}},"loc":{"start":{"line":195,"column":31},"end":{"line":195,"column":121}},"line":195},"68":{"name":"(anonymous_68)","decl":{"start":{"line":195,"column":81},"end":{"line":195,"column":82}},"loc":{"start":{"line":195,"column":91},"end":{"line":195,"column":120}},"line":195},"69":{"name":"(anonymous_69)","decl":{"start":{"line":197,"column":21},"end":{"line":197,"column":22}},"loc":{"start":{"line":197,"column":32},"end":{"line":198,"column":20}},"line":197},"70":{"name":"(anonymous_70)","decl":{"start":{"line":200,"column":23},"end":{"line":200,"column":24}},"loc":{"start":{"line":200,"column":34},"end":{"line":200,"column":206}},"line":200},"71":{"name":"(anonymous_71)","decl":{"start":{"line":200,"column":87},"end":{"line":200,"column":88}},"loc":{"start":{"line":200,"column":97},"end":{"line":200,"column":205}},"line":200},"72":{"name":"(anonymous_72)","decl":{"start":{"line":200,"column":150},"end":{"line":200,"column":151}},"loc":{"start":{"line":200,"column":160},"end":{"line":200,"column":204}},"line":200},"73":{"name":"(anonymous_73)","decl":{"start":{"line":203,"column":18},"end":{"line":203,"column":19}},"loc":{"start":{"line":203,"column":28},"end":{"line":214,"column":78}},"line":203},"74":{"name":"(anonymous_74)","decl":{"start":{"line":213,"column":100},"end":{"line":213,"column":101}},"loc":{"start":{"line":213,"column":110},"end":{"line":213,"column":232}},"line":213},"75":{"name":"(anonymous_75)","decl":{"start":{"line":213,"column":177},"end":{"line":213,"column":178}},"loc":{"start":{"line":213,"column":187},"end":{"line":213,"column":231}},"line":213},"76":{"name":"(anonymous_76)","decl":{"start":{"line":221,"column":22},"end":{"line":221,"column":23}},"loc":{"start":{"line":221,"column":30},"end":{"line":224,"column":23}},"line":221},"77":{"name":"(anonymous_77)","decl":{"start":{"line":225,"column":21},"end":{"line":225,"column":22}},"loc":{"start":{"line":225,"column":30},"end":{"line":225,"column":80}},"line":225},"78":{"name":"(anonymous_78)","decl":{"start":{"line":226,"column":23},"end":{"line":226,"column":24}},"loc":{"start":{"line":226,"column":31},"end":{"line":226,"column":121}},"line":226},"79":{"name":"(anonymous_79)","decl":{"start":{"line":226,"column":60},"end":{"line":226,"column":61}},"loc":{"start":{"line":226,"column":67},"end":{"line":226,"column":72}},"line":226},"80":{"name":"(anonymous_80)","decl":{"start":{"line":227,"column":22},"end":{"line":227,"column":23}},"loc":{"start":{"line":227,"column":30},"end":{"line":227,"column":165}},"line":227},"81":{"name":"(anonymous_81)","decl":{"start":{"line":227,"column":56},"end":{"line":227,"column":57}},"loc":{"start":{"line":227,"column":63},"end":{"line":227,"column":112}},"line":227},"82":{"name":"(anonymous_82)","decl":{"start":{"line":228,"column":24},"end":{"line":228,"column":25}},"loc":{"start":{"line":228,"column":32},"end":{"line":228,"column":122}},"line":228},"83":{"name":"(anonymous_83)","decl":{"start":{"line":228,"column":60},"end":{"line":228,"column":61}},"loc":{"start":{"line":228,"column":67},"end":{"line":228,"column":72}},"line":228},"84":{"name":"(anonymous_84)","decl":{"start":{"line":229,"column":18},"end":{"line":229,"column":19}},"loc":{"start":{"line":229,"column":27},"end":{"line":242,"column":55}},"line":229}},"branchMap":{"0":{"loc":{"start":{"line":79,"column":21},"end":{"line":79,"column":74}},"type":"binary-expr","locations":[{"start":{"line":79,"column":21},"end":{"line":79,"column":48}},{"start":{"line":79,"column":52},"end":{"line":79,"column":74}}],"line":79},"1":{"loc":{"start":{"line":81,"column":27},"end":{"line":82,"column":56}},"type":"binary-expr","locations":[{"start":{"line":81,"column":27},"end":{"line":81,"column":51}},{"start":{"line":81,"column":55},"end":{"line":81,"column":80}},{"start":{"line":81,"column":84},"end":{"line":81,"column":108}},{"start":{"line":82,"column":4},"end":{"line":82,"column":28}},{"start":{"line":82,"column":32},"end":{"line":82,"column":56}}],"line":81},"2":{"loc":{"start":{"line":84,"column":29},"end":{"line":84,"column":195}},"type":"binary-expr","locations":[{"start":{"line":84,"column":29},"end":{"line":84,"column":53}},{"start":{"line":84,"column":57},"end":{"line":84,"column":80}},{"start":{"line":84,"column":84},"end":{"line":84,"column":109}},{"start":{"line":84,"column":113},"end":{"line":84,"column":137}},{"start":{"line":84,"column":141},"end":{"line":84,"column":165}},{"start":{"line":84,"column":169},"end":{"line":84,"column":195}}],"line":84},"3":{"loc":{"start":{"line":86,"column":22},"end":{"line":86,"column":82}},"type":"binary-expr","locations":[{"start":{"line":86,"column":22},"end":{"line":86,"column":49}},{"start":{"line":86,"column":53},"end":{"line":86,"column":82}}],"line":86},"4":{"loc":{"start":{"line":92,"column":33},"end":{"line":95,"column":86}},"type":"cond-expr","locations":[{"start":{"line":92,"column":76},"end":{"line":92,"column":129}},{"start":{"line":93,"column":4},"end":{"line":95,"column":86}}],"line":92},"5":{"loc":{"start":{"line":92,"column":33},"end":{"line":92,"column":73}},"type":"binary-expr","locations":[{"start":{"line":92,"column":33},"end":{"line":92,"column":44}},{"start":{"line":92,"column":48},"end":{"line":92,"column":73}}],"line":92},"6":{"loc":{"start":{"line":93,"column":4},"end":{"line":95,"column":86}},"type":"cond-expr","locations":[{"start":{"line":93,"column":34},"end":{"line":93,"column":126}},{"start":{"line":94,"column":8},"end":{"line":95,"column":86}}],"line":93},"7":{"loc":{"start":{"line":94,"column":8},"end":{"line":95,"column":86}},"type":"cond-expr","locations":[{"start":{"line":94,"column":43},"end":{"line":94,"column":110}},{"start":{"line":95,"column":12},"end":{"line":95,"column":86}}],"line":94},"8":{"loc":{"start":{"line":97,"column":46},"end":{"line":98,"column":117}},"type":"cond-expr","locations":[{"start":{"line":97,"column":95},"end":{"line":97,"column":206}},{"start":{"line":98,"column":4},"end":{"line":98,"column":117}}],"line":97},"9":{"loc":{"start":{"line":97,"column":46},"end":{"line":97,"column":92}},"type":"binary-expr","locations":[{"start":{"line":97,"column":46},"end":{"line":97,"column":62}},{"start":{"line":97,"column":66},"end":{"line":97,"column":92}}],"line":97},"10":{"loc":{"start":{"line":100,"column":29},"end":{"line":104,"column":55}},"type":"cond-expr","locations":[{"start":{"line":101,"column":4},"end":{"line":102,"column":95}},{"start":{"line":103,"column":4},"end":{"line":104,"column":55}}],"line":100},"11":{"loc":{"start":{"line":101,"column":4},"end":{"line":102,"column":95}},"type":"cond-expr","locations":[{"start":{"line":101,"column":39},"end":{"line":101,"column":119}},{"start":{"line":102,"column":8},"end":{"line":102,"column":95}}],"line":101},"12":{"loc":{"start":{"line":103,"column":4},"end":{"line":104,"column":55}},"type":"cond-expr","locations":[{"start":{"line":103,"column":34},"end":{"line":103,"column":66}},{"start":{"line":104,"column":8},"end":{"line":104,"column":55}}],"line":103},"13":{"loc":{"start":{"line":107,"column":43},"end":{"line":108,"column":48}},"type":"cond-expr","locations":[{"start":{"line":107,"column":61},"end":{"line":107,"column":93}},{"start":{"line":108,"column":4},"end":{"line":108,"column":48}}],"line":107},"14":{"loc":{"start":{"line":111,"column":44},"end":{"line":112,"column":27}},"type":"cond-expr","locations":[{"start":{"line":111,"column":103},"end":{"line":111,"column":146}},{"start":{"line":112,"column":4},"end":{"line":112,"column":27}}],"line":111},"15":{"loc":{"start":{"line":111,"column":44},"end":{"line":111,"column":100}},"type":"binary-expr","locations":[{"start":{"line":111,"column":44},"end":{"line":111,"column":79}},{"start":{"line":111,"column":83},"end":{"line":111,"column":100}}],"line":111},"16":{"loc":{"start":{"line":114,"column":43},"end":{"line":127,"column":58}},"type":"cond-expr","locations":[{"start":{"line":114,"column":73},"end":{"line":114,"column":129}},{"start":{"line":115,"column":4},"end":{"line":127,"column":58}}],"line":114},"17":{"loc":{"start":{"line":115,"column":4},"end":{"line":127,"column":58}},"type":"cond-expr","locations":[{"start":{"line":116,"column":9},"end":{"line":116,"column":163}},{"start":{"line":117,"column":8},"end":{"line":127,"column":58}}],"line":115},"18":{"loc":{"start":{"line":116,"column":9},"end":{"line":116,"column":163}},"type":"cond-expr","locations":[{"start":{"line":116,"column":46},"end":{"line":116,"column":112}},{"start":{"line":116,"column":115},"end":{"line":116,"column":163}}],"line":116},"19":{"loc":{"start":{"line":117,"column":8},"end":{"line":127,"column":58}},"type":"cond-expr","locations":[{"start":{"line":117,"column":22},"end":{"line":117,"column":40}},{"start":{"line":118,"column":12},"end":{"line":127,"column":58}}],"line":117},"20":{"loc":{"start":{"line":118,"column":12},"end":{"line":127,"column":58}},"type":"cond-expr","locations":[{"start":{"line":119,"column":16},"end":{"line":120,"column":68}},{"start":{"line":121,"column":16},"end":{"line":127,"column":58}}],"line":118},"21":{"loc":{"start":{"line":119,"column":16},"end":{"line":120,"column":68}},"type":"cond-expr","locations":[{"start":{"line":119,"column":53},"end":{"line":119,"column":118}},{"start":{"line":120,"column":20},"end":{"line":120,"column":68}}],"line":119},"22":{"loc":{"start":{"line":121,"column":16},"end":{"line":127,"column":58}},"type":"cond-expr","locations":[{"start":{"line":122,"column":20},"end":{"line":123,"column":71}},{"start":{"line":124,"column":20},"end":{"line":127,"column":58}}],"line":121},"23":{"loc":{"start":{"line":122,"column":20},"end":{"line":123,"column":71}},"type":"cond-expr","locations":[{"start":{"line":122,"column":57},"end":{"line":122,"column":121}},{"start":{"line":123,"column":24},"end":{"line":123,"column":71}}],"line":122},"24":{"loc":{"start":{"line":124,"column":20},"end":{"line":127,"column":58}},"type":"cond-expr","locations":[{"start":{"line":125,"column":24},"end":{"line":126,"column":81}},{"start":{"line":127,"column":24},"end":{"line":127,"column":58}}],"line":124},"25":{"loc":{"start":{"line":125,"column":24},"end":{"line":126,"column":81}},"type":"cond-expr","locations":[{"start":{"line":125,"column":61},"end":{"line":125,"column":112}},{"start":{"line":126,"column":28},"end":{"line":126,"column":81}}],"line":125},"26":{"loc":{"start":{"line":130,"column":32},"end":{"line":134,"column":59}},"type":"cond-expr","locations":[{"start":{"line":131,"column":4},"end":{"line":133,"column":82}},{"start":{"line":134,"column":4},"end":{"line":134,"column":59}}],"line":130},"27":{"loc":{"start":{"line":131,"column":4},"end":{"line":133,"column":82}},"type":"cond-expr","locations":[{"start":{"line":131,"column":52},"end":{"line":131,"column":140}},{"start":{"line":132,"column":8},"end":{"line":133,"column":82}}],"line":131},"28":{"loc":{"start":{"line":132,"column":8},"end":{"line":133,"column":82}},"type":"cond-expr","locations":[{"start":{"line":132,"column":30},"end":{"line":132,"column":117}},{"start":{"line":133,"column":12},"end":{"line":133,"column":82}}],"line":132},"29":{"loc":{"start":{"line":136,"column":43},"end":{"line":137,"column":135}},"type":"cond-expr","locations":[{"start":{"line":136,"column":92},"end":{"line":136,"column":197}},{"start":{"line":137,"column":4},"end":{"line":137,"column":135}}],"line":136},"30":{"loc":{"start":{"line":138,"column":30},"end":{"line":142,"column":54}},"type":"cond-expr","locations":[{"start":{"line":139,"column":4},"end":{"line":140,"column":65}},{"start":{"line":141,"column":4},"end":{"line":142,"column":54}}],"line":138},"31":{"loc":{"start":{"line":139,"column":4},"end":{"line":140,"column":65}},"type":"cond-expr","locations":[{"start":{"line":139,"column":39},"end":{"line":139,"column":120}},{"start":{"line":140,"column":8},"end":{"line":140,"column":65}}],"line":139},"32":{"loc":{"start":{"line":141,"column":4},"end":{"line":142,"column":54}},"type":"cond-expr","locations":[{"start":{"line":141,"column":34},"end":{"line":141,"column":66}},{"start":{"line":142,"column":8},"end":{"line":142,"column":54}}],"line":141},"33":{"loc":{"start":{"line":145,"column":33},"end":{"line":150,"column":83}},"type":"cond-expr","locations":[{"start":{"line":145,"column":50},"end":{"line":145,"column":102}},{"start":{"line":146,"column":4},"end":{"line":150,"column":83}}],"line":145},"34":{"loc":{"start":{"line":146,"column":4},"end":{"line":150,"column":83}},"type":"cond-expr","locations":[{"start":{"line":146,"column":21},"end":{"line":146,"column":74}},{"start":{"line":147,"column":8},"end":{"line":150,"column":83}}],"line":146},"35":{"loc":{"start":{"line":147,"column":8},"end":{"line":150,"column":83}},"type":"cond-expr","locations":[{"start":{"line":147,"column":98},"end":{"line":147,"column":151}},{"start":{"line":148,"column":12},"end":{"line":150,"column":83}}],"line":147},"36":{"loc":{"start":{"line":147,"column":8},"end":{"line":147,"column":95}},"type":"binary-expr","locations":[{"start":{"line":147,"column":8},"end":{"line":147,"column":46}},{"start":{"line":147,"column":50},"end":{"line":147,"column":95}}],"line":147},"37":{"loc":{"start":{"line":148,"column":12},"end":{"line":150,"column":83}},"type":"cond-expr","locations":[{"start":{"line":148,"column":77},"end":{"line":148,"column":129}},{"start":{"line":149,"column":16},"end":{"line":150,"column":83}}],"line":148},"38":{"loc":{"start":{"line":148,"column":12},"end":{"line":148,"column":74}},"type":"binary-expr","locations":[{"start":{"line":148,"column":12},"end":{"line":148,"column":50}},{"start":{"line":148,"column":54},"end":{"line":148,"column":74}}],"line":148},"39":{"loc":{"start":{"line":149,"column":16},"end":{"line":150,"column":83}},"type":"cond-expr","locations":[{"start":{"line":149,"column":57},"end":{"line":149,"column":109}},{"start":{"line":150,"column":20},"end":{"line":150,"column":83}}],"line":149},"40":{"loc":{"start":{"line":164,"column":11},"end":{"line":165,"column":92}},"type":"cond-expr","locations":[{"start":{"line":164,"column":104},"end":{"line":164,"column":242}},{"start":{"line":165,"column":8},"end":{"line":165,"column":92}}],"line":164},"41":{"loc":{"start":{"line":164,"column":11},"end":{"line":164,"column":101}},"type":"binary-expr","locations":[{"start":{"line":164,"column":11},"end":{"line":164,"column":47}},{"start":{"line":164,"column":51},"end":{"line":164,"column":101}}],"line":164},"42":{"loc":{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},"type":"if","locations":[{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},{"start":{"line":168,"column":4},"end":{"line":170,"column":5}}],"line":168},"43":{"loc":{"start":{"line":175,"column":31},"end":{"line":176,"column":141}},"type":"cond-expr","locations":[{"start":{"line":175,"column":53},"end":{"line":175,"column":167}},{"start":{"line":176,"column":4},"end":{"line":176,"column":141}}],"line":175},"44":{"loc":{"start":{"line":177,"column":37},"end":{"line":178,"column":87}},"type":"cond-expr","locations":[{"start":{"line":177,"column":130},"end":{"line":177,"column":289}},{"start":{"line":178,"column":4},"end":{"line":178,"column":87}}],"line":177},"45":{"loc":{"start":{"line":177,"column":37},"end":{"line":177,"column":127}},"type":"binary-expr","locations":[{"start":{"line":177,"column":37},"end":{"line":177,"column":73}},{"start":{"line":177,"column":77},"end":{"line":177,"column":127}}],"line":177},"46":{"loc":{"start":{"line":179,"column":37},"end":{"line":181,"column":94}},"type":"binary-expr","locations":[{"start":{"line":179,"column":37},"end":{"line":179,"column":77}},{"start":{"line":180,"column":4},"end":{"line":180,"column":55}},{"start":{"line":181,"column":4},"end":{"line":181,"column":94}}],"line":179},"47":{"loc":{"start":{"line":183,"column":4},"end":{"line":185,"column":5}},"type":"if","locations":[{"start":{"line":183,"column":4},"end":{"line":185,"column":5}},{"start":{"line":183,"column":4},"end":{"line":185,"column":5}}],"line":183},"48":{"loc":{"start":{"line":197,"column":32},"end":{"line":198,"column":20}},"type":"binary-expr","locations":[{"start":{"line":197,"column":32},"end":{"line":197,"column":50}},{"start":{"line":198,"column":4},"end":{"line":198,"column":20}}],"line":197},"49":{"loc":{"start":{"line":203,"column":28},"end":{"line":214,"column":78}},"type":"cond-expr","locations":[{"start":{"line":203,"column":44},"end":{"line":203,"column":70}},{"start":{"line":204,"column":4},"end":{"line":214,"column":78}}],"line":203},"50":{"loc":{"start":{"line":204,"column":4},"end":{"line":214,"column":78}},"type":"cond-expr","locations":[{"start":{"line":204,"column":20},"end":{"line":204,"column":47}},{"start":{"line":205,"column":8},"end":{"line":214,"column":78}}],"line":204},"51":{"loc":{"start":{"line":205,"column":8},"end":{"line":214,"column":78}},"type":"cond-expr","locations":[{"start":{"line":205,"column":96},"end":{"line":205,"column":123}},{"start":{"line":206,"column":12},"end":{"line":214,"column":78}}],"line":205},"52":{"loc":{"start":{"line":205,"column":8},"end":{"line":205,"column":93}},"type":"binary-expr","locations":[{"start":{"line":205,"column":8},"end":{"line":205,"column":45}},{"start":{"line":205,"column":49},"end":{"line":205,"column":93}}],"line":205},"53":{"loc":{"start":{"line":206,"column":12},"end":{"line":214,"column":78}},"type":"cond-expr","locations":[{"start":{"line":206,"column":47},"end":{"line":206,"column":84}},{"start":{"line":207,"column":16},"end":{"line":214,"column":78}}],"line":206},"54":{"loc":{"start":{"line":207,"column":16},"end":{"line":214,"column":78}},"type":"cond-expr","locations":[{"start":{"line":207,"column":56},"end":{"line":207,"column":114}},{"start":{"line":208,"column":20},"end":{"line":214,"column":78}}],"line":207},"55":{"loc":{"start":{"line":208,"column":20},"end":{"line":214,"column":78}},"type":"cond-expr","locations":[{"start":{"line":208,"column":40},"end":{"line":208,"column":93}},{"start":{"line":209,"column":24},"end":{"line":214,"column":78}}],"line":208},"56":{"loc":{"start":{"line":209,"column":24},"end":{"line":214,"column":78}},"type":"cond-expr","locations":[{"start":{"line":209,"column":58},"end":{"line":209,"column":91}},{"start":{"line":210,"column":28},"end":{"line":214,"column":78}}],"line":209},"57":{"loc":{"start":{"line":210,"column":28},"end":{"line":214,"column":78}},"type":"cond-expr","locations":[{"start":{"line":212,"column":28},"end":{"line":213,"column":233}},{"start":{"line":214,"column":32},"end":{"line":214,"column":78}}],"line":210},"58":{"loc":{"start":{"line":212,"column":28},"end":{"line":213,"column":233}},"type":"cond-expr","locations":[{"start":{"line":212,"column":62},"end":{"line":212,"column":137}},{"start":{"line":213,"column":32},"end":{"line":213,"column":233}}],"line":212},"59":{"loc":{"start":{"line":221,"column":30},"end":{"line":224,"column":23}},"type":"cond-expr","locations":[{"start":{"line":221,"column":68},"end":{"line":221,"column":73}},{"start":{"line":222,"column":4},"end":{"line":224,"column":23}}],"line":221},"60":{"loc":{"start":{"line":222,"column":4},"end":{"line":224,"column":23}},"type":"cond-expr","locations":[{"start":{"line":222,"column":43},"end":{"line":222,"column":86}},{"start":{"line":223,"column":8},"end":{"line":224,"column":23}}],"line":222},"61":{"loc":{"start":{"line":223,"column":8},"end":{"line":224,"column":23}},"type":"cond-expr","locations":[{"start":{"line":223,"column":49},"end":{"line":223,"column":92}},{"start":{"line":224,"column":12},"end":{"line":224,"column":23}}],"line":223},"62":{"loc":{"start":{"line":229,"column":27},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":229,"column":57},"end":{"line":229,"column":95}},{"start":{"line":230,"column":4},"end":{"line":242,"column":55}}],"line":229},"63":{"loc":{"start":{"line":230,"column":4},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":230,"column":33},"end":{"line":230,"column":71}},{"start":{"line":231,"column":8},"end":{"line":242,"column":55}}],"line":230},"64":{"loc":{"start":{"line":231,"column":8},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":231,"column":37},"end":{"line":231,"column":75}},{"start":{"line":232,"column":12},"end":{"line":242,"column":55}}],"line":231},"65":{"loc":{"start":{"line":232,"column":12},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":232,"column":41},"end":{"line":232,"column":59}},{"start":{"line":233,"column":16},"end":{"line":242,"column":55}}],"line":232},"66":{"loc":{"start":{"line":233,"column":16},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":233,"column":45},"end":{"line":233,"column":52}},{"start":{"line":234,"column":20},"end":{"line":242,"column":55}}],"line":233},"67":{"loc":{"start":{"line":234,"column":20},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":234,"column":50},"end":{"line":234,"column":69}},{"start":{"line":235,"column":24},"end":{"line":242,"column":55}}],"line":234},"68":{"loc":{"start":{"line":235,"column":24},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":235,"column":52},"end":{"line":235,"column":165}},{"start":{"line":236,"column":28},"end":{"line":242,"column":55}}],"line":235},"69":{"loc":{"start":{"line":236,"column":28},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":236,"column":57},"end":{"line":236,"column":124}},{"start":{"line":237,"column":32},"end":{"line":242,"column":55}}],"line":236},"70":{"loc":{"start":{"line":237,"column":32},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":237,"column":61},"end":{"line":237,"column":67}},{"start":{"line":238,"column":36},"end":{"line":242,"column":55}}],"line":237},"71":{"loc":{"start":{"line":238,"column":36},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":238,"column":65},"end":{"line":238,"column":83}},{"start":{"line":239,"column":40},"end":{"line":242,"column":55}}],"line":238},"72":{"loc":{"start":{"line":239,"column":40},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":239,"column":72},"end":{"line":239,"column":132}},{"start":{"line":240,"column":44},"end":{"line":242,"column":55}}],"line":239},"73":{"loc":{"start":{"line":240,"column":44},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":240,"column":74},"end":{"line":240,"column":106}},{"start":{"line":241,"column":48},"end":{"line":242,"column":55}}],"line":240},"74":{"loc":{"start":{"line":241,"column":48},"end":{"line":242,"column":55}},"type":"cond-expr","locations":[{"start":{"line":241,"column":79},"end":{"line":241,"column":99}},{"start":{"line":242,"column":52},"end":{"line":242,"column":55}}],"line":241}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":15,"10":1,"11":1,"12":23,"13":1,"14":1,"15":30,"16":1,"17":1,"18":2,"19":1,"20":1,"21":0,"22":1,"23":1,"24":1,"25":1,"26":1,"27":60,"28":1,"29":1,"30":75,"31":1,"32":1,"33":45,"34":1,"35":1,"36":1,"37":1,"38":1,"39":18,"40":1,"41":1,"42":18,"43":1,"44":1,"45":1,"46":1,"47":1,"48":12,"49":1,"50":1,"51":16,"52":1,"53":1,"54":3,"55":1,"56":1,"57":24,"58":1,"59":1,"60":44,"61":1,"62":1,"63":46,"64":1,"65":1,"66":40,"67":1,"68":1,"69":30,"70":1,"71":1,"72":38,"73":1,"74":1,"75":0,"76":1,"77":1,"78":31,"79":1,"80":1,"81":32,"82":1,"83":1,"84":32,"85":1,"86":1,"87":0,"88":1,"89":1,"90":21,"91":1,"92":1,"93":38,"94":1,"95":1,"96":2,"97":1,"98":1,"99":0,"100":1,"101":1,"102":2,"103":1,"104":1,"105":2,"106":1,"107":1,"108":2,"109":1,"110":1,"111":15,"112":1,"113":1,"114":15,"115":1,"116":1,"117":15,"118":15,"119":1,"120":40,"121":1,"122":1,"123":36,"124":1,"125":1,"126":94,"127":1,"128":1,"129":49,"130":1,"131":1,"132":23,"133":1,"134":1,"135":23,"136":23,"137":1,"138":170,"139":1,"140":1,"141":93,"142":1,"143":1,"144":61,"145":1,"146":90,"147":1,"148":45,"149":45,"150":45,"151":1,"152":17,"153":17,"154":16,"155":1,"156":17,"157":0,"158":17,"159":16,"160":17,"161":17,"162":17,"163":1,"164":1,"165":1,"166":1,"167":18,"168":18,"169":1,"170":18,"171":1,"172":1,"173":0,"174":1,"175":2,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":12,"184":12,"185":1,"186":1,"187":0,"188":1,"189":1,"190":0,"191":0,"192":0,"193":1,"194":1,"195":12,"196":0,"197":0,"198":1,"199":1,"200":1,"201":1,"202":2,"203":1,"204":7,"205":1,"206":0,"207":0,"208":1,"209":1,"210":2,"211":1,"212":2,"213":4,"214":1,"215":24,"216":1},"f":{"0":15,"1":23,"2":30,"3":2,"4":0,"5":1,"6":60,"7":75,"8":45,"9":1,"10":18,"11":18,"12":1,"13":12,"14":16,"15":3,"16":24,"17":44,"18":46,"19":40,"20":30,"21":38,"22":0,"23":31,"24":32,"25":32,"26":0,"27":21,"28":38,"29":2,"30":0,"31":2,"32":2,"33":2,"34":15,"35":15,"36":15,"37":15,"38":40,"39":36,"40":94,"41":49,"42":23,"43":23,"44":23,"45":170,"46":93,"47":61,"48":90,"49":45,"50":45,"51":45,"52":17,"53":16,"54":17,"55":16,"56":17,"57":1,"58":1,"59":18,"60":18,"61":18,"62":1,"63":2,"64":1,"65":1,"66":1,"67":12,"68":12,"69":0,"70":0,"71":0,"72":0,"73":12,"74":0,"75":0,"76":2,"77":7,"78":0,"79":0,"80":1,"81":2,"82":2,"83":4,"84":24},"b":{"0":[0,0],"1":[2,2,2,2,2],"2":[2,0,0,0,0,0],"3":[2,2],"4":[0,15],"5":[15,15],"6":[0,15],"7":[15,0],"8":[15,0],"9":[15,15],"10":[36,4],"11":[36,0],"12":[4,0],"13":[23,13],"14":[49,45],"15":[94,90],"16":[0,49],"17":[17,32],"18":[17,0],"19":[1,31],"20":[18,13],"21":[18,0],"22":[1,12],"23":[1,0],"24":[12,0],"25":[12,0],"26":[23,0],"27":[0,23],"28":[0,23],"29":[0,23],"30":[81,89],"31":[81,0],"32":[89,0],"33":[1,92],"34":[1,91],"35":[30,61],"36":[91,91],"37":[1,60],"38":[61,61],"39":[60,0],"40":[16,1],"41":[17,17],"42":[0,17],"43":[0,1],"44":[18,0],"45":[18,18],"46":[18,18,18],"47":[0,1],"48":[0,0],"49":[0,12],"50":[0,12],"51":[0,12],"52":[12,12],"53":[0,12],"54":[12,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,2],"60":[2,0],"61":[0,0],"62":[2,22],"63":[4,18],"64":[0,18],"65":[2,16],"66":[4,12],"67":[0,12],"68":[1,11],"69":[5,6],"70":[1,5],"71":[1,4],"72":[1,3],"73":[1,2],"74":[2,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/L3/L3-ast.ts","sources":["D:/degree/ppl/assignment2/L3/L3-ast.ts"],"names":[],"mappings":"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","sourcesContent":["// ===========================================================\r\n// AST type models\r\nimport { map, zipWith } from \"ramda\";\r\nimport { makeEmptySExp, makeSymbolSExp, SExpValue, makeCompoundSExp, valueToString } from './L3-value'\r\nimport { first, second, rest, allT, isEmpty, isNonEmptyList, List } from \"../shared/list\";\r\nimport { isArray, isString, isNumericString, isIdentifier } from \"../shared/type-predicates\";\r\nimport { Result, makeOk, makeFailure, bind, mapResult, mapv, isOk } from \"../shared/result\";\r\nimport { parse as p, isSexpString, isToken, isCompoundSexp } from \"../shared/parser\";\r\nimport { Sexp, Token } from \"s-expression\";\r\n\r\n/*\r\n;; =============================================================================\r\n;; Scheme Parser\r\n;;\r\n;; L2 extends L1 with support for IfExp and ProcExp\r\n;; L3 extends L2 with support for:\r\n;; - Pair datatype\r\n;; - The empty-list literal expression\r\n;; - Compound literal expressions denoted with quote\r\n;; - Primitives: cons, car, cdr, pair?, number?, boolean?, symbol?, string?, list\r\n;; - Primitives: and, or, not\r\n;; - The Let abbreviation is also supported.\r\n\r\n;; <program> ::= (L3 <exp>+) // Program(exps:List(Exp))\r\n;; <exp> ::= <define> | <cexp>              / DefExp | CExp\r\n;; <define> ::= ( define <var> <cexp> )     / DefExp(var:VarDecl, val:CExp)\r\n;; <var> ::= <identifier>                   / VarRef(var:string)\r\n;; <cexp> ::= <number>                      / NumExp(val:number)\r\n;;         |  <boolean>                     / BoolExp(val:boolean)\r\n;;         |  <string>                      / StrExp(val:string)\r\n;;         |  ( lambda ( <var>* ) <cexp>+ ) / ProcExp(args:VarDecl[], body:CExp[]))\r\n;;         |  ( if <cexp> <cexp> <cexp> )   / IfExp(test: CExp, then: CExp, alt: CExp)\r\n;;         |  ( let ( binding* ) <cexp>+ )  / LetExp(bindings:Binding[], body:CExp[]))\r\n;;         |  ( quote <sexp> )              / LitExp(val:SExp)\r\n;;         |  ( <cexp> <cexp>* )            / AppExp(operator:CExp, operands:CExp[]))\r\n;; <binding>  ::= ( <var> <cexp> )           / Binding(var:VarDecl, val:Cexp)\r\n;; <prim-op>  ::= + | - | * | / | < | > | = | not |  and | or | eq? | string=?\r\n;;                  | cons | car | cdr | pair? | number? | list \r\n;;                  | boolean? | symbol? | string?      ##### L3\r\n;; <num-exp>  ::= a number token\r\n;; <bool-exp> ::= #t | #f\r\n;; <var-ref>  ::= an identifier token\r\n;; <var-decl> ::= an identifier token\r\n;; <sexp>     ::= symbol | number | bool | string | \r\n;;                (<sexp>+ . <sexp>) | ( <sexp>* )       ##### L3\r\n*/\r\n\r\nexport type Exp =  DefineExp | CExp;\r\nexport type AtomicExp = NumExp | BoolExp | StrExp | PrimOp | VarRef;\r\nexport type CompoundExp = AppExp | IfExp | ProcExp | LetExp | LitExp | ClassExp ;\r\nexport type CExp =  AtomicExp | CompoundExp;\r\n\r\nexport type Program = {tag: \"Program\"; exps: Exp[]; }\r\nexport type DefineExp = {tag: \"DefineExp\"; var: VarDecl; val: CExp; }\r\nexport type NumExp = {tag: \"NumExp\"; val: number; }\r\nexport type BoolExp = {tag: \"BoolExp\"; val: boolean; }\r\nexport type StrExp = {tag: \"StrExp\"; val: string; }\r\nexport type PrimOp = {tag: \"PrimOp\"; op: string; }\r\nexport type VarRef = {tag: \"VarRef\"; var: string; }\r\nexport type VarDecl = {tag: \"VarDecl\"; var: string; }\r\nexport type AppExp = {tag: \"AppExp\"; rator: CExp; rands: CExp[]; }\r\n// L2\r\nexport type IfExp = {tag: \"IfExp\"; test: CExp; then: CExp; alt: CExp; }\r\nexport type ProcExp = {tag: \"ProcExp\"; args: VarDecl[], body: CExp[]; }\r\nexport type Binding = {tag: \"Binding\"; var: VarDecl; val: CExp; }\r\nexport type LetExp = {tag: \"LetExp\"; bindings: Binding[]; body: CExp[]; }\r\n// L3\r\nexport type LitExp = {tag: \"LitExp\"; val: SExpValue; }\r\nexport type ClassExp = {tag: \"ClassExp\"; fields: VarDecl[]; methods: Binding[];}\r\n\r\n// Type value constructors for disjoint types\r\nexport const makeProgram = (exps: Exp[]): Program => ({tag: \"Program\", exps: exps});\r\nexport const makeDefineExp = (v: VarDecl, val: CExp): DefineExp =>\r\n    ({tag: \"DefineExp\", var: v, val: val});\r\nexport const makeNumExp = (n: number): NumExp => ({tag: \"NumExp\", val: n});\r\nexport const makeBoolExp = (b: boolean): BoolExp => ({tag: \"BoolExp\", val: b});\r\nexport const makeStrExp = (s: string): StrExp => ({tag: \"StrExp\", val: s});\r\nexport const makePrimOp = (op: string): PrimOp => ({tag: \"PrimOp\", op: op});\r\nexport const makeVarRef = (v: string): VarRef => ({tag: \"VarRef\", var: v});\r\nexport const makeVarDecl = (v: string): VarDecl => ({tag: \"VarDecl\", var: v});\r\nexport const makeAppExp = (rator: CExp, rands: CExp[]): AppExp =>\r\n    ({tag: \"AppExp\", rator: rator, rands: rands});\r\n// L2\r\nexport const makeIfExp = (test: CExp, then: CExp, alt: CExp): IfExp =>\r\n    ({tag: \"IfExp\", test: test, then: then, alt: alt});\r\nexport const makeProcExp = (args: VarDecl[], body: CExp[]): ProcExp =>\r\n    ({tag: \"ProcExp\", args: args, body: body});\r\nexport const makeBinding = (v: string, val: CExp): Binding =>\r\n    ({tag: \"Binding\", var: makeVarDecl(v), val: val});\r\nexport const makeLetExp = (bindings: Binding[], body: CExp[]): LetExp =>\r\n    ({tag: \"LetExp\", bindings: bindings, body: body});\r\n// L3\r\nexport const makeLitExp = (val: SExpValue): LitExp =>\r\n    ({tag: \"LitExp\", val: val});\r\nexport const makeClassExp = (fields: VarDecl[], methods: Binding[]): ClassExp =>\r\n     ({tag: \"ClassExp\", fields:fields, methods:methods});\r\n\r\n// Type predicates for disjoint types\r\nexport const isProgram = (x: any): x is Program => x.tag === \"Program\";\r\nexport const isDefineExp = (x: any): x is DefineExp => x.tag === \"DefineExp\";\r\n\r\nexport const isNumExp = (x: any): x is NumExp => x.tag === \"NumExp\";\r\nexport const isBoolExp = (x: any): x is BoolExp => x.tag === \"BoolExp\";\r\nexport const isStrExp = (x: any): x is StrExp => x.tag === \"StrExp\";\r\nexport const isPrimOp = (x: any): x is PrimOp => x.tag === \"PrimOp\";\r\nexport const isVarRef = (x: any): x is VarRef => x.tag === \"VarRef\";\r\nexport const isVarDecl = (x: any): x is VarDecl => x.tag === \"VarDecl\";\r\nexport const isAppExp = (x: any): x is AppExp => x.tag === \"AppExp\";\r\n// L2\r\nexport const isIfExp = (x: any): x is IfExp => x.tag === \"IfExp\";\r\nexport const isProcExp = (x: any): x is ProcExp => x.tag === \"ProcExp\";\r\nexport const isBinding = (x: any): x is Binding => x.tag === \"Binding\";\r\nexport const isLetExp = (x: any): x is LetExp => x.tag === \"LetExp\";\r\n// L3\r\nexport const isLitExp = (x: any): x is LitExp => x.tag === \"LitExp\";\r\nexport const isClassExp = (x: any): x is ClassExp => x.tag === \"ClassExp\";\r\n\r\n// Type predicates for type unions\r\nexport const isExp = (x: any): x is Exp => isDefineExp(x) || isCExp(x);\r\nexport const isAtomicExp = (x: any): x is AtomicExp =>\r\n    isNumExp(x) || isBoolExp(x) || isStrExp(x) ||\r\n    isPrimOp(x) || isVarRef(x);\r\nexport const isCompoundExp = (x: any): x is CompoundExp =>\r\n    isAppExp(x) || isIfExp(x) || isProcExp(x) || isLitExp(x) || isLetExp(x)  || isClassExp(x);\r\nexport const isCExp = (x: any): x is CExp =>\r\n    isAtomicExp(x) || isCompoundExp(x);\r\n\r\n// ========================================================\r\n// Parsing\r\n\r\nexport const parseL3 = (x: string): Result<Program> =>\r\n    bind(p(x), parseL3Program);\r\n\r\nexport const parseL3Program = (sexp: Sexp): Result<Program> =>\r\n    sexp === \"\" || isEmpty(sexp) ? makeFailure(\"Unexpected empty program\") :\r\n    isToken(sexp) ? makeFailure(`Program cannot be a single token: ${format(sexp)}`) :\r\n    isNonEmptyList<Sexp>(sexp) ? parseL3GoodProgram(first(sexp), rest(sexp)) :\r\n    makeFailure(`Unexpected type ${format(sexp)}`);\r\n\r\nconst parseL3GoodProgram = (keyword: Sexp, body: Sexp[]): Result<Program> =>\r\n    keyword === \"L3\" && !isEmpty(body) ? mapv(mapResult(parseL3Exp, body), (exps: Exp[]) => \r\n                                              makeProgram(exps)) :\r\n    makeFailure(`Program must be of the form (L3 <exp>+): ${format([keyword, ...body])}`);\r\n\r\n// Exp -> <DefineExp> | <Cexp>\r\nexport const parseL3Exp = (sexp: Sexp): Result<Exp> =>\r\n    isCompoundSexp(sexp) ? \r\n        isNonEmptyList<Sexp>(sexp) ? parseL3CompoundExp(first(sexp), rest(sexp)) :\r\n        makeFailure(`Exp cannot be an empty list: ${format(sexp)}`) :\r\n    isToken(sexp) ? parseL3Atomic(sexp) :\r\n    makeFailure(`Bad param: ${sexp}`);\r\n\r\n// Compound -> DefineExp | CompoundCExp\r\nexport const parseL3CompoundExp = (op: Sexp, params: Sexp[]): Result<Exp> => \r\n    op === \"define\"? parseDefine(params):\r\n    parseL3CompoundCExp(op, params);\r\n\r\n// CompoundCExp -> IfExp | ProcExp | LetExp | LitExp | AppExp\r\nexport const parseL3CompoundCExp = (op: Sexp, params: Sexp[]): Result<CExp> =>\r\n    isString(op) && isSpecialForm(op) ? parseL3SpecialForm(op, params) :\r\n    parseAppExp(op, params);\r\n\r\nexport const parseL3SpecialForm = (op: Sexp, params: Sexp[]): Result<CExp> =>\r\n    isEmpty(params) ? makeFailure(\"Empty args for special form\") :\r\n    op === \"class\" ? \r\n        (isNonEmptyList<Sexp>(params) ? parseClassExp(first(params), rest(params)): makeFailure(`Bad proc: ${params}`)):\r\n    op === \"if\" ? parseIfExp(params) :\r\n    op === \"lambda\" ? \r\n        isNonEmptyList<Sexp>(params) ? parseProcExp(first(params), rest(params)) :\r\n        makeFailure(`Bad proc: ${params}`) :\r\n    op === \"let\" ? \r\n        isNonEmptyList<Sexp>(params) ? parseLetExp(first(params), rest(params)) :\r\n        makeFailure(`Bad let: ${params}`) :\r\n    op === \"quote\" ? \r\n        isNonEmptyList<Sexp>(params) ? parseLitExp(first(params)) :\r\n        makeFailure(`Bad quote exp: ${params}`) :\r\n    makeFailure(\"Never\");\r\n\r\n// DefineExp -> (define <varDecl> <CExp>)\r\nexport const parseDefine = (params: List<Sexp>): Result<DefineExp> =>\r\n    isNonEmptyList<Sexp>(params) ? \r\n        isEmpty(rest(params)) ? makeFailure(`define missing 1 arguments: ${format(params)}`) :\r\n        (params.length > 2) ? makeFailure(`define too many arguments: ${format(params)}`) :\r\n        parseGoodDefine(first(params), second(params)) :\r\n    makeFailure(\"define missing 2 arguments\");\r\n\r\n\r\nconst parseGoodDefine = (variable: Sexp, val: Sexp): Result<DefineExp> =>\r\n    ! isIdentifier(variable) ? makeFailure(`First arg of define must be an identifier: ${format(variable)}`) :\r\n    mapv(parseL3CExp(val), (value: CExp) => \r\n         makeDefineExp(makeVarDecl(variable), value));\r\n\r\nexport const parseL3CExp = (sexp: Sexp): Result<CExp> =>\r\n    isCompoundSexp(sexp) ? \r\n        isNonEmptyList<Sexp>(sexp) ? parseL3CompoundCExp(first(sexp), rest(sexp)) :\r\n        makeFailure(\"CExp cannot be an empty list\") :\r\n    isToken(sexp) ? parseL3Atomic(sexp) :\r\n    makeFailure(`Bad sexp: ${sexp}`);\r\n\r\n// Atomic -> number | boolean | primitiveOp | string\r\nexport const parseL3Atomic = (token: Token): Result<CExp> =>\r\n    token === \"#t\" ? makeOk(makeBoolExp(true)) :\r\n    token === \"#f\" ? makeOk(makeBoolExp(false)) :\r\n    isString(token) && isNumericString(token) ? makeOk(makeNumExp(+token)) :\r\n    isString(token) && isPrimitiveOp(token) ? makeOk(makePrimOp(token)) :\r\n    isString(token) ? makeOk(makeVarRef(token)) :\r\n    makeOk(makeStrExp(token.toString()));\r\n\r\n/*\r\n    ;; <prim-op>  ::= + | - | * | / | < | > | = | not | and | or | eq? | string=?\r\n    ;;                  | cons | car | cdr | pair? | number? | list\r\n    ;;                  | boolean? | symbol? | string?      ##### L3\r\n*/\r\nconst isPrimitiveOp = (x: string): boolean =>\r\n    [\"+\", \"-\", \"*\", \"/\", \">\", \"<\", \"=\", \"not\", \"and\", \"or\",\r\n     \"eq?\", \"string=?\", \"cons\", \"car\", \"cdr\", \"list\", \"pair?\",\r\n     \"number?\", \"boolean?\", \"symbol?\", \"string?\"].includes(x);\r\n\r\nconst isSpecialForm = (x: string): boolean =>\r\n    [\"if\", \"lambda\", \"let\", \"quote\", \"class\"].includes(x);\r\n\r\nconst parseAppExp = (op: Sexp, params: Sexp[]): Result<AppExp> =>\r\n    bind(parseL3CExp(op), (rator: CExp) => \r\n        mapv(mapResult(parseL3CExp, params), (rands: CExp[]) =>\r\n             makeAppExp(rator, rands)));\r\n\r\n\r\nconst parseClassExp = (vars: Sexp, bindings: Sexp): Result <ClassExp> =>\r\n    {\r\n        const bindingsResult = parseClassExpBindingHelper(bindings);\r\n        return isArray(vars)&&allT(isString,vars) ? bind(bindingsResult,(x) =>\r\n            makeOk(makeClassExp(map(makeVarDecl, vars),x))) :\r\n        makeFailure(`Invalid vars for ClassExp ${format(vars)}`);\r\n    }\r\n\r\nconst parseClassExpBindingHelper = (bindings: Sexp): Result<Binding[]>  => {\r\n    if (!isGoodBindings(bindings)) {\r\n        return makeFailure('Malformed bindings in \"class\" expression');\r\n    }\r\n    const vars = map(b => b[0], bindings);\r\n    const valsResult = mapResult(parseL3CExp, map(second, bindings));\r\n    return mapv(valsResult, (vals: CExp[]) => zipWith(makeBinding, vars, vals));\r\n}\r\n\r\nconst parseIfExp = (params: Sexp[]): Result<IfExp> =>\r\n    params.length !== 3 ? makeFailure(`Expression not of the form (if <cexp> <cexp> <cexp>): ${format(params)}`) :\r\n    mapv(mapResult(parseL3CExp, params), (cexps: CExp[]) => \r\n        makeIfExp(cexps[0], cexps[1], cexps[2]));\r\n\r\nconst parseProcExp = (vars: Sexp, body: Sexp[]): Result<ProcExp> =>\r\n    isArray(vars) && allT(isString, vars) ? mapv(mapResult(parseL3CExp, body), (cexps: CExp[]) => \r\n                                                 makeProcExp(map(makeVarDecl, vars), cexps)) :\r\n    makeFailure(`Invalid vars for ProcExp ${format(vars)}`);\r\n\r\nconst isGoodBindings = (bindings: Sexp): bindings is [string, Sexp][] =>\r\n    isArray(bindings) &&\r\n    allT(isNonEmptyList<Sexp>, bindings) &&\r\n    allT(isIdentifier, map(first, bindings));\r\n\r\nconst parseLetExp = (bindings: Sexp, body: Sexp[]): Result<LetExp> => {\r\n    if (!isGoodBindings(bindings)) {\r\n        return makeFailure('Malformed bindings in \"let\" expression');\r\n    }\r\n    // Given (letrec ( (var <val>) ...) <cexp> ...)\r\n    // Return makeLetExp( [makeBinding(var, parse(<val>)) ...], [ parse(<cexp>) ...] )\r\n    // After isGoodBindings, bindings has type [string, Sexp][]\r\n    const vars = map(b => b[0], bindings);\r\n    const valsResult = mapResult(parseL3CExp, map(second, bindings));\r\n    const bindingsResult = mapv(valsResult, (vals: CExp[]) => zipWith(makeBinding, vars, vals));\r\n    return bind(bindingsResult, (bindings: Binding[]) => \r\n                mapv(mapResult(parseL3CExp, body), (body: CExp[]) =>\r\n                     makeLetExp(bindings, body)));\r\n}\r\n\r\n// sexps has the shape (quote <sexp>)\r\nexport const parseLitExp = (param: Sexp): Result<LitExp> =>\r\n    mapv(parseSExp(param), (sexp: SExpValue) => \r\n         makeLitExp(sexp));\r\n\r\nexport const isDottedPair = (sexps: Sexp[]): boolean =>\r\n    sexps.length === 3 && \r\n    sexps[1] === \".\"\r\n\r\nexport const makeDottedPair = (sexps : Sexp[]): Result<SExpValue> =>\r\n    bind(parseSExp(sexps[0]), (val1: SExpValue) => \r\n        mapv(parseSExp(sexps[2]), (val2: SExpValue) =>\r\n             makeCompoundSExp(val1, val2)));\r\n\r\n// x is the output of p (sexp parser)\r\nexport const parseSExp = (sexp: Sexp): Result<SExpValue> =>\r\n    sexp === \"#t\" ? makeOk(true) :\r\n    sexp === \"#f\" ? makeOk(false) :\r\n    isString(sexp) && isNumericString(sexp) ? makeOk(+sexp) :\r\n    isSexpString(sexp) ? makeOk(sexp.toString()) :\r\n    isString(sexp) ? makeOk(makeSymbolSExp(sexp)) :\r\n    sexp.length === 0 ? makeOk(makeEmptySExp()) :\r\n    isDottedPair(sexp) ? makeDottedPair(sexp) :\r\n    isNonEmptyList<Sexp>(sexp) ? (\r\n        // fail on (x . y z)\r\n        first(sexp) === '.' ? makeFailure(`Bad dotted sexp: ${format(sexp)}`) : \r\n        bind(parseSExp(first(sexp)), (val1: SExpValue) =>\r\n             mapv(parseSExp(rest(sexp)), (val2: SExpValue) =>\r\n                  makeCompoundSExp(val1, val2))) \r\n        ) :\r\n    makeFailure(`Bad sexp: ${sexp}`);\r\n\r\n\r\n// ==========================================================================\r\n// Unparse: Map an AST to a concrete syntax string.\r\n\r\nimport { isSymbolSExp, isEmptySExp, isCompoundSExp } from './L3-value';\r\nimport { format } from \"../shared/format\";\r\n\r\n// Add a quote for symbols, empty and compound sexp - strings and numbers are not quoted.\r\nconst unparseLitExp = (le: LitExp): string =>\r\n    isEmptySExp(le.val) ? `'()` :\r\n    isSymbolSExp(le.val) ? `'${valueToString(le.val)}` :\r\n    isCompoundSExp(le.val) ? `'${valueToString(le.val)}` :\r\n    `${le.val}`;\r\n\r\nconst unparseLExps = (les: Exp[]): string =>\r\n    map(unparseL3, les).join(\" \");\r\n\r\nconst unparseProcExp = (pe: ProcExp): string => \r\n    `(lambda (${map((p: VarDecl) => p.var, pe.args).join(\" \")}) ${unparseLExps(pe.body)})`\r\n\r\nconst unparseLetExp = (le: LetExp) : string => \r\n    `(let (${map((b: Binding) => `(${b.var.var} ${unparseL3(b.val)})`, le.bindings).join(\" \")}) ${unparseLExps(le.body)})`\r\n\r\nconst unparseClassExp = (ce: ClassExp) : string =>\r\n    `(class (${map((p: VarDecl) => p.var, ce.fields).join(\" \")}) ${ce.methods.join(\" \")})`\r\n\r\nexport const unparseL3 = (exp: Program | Exp): string =>\r\n    isBoolExp(exp) ? valueToString(exp.val) :\r\n    isNumExp(exp) ? valueToString(exp.val) :\r\n    isStrExp(exp) ? valueToString(exp.val) :\r\n    isLitExp(exp) ? unparseLitExp(exp) :\r\n    isVarRef(exp) ? exp.var :\r\n    isProcExp(exp) ? unparseProcExp(exp) :\r\n    isIfExp(exp) ? `(if ${unparseL3(exp.test)} ${unparseL3(exp.then)} ${unparseL3(exp.alt)})` :\r\n    isAppExp(exp) ? `(${unparseL3(exp.rator)} ${unparseLExps(exp.rands)})` :\r\n    isPrimOp(exp) ? exp.op :\r\n    isLetExp(exp) ? unparseLetExp(exp) :\r\n    isDefineExp(exp) ? `(define ${exp.var.var} ${unparseL3(exp.val)})` :\r\n    isProgram(exp) ? `(L3 ${unparseLExps(exp.exps)})` :\r\n    isClassExp(exp) ? unparseClassExp(exp):\r\n    exp;\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e05a7af8ed99727add5db94b969f694e411a134e","contentHash":"6f41a75a58272a1e030c594f02ab714a26406a3c0b8114e2a221acb990ac49b2"},"D:\\degree\\ppl\\assignment2\\L3\\L3-value.ts":{"path":"D:\\degree\\ppl\\assignment2\\L3\\L3-value.ts","statementMap":{"0":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":371}},"2":{"start":{"line":6,"column":17},"end":{"line":6,"column":36}},"3":{"start":{"line":7,"column":21},"end":{"line":7,"column":44}},"4":{"start":{"line":8,"column":16},"end":{"line":8,"column":32}},"5":{"start":{"line":9,"column":26},"end":{"line":9,"column":62}},"6":{"start":{"line":10,"column":21},"end":{"line":10,"column":82}},"7":{"start":{"line":10,"column":28},"end":{"line":10,"column":82}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":36}},"9":{"start":{"line":12,"column":20},"end":{"line":12,"column":125}},"10":{"start":{"line":12,"column":39},"end":{"line":12,"column":124}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":34}},"12":{"start":{"line":14,"column":23},"end":{"line":14,"column":104}},"13":{"start":{"line":14,"column":47},"end":{"line":14,"column":103}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":40}},"15":{"start":{"line":16,"column":18},"end":{"line":16,"column":44}},"16":{"start":{"line":16,"column":25},"end":{"line":16,"column":44}},"17":{"start":{"line":17,"column":0},"end":{"line":17,"column":30}},"18":{"start":{"line":18,"column":15},"end":{"line":19,"column":155}},"19":{"start":{"line":18,"column":22},"end":{"line":19,"column":155}},"20":{"start":{"line":20,"column":0},"end":{"line":20,"column":24}},"21":{"start":{"line":21,"column":25},"end":{"line":21,"column":90}},"22":{"start":{"line":21,"column":42},"end":{"line":21,"column":89}},"23":{"start":{"line":22,"column":0},"end":{"line":22,"column":44}},"24":{"start":{"line":23,"column":23},"end":{"line":23,"column":54}},"25":{"start":{"line":23,"column":30},"end":{"line":23,"column":54}},"26":{"start":{"line":24,"column":0},"end":{"line":24,"column":40}},"27":{"start":{"line":25,"column":22},"end":{"line":25,"column":50}},"28":{"start":{"line":25,"column":29},"end":{"line":25,"column":49}},"29":{"start":{"line":26,"column":0},"end":{"line":26,"column":38}},"30":{"start":{"line":27,"column":20},"end":{"line":27,"column":48}},"31":{"start":{"line":27,"column":27},"end":{"line":27,"column":48}},"32":{"start":{"line":28,"column":0},"end":{"line":28,"column":34}},"33":{"start":{"line":29,"column":23},"end":{"line":29,"column":65}},"34":{"start":{"line":29,"column":33},"end":{"line":29,"column":64}},"35":{"start":{"line":30,"column":0},"end":{"line":30,"column":40}},"36":{"start":{"line":31,"column":21},"end":{"line":31,"column":50}},"37":{"start":{"line":31,"column":28},"end":{"line":31,"column":50}},"38":{"start":{"line":32,"column":0},"end":{"line":32,"column":36}},"39":{"start":{"line":34,"column":24},"end":{"line":36,"column":33}},"40":{"start":{"line":36,"column":0},"end":{"line":36,"column":33}},"41":{"start":{"line":37,"column":0},"end":{"line":37,"column":42}},"42":{"start":{"line":38,"column":28},"end":{"line":40,"column":120}},"43":{"start":{"line":38,"column":41},"end":{"line":40,"column":120}},"44":{"start":{"line":41,"column":0},"end":{"line":41,"column":50}},"45":{"start":{"line":42,"column":29},"end":{"line":43,"column":39}},"46":{"start":{"line":42,"column":85},"end":{"line":43,"column":39}},"47":{"start":{"line":44,"column":0},"end":{"line":44,"column":52}},"48":{"start":{"line":45,"column":22},"end":{"line":54,"column":39}},"49":{"start":{"line":45,"column":31},"end":{"line":54,"column":39}},"50":{"start":{"line":55,"column":0},"end":{"line":55,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":21},"end":{"line":10,"column":22}},"loc":{"start":{"line":10,"column":28},"end":{"line":10,"column":82}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":20},"end":{"line":12,"column":21}},"loc":{"start":{"line":12,"column":39},"end":{"line":12,"column":124}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":23},"end":{"line":14,"column":24}},"loc":{"start":{"line":14,"column":47},"end":{"line":14,"column":103}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":16,"column":18},"end":{"line":16,"column":19}},"loc":{"start":{"line":16,"column":25},"end":{"line":16,"column":44}},"line":16},"4":{"name":"(anonymous_4)","decl":{"start":{"line":18,"column":15},"end":{"line":18,"column":16}},"loc":{"start":{"line":18,"column":22},"end":{"line":19,"column":155}},"line":18},"5":{"name":"(anonymous_5)","decl":{"start":{"line":21,"column":25},"end":{"line":21,"column":26}},"loc":{"start":{"line":21,"column":42},"end":{"line":21,"column":89}},"line":21},"6":{"name":"(anonymous_6)","decl":{"start":{"line":23,"column":23},"end":{"line":23,"column":24}},"loc":{"start":{"line":23,"column":30},"end":{"line":23,"column":54}},"line":23},"7":{"name":"(anonymous_7)","decl":{"start":{"line":25,"column":22},"end":{"line":25,"column":23}},"loc":{"start":{"line":25,"column":29},"end":{"line":25,"column":49}},"line":25},"8":{"name":"(anonymous_8)","decl":{"start":{"line":27,"column":20},"end":{"line":27,"column":21}},"loc":{"start":{"line":27,"column":27},"end":{"line":27,"column":48}},"line":27},"9":{"name":"(anonymous_9)","decl":{"start":{"line":29,"column":23},"end":{"line":29,"column":24}},"loc":{"start":{"line":29,"column":33},"end":{"line":29,"column":64}},"line":29},"10":{"name":"(anonymous_10)","decl":{"start":{"line":31,"column":21},"end":{"line":31,"column":22}},"loc":{"start":{"line":31,"column":28},"end":{"line":31,"column":50}},"line":31},"11":{"name":"(anonymous_11)","decl":{"start":{"line":34,"column":24},"end":{"line":34,"column":25}},"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":33}},"line":36},"12":{"name":"(anonymous_12)","decl":{"start":{"line":38,"column":28},"end":{"line":38,"column":29}},"loc":{"start":{"line":38,"column":41},"end":{"line":40,"column":120}},"line":38},"13":{"name":"(anonymous_13)","decl":{"start":{"line":42,"column":29},"end":{"line":42,"column":30}},"loc":{"start":{"line":42,"column":85},"end":{"line":43,"column":39}},"line":42},"14":{"name":"(anonymous_14)","decl":{"start":{"line":45,"column":22},"end":{"line":45,"column":23}},"loc":{"start":{"line":45,"column":31},"end":{"line":54,"column":39}},"line":45}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":28},"end":{"line":10,"column":82}},"type":"binary-expr","locations":[{"start":{"line":10,"column":28},"end":{"line":10,"column":53}},{"start":{"line":10,"column":57},"end":{"line":10,"column":82}}],"line":10},"1":{"loc":{"start":{"line":18,"column":22},"end":{"line":19,"column":155}},"type":"binary-expr","locations":[{"start":{"line":18,"column":22},"end":{"line":18,"column":45}},{"start":{"line":18,"column":49},"end":{"line":18,"column":73}},{"start":{"line":18,"column":77},"end":{"line":18,"column":100}},{"start":{"line":19,"column":4},"end":{"line":19,"column":32}},{"start":{"line":19,"column":36},"end":{"line":19,"column":66}},{"start":{"line":19,"column":70},"end":{"line":19,"column":97}},{"start":{"line":19,"column":101},"end":{"line":19,"column":126}},{"start":{"line":19,"column":130},"end":{"line":19,"column":155}}],"line":18},"2":{"loc":{"start":{"line":38,"column":41},"end":{"line":40,"column":120}},"type":"cond-expr","locations":[{"start":{"line":38,"column":77},"end":{"line":38,"column":138}},{"start":{"line":39,"column":4},"end":{"line":40,"column":120}}],"line":38},"3":{"loc":{"start":{"line":39,"column":4},"end":{"line":40,"column":120}},"type":"cond-expr","locations":[{"start":{"line":39,"column":43},"end":{"line":39,"column":147}},{"start":{"line":40,"column":9},"end":{"line":40,"column":119}}],"line":39},"4":{"loc":{"start":{"line":42,"column":34},"end":{"line":42,"column":80}},"type":"default-arg","locations":[{"start":{"line":42,"column":40},"end":{"line":42,"column":80}}],"line":42},"5":{"loc":{"start":{"line":42,"column":85},"end":{"line":43,"column":39}},"type":"cond-expr","locations":[{"start":{"line":42,"column":123},"end":{"line":42,"column":143}},{"start":{"line":43,"column":4},"end":{"line":43,"column":39}}],"line":42},"6":{"loc":{"start":{"line":45,"column":31},"end":{"line":54,"column":39}},"type":"cond-expr","locations":[{"start":{"line":45,"column":70},"end":{"line":45,"column":84}},{"start":{"line":46,"column":4},"end":{"line":54,"column":39}}],"line":45},"7":{"loc":{"start":{"line":46,"column":4},"end":{"line":54,"column":39}},"type":"cond-expr","locations":[{"start":{"line":46,"column":19},"end":{"line":46,"column":23}},{"start":{"line":47,"column":8},"end":{"line":54,"column":39}}],"line":46},"8":{"loc":{"start":{"line":47,"column":8},"end":{"line":54,"column":39}},"type":"cond-expr","locations":[{"start":{"line":47,"column":24},"end":{"line":47,"column":28}},{"start":{"line":48,"column":12},"end":{"line":54,"column":39}}],"line":47},"9":{"loc":{"start":{"line":48,"column":12},"end":{"line":54,"column":39}},"type":"cond-expr","locations":[{"start":{"line":48,"column":51},"end":{"line":48,"column":61}},{"start":{"line":49,"column":16},"end":{"line":54,"column":39}}],"line":48},"10":{"loc":{"start":{"line":49,"column":16},"end":{"line":54,"column":39}},"type":"cond-expr","locations":[{"start":{"line":49,"column":46},"end":{"line":49,"column":79}},{"start":{"line":50,"column":20},"end":{"line":54,"column":39}}],"line":49},"11":{"loc":{"start":{"line":50,"column":20},"end":{"line":54,"column":39}},"type":"cond-expr","locations":[{"start":{"line":50,"column":50},"end":{"line":50,"column":56}},{"start":{"line":51,"column":24},"end":{"line":54,"column":39}}],"line":50},"12":{"loc":{"start":{"line":51,"column":24},"end":{"line":54,"column":39}},"type":"cond-expr","locations":[{"start":{"line":51,"column":57},"end":{"line":51,"column":64}},{"start":{"line":52,"column":28},"end":{"line":54,"column":39}}],"line":51},"13":{"loc":{"start":{"line":52,"column":28},"end":{"line":54,"column":39}},"type":"cond-expr","locations":[{"start":{"line":52,"column":60},"end":{"line":52,"column":65}},{"start":{"line":53,"column":32},"end":{"line":54,"column":39}}],"line":52},"14":{"loc":{"start":{"line":53,"column":32},"end":{"line":54,"column":39}},"type":"cond-expr","locations":[{"start":{"line":53,"column":67},"end":{"line":53,"column":105}},{"start":{"line":54,"column":36},"end":{"line":54,"column":39}}],"line":53}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":2,"17":1,"18":1,"19":0,"20":1,"21":1,"22":0,"23":1,"24":1,"25":0,"26":1,"27":1,"28":0,"29":1,"30":1,"31":2,"32":1,"33":1,"34":12,"35":1,"36":1,"37":4,"38":1,"39":1,"40":0,"41":1,"42":1,"43":0,"44":1,"45":1,"46":0,"47":1,"48":1,"49":8,"50":1},"f":{"0":0,"1":1,"2":1,"3":2,"4":0,"5":0,"6":0,"7":0,"8":2,"9":12,"10":4,"11":0,"12":0,"13":0,"14":8},"b":{"0":[0,0],"1":[0,0,0,0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0],"5":[0,0],"6":[4,4],"7":[1,3],"8":[1,2],"9":[0,2],"10":[0,2],"11":[0,2],"12":[2,0],"13":[0,0],"14":[0,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/L3/L3-value.ts","sources":["D:/degree/ppl/assignment2/L3/L3-value.ts"],"names":[],"mappings":"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","sourcesContent":["// ========================================================\r\n// Value type definition for L4\r\n\r\nimport { isPrimOp, CExp, PrimOp, VarDecl } from './L3-ast';\r\nimport { Env, makeEmptyEnv } from './L3-env-env';\r\nimport { append } from 'ramda';\r\nimport { isArray, isNumber, isString } from '../shared/type-predicates';\r\n\r\n\r\nexport type Value = SExpValue;\r\n\r\nexport type Functional = PrimOp | Closure;\r\nexport const isFunctional = (x: any): x is Functional => isPrimOp(x) || isClosure(x);\r\n\r\n// ========================================================\r\n// Closure for L4 - the field env is added.\r\n// We also use a frame-based representation of closures as opposed to one env per var.\r\nexport type Closure = {\r\n    tag: \"Closure\";\r\n    params: VarDecl[];\r\n    body: CExp[];\r\n    env: Env;\r\n}\r\nexport const makeClosure = (params: VarDecl[], body: CExp[]): Closure =>\r\n    ({tag: \"Closure\", params: params, body: body, env : makeEmptyEnv()});\r\nexport const makeClosureEnv = (params: VarDecl[], body: CExp[], env: Env): Closure =>\r\n    ({tag: \"Closure\", params: params, body: body, env: env});\r\nexport const isClosure = (x: any): x is Closure => x.tag === \"Closure\";\r\n\r\n// ========================================================\r\n// SExp\r\nexport type CompoundSExp = {\r\n    tag: \"CompoundSexp\";\r\n    val1: SExpValue;\r\n    val2: SExpValue;\r\n}\r\nexport type EmptySExp = {\r\n    tag: \"EmptySExp\";\r\n}\r\nexport type SymbolSExp = {\r\n    tag: \"SymbolSExp\";\r\n    val: string;\r\n}\r\n\r\nexport type SExpValue = number | boolean | string | PrimOp | Closure | SymbolSExp | EmptySExp | CompoundSExp;\r\nexport const isSExp = (x: any): x is SExpValue =>\r\n    typeof(x) === 'string' || typeof(x) === 'boolean' || typeof(x) === 'number' ||\r\n    isSymbolSExp(x) || isCompoundSExp(x) || isEmptySExp(x) || isPrimOp(x) || isClosure(x);\r\n\r\nexport const makeCompoundSExp = (val1: SExpValue, val2: SExpValue): CompoundSExp =>\r\n    ({tag: \"CompoundSexp\", val1: val1, val2 : val2});\r\nexport const isCompoundSExp = (x: any): x is CompoundSExp => x.tag === \"CompoundSexp\";\r\n\r\nexport const makeEmptySExp = (): EmptySExp => ({tag: \"EmptySExp\"});\r\nexport const isEmptySExp = (x: any): x is EmptySExp => x.tag === \"EmptySExp\";\r\n\r\nexport const makeSymbolSExp = (val: string): SymbolSExp =>\r\n    ({tag: \"SymbolSExp\", val: val});\r\nexport const isSymbolSExp = (x: any): x is SymbolSExp => x.tag === \"SymbolSExp\";\r\n\r\n// LitSExp are equivalent to JSON - they can be parsed and read as literal values\r\n// like SExp except that non functional values (PrimOp and Closures) can be embedded at any level.\r\nexport type LitSExp = number | boolean | string | SymbolSExp | EmptySExp | CompoundSExp;\r\n\r\n// Printable form for values\r\nexport const closureToString = (c: Closure): string =>\r\n    // `<Closure ${c.params} ${L3unparse(c.body)}>`\r\n    `<Closure ${c.params} ${c.body}>`\r\n\r\nexport const compoundSExpToArray = (cs: CompoundSExp, res: string[]): string[] | { s1: string[], s2: string } =>\r\n    isEmptySExp(cs.val2) ? append(valueToString(cs.val1), res) :\r\n    isCompoundSExp(cs.val2) ? compoundSExpToArray(cs.val2, append(valueToString(cs.val1), res)) :\r\n    ({ s1: append(valueToString(cs.val1), res), s2: valueToString(cs.val2)})\r\n \r\nexport const compoundSExpToString = (cs: CompoundSExp, css = compoundSExpToArray(cs, [])): string => \r\n    isArray(css) ? `(${css.join(' ')})` :\r\n    `(${css.s1.join(' ')} . ${css.s2})`\r\n\r\nexport const valueToString = (val: Value): string =>\r\n    isNumber(val) ?  val.toString() :\r\n    val === true ? '#t' :\r\n    val === false ? '#f' :\r\n    isString(val) ? `\"${val}\"` :\r\n    isClosure(val) ? closureToString(val) :\r\n    isPrimOp(val) ? val.op :\r\n    isSymbolSExp(val) ? val.val :\r\n    isEmptySExp(val) ? \"'()\" :\r\n    isCompoundSExp(val) ? compoundSExpToString(val) :\r\n    val;\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"53ee5122ea64540ad4584df9b8113a8fd3760140","contentHash":"ab8fd969174cbe7e4b2acb2b8c547a26de1ce00640df8ccbd0ef4d8695facfba"},"D:\\degree\\ppl\\assignment2\\L3\\L3-env-env.ts":{"path":"D:\\degree\\ppl\\assignment2\\L3\\L3-env-env.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":107}},"2":{"start":{"line":19,"column":19},"end":{"line":19,"column":40}},"3":{"start":{"line":20,"column":17},"end":{"line":20,"column":44}},"4":{"start":{"line":21,"column":21},"end":{"line":21,"column":48}},"5":{"start":{"line":21,"column":28},"end":{"line":21,"column":47}},"6":{"start":{"line":22,"column":0},"end":{"line":22,"column":36}},"7":{"start":{"line":23,"column":19},"end":{"line":23,"column":93}},"8":{"start":{"line":23,"column":39},"end":{"line":23,"column":92}},"9":{"start":{"line":24,"column":0},"end":{"line":24,"column":32}},"10":{"start":{"line":27,"column":19},"end":{"line":27,"column":95}},"11":{"start":{"line":27,"column":40},"end":{"line":27,"column":94}},"12":{"start":{"line":28,"column":0},"end":{"line":28,"column":32}},"13":{"start":{"line":29,"column":19},"end":{"line":29,"column":46}},"14":{"start":{"line":29,"column":26},"end":{"line":29,"column":46}},"15":{"start":{"line":30,"column":17},"end":{"line":30,"column":42}},"16":{"start":{"line":30,"column":24},"end":{"line":30,"column":42}},"17":{"start":{"line":31,"column":17},"end":{"line":31,"column":42}},"18":{"start":{"line":31,"column":24},"end":{"line":31,"column":42}},"19":{"start":{"line":32,"column":14},"end":{"line":32,"column":64}},"20":{"start":{"line":32,"column":21},"end":{"line":32,"column":64}},"21":{"start":{"line":33,"column":0},"end":{"line":33,"column":22}},"22":{"start":{"line":35,"column":17},"end":{"line":37,"column":27}},"23":{"start":{"line":35,"column":29},"end":{"line":37,"column":27}},"24":{"start":{"line":38,"column":0},"end":{"line":38,"column":28}},"25":{"start":{"line":39,"column":20},"end":{"line":40,"column":41}},"26":{"start":{"line":39,"column":32},"end":{"line":40,"column":41}},"27":{"start":{"line":46,"column":20},"end":{"line":47,"column":41}},"28":{"start":{"line":46,"column":32},"end":{"line":47,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":21},"end":{"line":21,"column":22}},"loc":{"start":{"line":21,"column":28},"end":{"line":21,"column":47}},"line":21},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":19},"end":{"line":23,"column":20}},"loc":{"start":{"line":23,"column":39},"end":{"line":23,"column":92}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":19},"end":{"line":27,"column":20}},"loc":{"start":{"line":27,"column":40},"end":{"line":27,"column":94}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":19},"end":{"line":29,"column":20}},"loc":{"start":{"line":29,"column":26},"end":{"line":29,"column":46}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":30,"column":17},"end":{"line":30,"column":18}},"loc":{"start":{"line":30,"column":24},"end":{"line":30,"column":42}},"line":30},"5":{"name":"(anonymous_5)","decl":{"start":{"line":31,"column":17},"end":{"line":31,"column":18}},"loc":{"start":{"line":31,"column":24},"end":{"line":31,"column":42}},"line":31},"6":{"name":"(anonymous_6)","decl":{"start":{"line":32,"column":14},"end":{"line":32,"column":15}},"loc":{"start":{"line":32,"column":21},"end":{"line":32,"column":64}},"line":32},"7":{"name":"(anonymous_7)","decl":{"start":{"line":35,"column":17},"end":{"line":35,"column":18}},"loc":{"start":{"line":35,"column":29},"end":{"line":37,"column":27}},"line":35},"8":{"name":"(anonymous_8)","decl":{"start":{"line":39,"column":20},"end":{"line":39,"column":21}},"loc":{"start":{"line":39,"column":32},"end":{"line":40,"column":41}},"line":39},"9":{"name":"(anonymous_9)","decl":{"start":{"line":46,"column":20},"end":{"line":46,"column":21}},"loc":{"start":{"line":46,"column":32},"end":{"line":47,"column":41}},"line":46}},"branchMap":{"0":{"loc":{"start":{"line":32,"column":21},"end":{"line":32,"column":64}},"type":"binary-expr","locations":[{"start":{"line":32,"column":21},"end":{"line":32,"column":34}},{"start":{"line":32,"column":38},"end":{"line":32,"column":49}},{"start":{"line":32,"column":53},"end":{"line":32,"column":64}}],"line":32},"1":{"loc":{"start":{"line":35,"column":29},"end":{"line":37,"column":27}},"type":"cond-expr","locations":[{"start":{"line":35,"column":47},"end":{"line":35,"column":95}},{"start":{"line":36,"column":4},"end":{"line":37,"column":27}}],"line":35},"2":{"loc":{"start":{"line":36,"column":4},"end":{"line":37,"column":27}},"type":"cond-expr","locations":[{"start":{"line":36,"column":20},"end":{"line":36,"column":39}},{"start":{"line":37,"column":8},"end":{"line":37,"column":27}}],"line":36},"3":{"loc":{"start":{"line":39,"column":32},"end":{"line":40,"column":41}},"type":"cond-expr","locations":[{"start":{"line":39,"column":55},"end":{"line":39,"column":106}},{"start":{"line":40,"column":4},"end":{"line":40,"column":41}}],"line":39},"4":{"loc":{"start":{"line":46,"column":32},"end":{"line":47,"column":41}},"type":"cond-expr","locations":[{"start":{"line":46,"column":55},"end":{"line":46,"column":184}},{"start":{"line":47,"column":4},"end":{"line":47,"column":41}}],"line":46}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":8,"6":1,"7":1,"8":0,"9":1,"10":1,"11":0,"12":1,"13":1,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1,"22":1,"23":0,"24":1,"25":1,"26":0,"27":1,"28":0},"f":{"0":8,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"0":[0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/L3/L3-env-env.ts","sources":["D:/degree/ppl/assignment2/L3/L3-env-env.ts"],"names":[],"mappings":"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","sourcesContent":["// Environment for L4 (support for Letrec)\r\n// =======================================\r\n// An environment represents a partial function from symbols (variable names) to values.\r\n// It supports the operation: apply-env(env,var)\r\n// which either returns the value of var in the environment, or else throws an error.\r\n//\r\n// Env is defined inductively by the following cases:\r\n// * <env> ::= <empty-env> | <extended-env> | <rec-env>\r\n// * <empty-env> ::= (empty-env) // empty-env()\r\n// * <extended-env> ::= (env (symbol+) (value+) next-env) // env(vars:List(Symbol), vals:List(Value), next-env: Env)\r\n// * <rec-ext-env> ::= (rec-env (symbol+) (params+) (bodies+) next-env)\r\n//       // rec-env(vars:List(Symbol), paramss:List(List(var-decl)), bodiess:List(List(cexp)), next-env: Env)\r\n//\r\n// The key operation on env is apply-env(var) which returns the value associated to var in env\r\n// or throw an error if var is not defined in env.\r\n\r\nimport { VarDecl, CExp, ProcExp } from './L3-ast';\r\nimport { makeClosureEnv, Value } from './L3-value';\r\nimport { Result, makeOk, makeFailure } from '../shared/result';\r\nimport { format } from '../shared/format';\r\n\r\n// ========================================================\r\n// Environment data type\r\nexport type Env = EmptyEnv | ExtEnv | RecEnv;\r\nexport type EmptyEnv = {tag: \"EmptyEnv\" }\r\nexport type ExtEnv = {\r\n    tag: \"ExtEnv\";\r\n    vars: string[];\r\n    vals: Value[];\r\n    nextEnv: Env;\r\n}\r\nexport type RecEnv = {\r\n    tag: \"RecEnv\";\r\n    vars: string[];\r\n    vals : ProcExp[];\r\n    //paramss: VarDecl[][];\r\n    //bodiess: CExp[][];\r\n    nextEnv: Env;\r\n}\r\n\r\nexport const makeEmptyEnv = (): EmptyEnv => ({tag: \"EmptyEnv\"});\r\nexport const makeExtEnv = (vs: string[], vals: Value[], env: Env): ExtEnv =>\r\n    ({tag: \"ExtEnv\", vars: vs, vals: vals, nextEnv: env});\r\n//export const makeRecEnv = (vs: string[], paramss: VarDecl[][], bodiess: CExp[][], env: Env): RecEnv =>\r\n  //  ({tag: \"RecEnv\", vars: vs, paramss: paramss, bodiess: bodiess, nextEnv: env});\r\n  export const makeRecEnv = (vs: string[], procs : ProcExp[], env: Env): RecEnv =>\r\n  ({tag: \"RecEnv\", vars: vs, vals : procs, nextEnv: env});\r\n\r\nconst isEmptyEnv = (x: any): x is EmptyEnv => x.tag === \"EmptyEnv\";\r\nconst isExtEnv = (x: any): x is ExtEnv => x.tag === \"ExtEnv\";\r\nconst isRecEnv = (x: any): x is RecEnv => x.tag === \"RecEnv\";\r\n\r\nexport const isEnv = (x: any): x is Env => isEmptyEnv(x) || isExtEnv(x) || isRecEnv(x);\r\n\r\n// Apply-env\r\nexport const applyEnv = (env: Env, v: string): Result<Value> =>\r\n    isEmptyEnv(env) ? makeFailure(`var not found: ${v}`) :\r\n    isExtEnv(env) ? applyExtEnv(env, v) :\r\n    applyRecEnv(env, v);\r\n\r\nconst applyExtEnv = (env: ExtEnv, v: string): Result<Value> =>\r\n    env.vars.includes(v) ? makeOk(env.vals[env.vars.indexOf(v)]) :\r\n    applyEnv(env.nextEnv, v);\r\n\r\n//const applyRecEnv = (env: RecEnv, v: string): Result<Value> =>\r\n  //  env.vars.includes(v) ? makeOk(makeClosure(env.paramss[env.vars.indexOf(v)],\r\n    //                                          env.bodiess[env.vars.indexOf(v)],\r\n      //                                        env)) :\r\n    //applyEnv(env.nextEnv, v);\r\n\r\nconst applyRecEnv = (env: RecEnv, v: string): Result<Value> =>\r\n    env.vars.includes(v) ? makeOk(makeClosureEnv(env.vals[env.vars.indexOf(v)].args,\r\n                                              env.vals[env.vars.indexOf(v)].body,\r\n                                              env)) :\r\n    applyEnv(env.nextEnv, v);\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7246e49914fb83d035e0cebbe046e68347c638c0","contentHash":"d9269708e21b8233f921235ef7256182d7889ffbbd808c2a17543804d0481b63"},"D:\\degree\\ppl\\assignment2\\shared\\result.ts":{"path":"D:\\degree\\ppl\\assignment2\\shared\\result.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":262}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":19},"end":{"line":5,"column":40}},"4":{"start":{"line":6,"column":15},"end":{"line":6,"column":55}},"5":{"start":{"line":6,"column":27},"end":{"line":6,"column":54}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":24}},"7":{"start":{"line":8,"column":20},"end":{"line":11,"column":2}},"8":{"start":{"line":8,"column":34},"end":{"line":11,"column":1}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":34}},"10":{"start":{"line":13,"column":13},"end":{"line":13,"column":34}},"11":{"start":{"line":13,"column":20},"end":{"line":13,"column":34}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":20}},"13":{"start":{"line":15,"column":18},"end":{"line":15,"column":44}},"14":{"start":{"line":15,"column":25},"end":{"line":15,"column":44}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":30}},"16":{"start":{"line":18,"column":13},"end":{"line":18,"column":60}},"17":{"start":{"line":18,"column":23},"end":{"line":18,"column":60}},"18":{"start":{"line":19,"column":0},"end":{"line":19,"column":20}},"19":{"start":{"line":21,"column":13},"end":{"line":21,"column":81}},"20":{"start":{"line":21,"column":23},"end":{"line":21,"column":81}},"21":{"start":{"line":22,"column":0},"end":{"line":22,"column":20}},"22":{"start":{"line":25,"column":14},"end":{"line":25,"column":65}},"23":{"start":{"line":25,"column":21},"end":{"line":25,"column":65}},"24":{"start":{"line":25,"column":28},"end":{"line":25,"column":65}},"25":{"start":{"line":26,"column":0},"end":{"line":26,"column":22}},"26":{"start":{"line":28,"column":13},"end":{"line":28,"column":85}},"27":{"start":{"line":28,"column":20},"end":{"line":28,"column":85}},"28":{"start":{"line":28,"column":27},"end":{"line":28,"column":85}},"29":{"start":{"line":29,"column":0},"end":{"line":29,"column":20}},"30":{"start":{"line":31,"column":15},"end":{"line":31,"column":100}},"31":{"start":{"line":31,"column":40},"end":{"line":31,"column":99}},"32":{"start":{"line":32,"column":0},"end":{"line":32,"column":24}},"33":{"start":{"line":38,"column":14},"end":{"line":38,"column":68}},"34":{"start":{"line":38,"column":24},"end":{"line":38,"column":68}},"35":{"start":{"line":38,"column":31},"end":{"line":38,"column":68}},"36":{"start":{"line":39,"column":0},"end":{"line":39,"column":22}},"37":{"start":{"line":46,"column":18},"end":{"line":47,"column":29}},"38":{"start":{"line":46,"column":31},"end":{"line":47,"column":29}},"39":{"start":{"line":46,"column":120},"end":{"line":46,"column":245}},"40":{"start":{"line":46,"column":198},"end":{"line":46,"column":244}},"41":{"start":{"line":48,"column":0},"end":{"line":48,"column":30}},"42":{"start":{"line":49,"column":22},"end":{"line":51,"column":29}},"43":{"start":{"line":49,"column":37},"end":{"line":51,"column":29}},"44":{"start":{"line":50,"column":113},"end":{"line":50,"column":265}},"45":{"start":{"line":50,"column":216},"end":{"line":50,"column":264}},"46":{"start":{"line":52,"column":0},"end":{"line":52,"column":38}},"47":{"start":{"line":53,"column":14},"end":{"line":53,"column":100}},"48":{"start":{"line":53,"column":21},"end":{"line":53,"column":100}},"49":{"start":{"line":53,"column":33},"end":{"line":53,"column":100}},"50":{"start":{"line":53,"column":62},"end":{"line":53,"column":99}},"51":{"start":{"line":53,"column":91},"end":{"line":53,"column":98}},"52":{"start":{"line":54,"column":0},"end":{"line":54,"column":22}},"53":{"start":{"line":55,"column":25},"end":{"line":55,"column":110}},"54":{"start":{"line":55,"column":32},"end":{"line":55,"column":110}},"55":{"start":{"line":55,"column":83},"end":{"line":55,"column":109}},"56":{"start":{"line":56,"column":0},"end":{"line":56,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":15},"end":{"line":6,"column":16}},"loc":{"start":{"line":6,"column":27},"end":{"line":6,"column":54}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":20},"end":{"line":8,"column":21}},"loc":{"start":{"line":8,"column":34},"end":{"line":11,"column":1}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":13},"end":{"line":13,"column":14}},"loc":{"start":{"line":13,"column":20},"end":{"line":13,"column":34}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":15,"column":18},"end":{"line":15,"column":19}},"loc":{"start":{"line":15,"column":25},"end":{"line":15,"column":44}},"line":15},"4":{"name":"(anonymous_4)","decl":{"start":{"line":18,"column":13},"end":{"line":18,"column":14}},"loc":{"start":{"line":18,"column":23},"end":{"line":18,"column":60}},"line":18},"5":{"name":"(anonymous_5)","decl":{"start":{"line":21,"column":13},"end":{"line":21,"column":14}},"loc":{"start":{"line":21,"column":23},"end":{"line":21,"column":81}},"line":21},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":14},"end":{"line":25,"column":15}},"loc":{"start":{"line":25,"column":21},"end":{"line":25,"column":65}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":25,"column":21},"end":{"line":25,"column":22}},"loc":{"start":{"line":25,"column":28},"end":{"line":25,"column":65}},"line":25},"8":{"name":"(anonymous_8)","decl":{"start":{"line":28,"column":13},"end":{"line":28,"column":14}},"loc":{"start":{"line":28,"column":20},"end":{"line":28,"column":85}},"line":28},"9":{"name":"(anonymous_9)","decl":{"start":{"line":28,"column":20},"end":{"line":28,"column":21}},"loc":{"start":{"line":28,"column":27},"end":{"line":28,"column":85}},"line":28},"10":{"name":"(anonymous_10)","decl":{"start":{"line":31,"column":15},"end":{"line":31,"column":16}},"loc":{"start":{"line":31,"column":40},"end":{"line":31,"column":99}},"line":31},"11":{"name":"(anonymous_11)","decl":{"start":{"line":38,"column":14},"end":{"line":38,"column":15}},"loc":{"start":{"line":38,"column":24},"end":{"line":38,"column":68}},"line":38},"12":{"name":"(anonymous_12)","decl":{"start":{"line":38,"column":24},"end":{"line":38,"column":25}},"loc":{"start":{"line":38,"column":31},"end":{"line":38,"column":68}},"line":38},"13":{"name":"(anonymous_13)","decl":{"start":{"line":46,"column":18},"end":{"line":46,"column":19}},"loc":{"start":{"line":46,"column":31},"end":{"line":47,"column":29}},"line":46},"14":{"name":"(anonymous_14)","decl":{"start":{"line":46,"column":112},"end":{"line":46,"column":113}},"loc":{"start":{"line":46,"column":120},"end":{"line":46,"column":245}},"line":46},"15":{"name":"(anonymous_15)","decl":{"start":{"line":46,"column":189},"end":{"line":46,"column":190}},"loc":{"start":{"line":46,"column":198},"end":{"line":46,"column":244}},"line":46},"16":{"name":"(anonymous_16)","decl":{"start":{"line":49,"column":22},"end":{"line":49,"column":23}},"loc":{"start":{"line":49,"column":37},"end":{"line":51,"column":29}},"line":49},"17":{"name":"(anonymous_17)","decl":{"start":{"line":50,"column":104},"end":{"line":50,"column":105}},"loc":{"start":{"line":50,"column":113},"end":{"line":50,"column":265}},"line":50},"18":{"name":"(anonymous_18)","decl":{"start":{"line":50,"column":206},"end":{"line":50,"column":207}},"loc":{"start":{"line":50,"column":216},"end":{"line":50,"column":264}},"line":50},"19":{"name":"(anonymous_19)","decl":{"start":{"line":53,"column":14},"end":{"line":53,"column":15}},"loc":{"start":{"line":53,"column":21},"end":{"line":53,"column":100}},"line":53},"20":{"name":"(anonymous_20)","decl":{"start":{"line":53,"column":21},"end":{"line":53,"column":22}},"loc":{"start":{"line":53,"column":33},"end":{"line":53,"column":100}},"line":53},"21":{"name":"(anonymous_21)","decl":{"start":{"line":53,"column":55},"end":{"line":53,"column":56}},"loc":{"start":{"line":53,"column":62},"end":{"line":53,"column":99}},"line":53},"22":{"name":"(anonymous_22)","decl":{"start":{"line":53,"column":84},"end":{"line":53,"column":85}},"loc":{"start":{"line":53,"column":91},"end":{"line":53,"column":98}},"line":53},"23":{"name":"(anonymous_23)","decl":{"start":{"line":55,"column":25},"end":{"line":55,"column":26}},"loc":{"start":{"line":55,"column":32},"end":{"line":55,"column":110}},"line":55},"24":{"name":"(anonymous_24)","decl":{"start":{"line":55,"column":76},"end":{"line":55,"column":77}},"loc":{"start":{"line":55,"column":83},"end":{"line":55,"column":109}},"line":55}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":23},"end":{"line":18,"column":60}},"type":"cond-expr","locations":[{"start":{"line":18,"column":46},"end":{"line":18,"column":56}},{"start":{"line":18,"column":59},"end":{"line":18,"column":60}}],"line":18},"1":{"loc":{"start":{"line":21,"column":23},"end":{"line":21,"column":81}},"type":"cond-expr","locations":[{"start":{"line":21,"column":46},"end":{"line":21,"column":77}},{"start":{"line":21,"column":80},"end":{"line":21,"column":81}}],"line":21},"2":{"loc":{"start":{"line":25,"column":28},"end":{"line":25,"column":65}},"type":"cond-expr","locations":[{"start":{"line":25,"column":51},"end":{"line":25,"column":61}},{"start":{"line":25,"column":64},"end":{"line":25,"column":65}}],"line":25},"3":{"loc":{"start":{"line":28,"column":27},"end":{"line":28,"column":85}},"type":"cond-expr","locations":[{"start":{"line":28,"column":50},"end":{"line":28,"column":81}},{"start":{"line":28,"column":84},"end":{"line":28,"column":85}}],"line":28},"4":{"loc":{"start":{"line":31,"column":40},"end":{"line":31,"column":99}},"type":"cond-expr","locations":[{"start":{"line":31,"column":63},"end":{"line":31,"column":76}},{"start":{"line":31,"column":79},"end":{"line":31,"column":99}}],"line":31},"5":{"loc":{"start":{"line":38,"column":31},"end":{"line":38,"column":68}},"type":"binary-expr","locations":[{"start":{"line":38,"column":31},"end":{"line":38,"column":51}},{"start":{"line":38,"column":55},"end":{"line":38,"column":68}}],"line":38},"6":{"loc":{"start":{"line":46,"column":31},"end":{"line":47,"column":29}},"type":"cond-expr","locations":[{"start":{"line":46,"column":66},"end":{"line":46,"column":246}},{"start":{"line":47,"column":6},"end":{"line":47,"column":29}}],"line":46},"7":{"loc":{"start":{"line":49,"column":37},"end":{"line":51,"column":29}},"type":"cond-expr","locations":[{"start":{"line":50,"column":37},"end":{"line":50,"column":266}},{"start":{"line":51,"column":6},"end":{"line":51,"column":29}}],"line":49},"8":{"loc":{"start":{"line":49,"column":37},"end":{"line":50,"column":34}},"type":"binary-expr","locations":[{"start":{"line":49,"column":37},"end":{"line":49,"column":67}},{"start":{"line":50,"column":4},"end":{"line":50,"column":34}}],"line":49}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":521,"6":1,"7":1,"8":19,"9":1,"10":1,"11":532,"12":1,"13":1,"14":1,"15":1,"16":1,"17":395,"18":1,"19":1,"20":133,"21":1,"22":1,"23":0,"24":0,"25":1,"26":1,"27":0,"28":0,"29":1,"30":1,"31":0,"32":1,"33":1,"34":0,"35":0,"36":1,"37":1,"38":240,"39":140,"40":140,"41":1,"42":1,"43":0,"44":0,"45":0,"46":1,"47":1,"48":0,"49":0,"50":0,"51":0,"52":1,"53":1,"54":0,"55":0,"56":1},"f":{"0":521,"1":19,"2":532,"3":1,"4":395,"5":133,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":240,"14":140,"15":140,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"0":[377,18],"1":[133,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[142,98],"7":[0,0],"8":[0,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/shared/result.ts","sources":["D:/degree/ppl/assignment2/shared/result.ts"],"names":[],"mappings":"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","sourcesContent":["import { List, isEmpty, isNonEmptyList, first, rest, cons } from \"./list\";\nimport { Optional, makeSome, makeNone } from \"./optional\";\n\nexport type Result<T> = Ok<T> | Failure;\n\ntype Ok<T> = {\n  tag: \"Ok\";\n  value: T;\n};\n\ntype Failure = {\n  tag: \"Failure\";\n  message: string;\n};\n\nexport const makeOk = <T>(value: T): Result<T> => ({ tag: \"Ok\", value: value });\n\nexport const makeFailure = <T>(message: string): Result<T> => ({\n  tag: \"Failure\",\n  message: message,\n});\n\nexport const isOk = <T>(r: Result<T>): r is Ok<T> => r.tag === \"Ok\";\n\nexport const isFailure = <T>(r: Result<T>): r is Failure => r.tag === \"Failure\";\n\n// bind a result value into a happy path function that could fail (f is a diagonal operator)\nexport const bind = <T, U>(r: Result<T>, f: (x: T) => Result<U>): Result<U> =>\n  isOk(r) ? f(r.value) : r;\n\n// bind a result value into a happy path function that does not fail (f is a horizontal operator)\nexport const mapv = <T, U>(r: Result<T>, f: (x: T) => U): Result<U> =>\n  isOk(r) ? makeOk(f(r.value)) : r;\n\n// Traditional Result.bind(f) from diagonal T->R<U> to lifted R<T>->R<U>\n// Also known as flatmap\nexport const rbind =\n  <T, U>(f: (x: T) => Result<U>): ((r: Result<T>) => Result<U>) =>\n  (r) =>\n    isOk(r) ? f(r.value) : r;\n\n// Traditional Result.map(f) from horizontal T->U to lifted R<T>->R<U>\nexport const rmap =\n  <T, U>(f: (x: T) => U): ((r: Result<T>) => Result<U>) =>\n  (r) =>\n    isOk(r) ? makeOk(f(r.value)) : r;\n\n// Traditionally called Result.fold(result, onOk, onFailure)\nexport const either = <T, U>(\n  r: Result<T>,\n  ifOk: (value: T) => U,\n  ifFailure: (message: string) => U\n): U => (isOk(r) ? ifOk(r.value) : ifFailure(r.message));\n\n// Purpose: Test whether a result is Ok and of a\n//          specified type (using a given type predicate)\n// Example:\n//     const r: Result<Exp> = bind(p(\"(+ x 1)\"), parseL3Exp);\n//     isOkT(isAppExp)(r) ? [here \"r\" is Ok<AppExp>]\nexport const isOkT =\n  <T>(pred: (x: any) => x is T) =>\n  (r: any): r is Ok<T> =>\n    isOk(r) && pred(r.value);\n\n// Purpose: Like map on an array - but with a diagonal transformer operator (returns a Result<T>)\n//          With f: T=>Result<U> and list: List<T> return a Result<List<U>>\n//          If one of the items of the list fails on f - returns the Failure on the first item that fails.\n// Example:\n// mapResult((x) => x === 0 ? makeFailure(\"div by 0\") : makeOk(1/x), [1,2]) ==> {tag:\"Ok\", value:[1, 0.5]}\n// mapResult((x) => x === 0 ? makeFailure(\"div by 0\") : makeOk(1/x), [1,0,2]) ==> {tag:\"Failure\", message:\"div by 0\"}\nexport const mapResult = <T, U>(\n  f: (x: T) => Result<U>,\n  list: List<T>\n): Result<List<U>> =>\n  isNonEmptyList<T>(list) ? bind(f(first(list)), \n                                 (fa: U) => bind(mapResult(f, rest(list)), \n                                                 (fas: U[]) => makeOk(cons(fa, fas))))\n    : makeOk([]);\n\nexport const zipWithResult = <T1, T2, T3>(\n  f: (x: T1, y: T2) => Result<T3>,\n  xs: List<T1>,\n  ys: List<T2>\n): Result<List<T3>> =>\n  isNonEmptyList<T1>(xs) && \n  isNonEmptyList<T2>(ys) ? bind(f(first(xs), first(ys)), \n                                (fxy: T3) => bind(zipWithResult(f, rest(xs), rest(ys)), \n                                                  (fxys: T3[]) => makeOk(cons(fxy, fxys))))\n  : makeOk([]);\n\nexport const safe2 =\n  <T1, T2, T3>(\n    f: (x: T1, y: T2) => Result<T3>\n  ): ((xr: Result<T1>, yr: Result<T2>) => Result<T3>) =>\n  (xr: Result<T1>, yr: Result<T2>) =>\n    bind(xr, (x: T1) => bind(yr, (y: T2) => f(x, y)));\n\nexport const resultToOptional = <T>(r: Result<T>): Optional<T> =>\n  either(r, makeSome, (_) => makeNone());\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7f6d66555a05ce7883cb56e6ef6b088b4fdd8ddd","contentHash":"65c27f0ac57aecfa008e8575cc9a283caf92f08dfdef6cdfdf2a7dab6f03bc06"},"D:\\degree\\ppl\\assignment2\\shared\\list.ts":{"path":"D:\\degree\\ppl\\assignment2\\shared\\list.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":128}},"2":{"start":{"line":5,"column":16},"end":{"line":5,"column":32}},"3":{"start":{"line":6,"column":13},"end":{"line":6,"column":34}},"4":{"start":{"line":6,"column":24},"end":{"line":6,"column":34}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":20}},"6":{"start":{"line":8,"column":14},"end":{"line":8,"column":32}},"7":{"start":{"line":8,"column":31},"end":{"line":8,"column":32}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":22}},"9":{"start":{"line":10,"column":15},"end":{"line":10,"column":40}},"10":{"start":{"line":10,"column":38},"end":{"line":10,"column":40}},"11":{"start":{"line":11,"column":0},"end":{"line":11,"column":24}},"12":{"start":{"line":12,"column":13},"end":{"line":12,"column":31}},"13":{"start":{"line":12,"column":29},"end":{"line":12,"column":31}},"14":{"start":{"line":13,"column":0},"end":{"line":13,"column":20}},"15":{"start":{"line":14,"column":23},"end":{"line":14,"column":65}},"16":{"start":{"line":14,"column":31},"end":{"line":14,"column":65}},"17":{"start":{"line":15,"column":0},"end":{"line":15,"column":40}},"18":{"start":{"line":16,"column":16},"end":{"line":16,"column":77}},"19":{"start":{"line":16,"column":24},"end":{"line":16,"column":77}},"20":{"start":{"line":17,"column":0},"end":{"line":17,"column":26}},"21":{"start":{"line":19,"column":13},"end":{"line":19,"column":49}},"22":{"start":{"line":19,"column":25},"end":{"line":19,"column":49}},"23":{"start":{"line":20,"column":0},"end":{"line":20,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":13},"end":{"line":6,"column":14}},"loc":{"start":{"line":6,"column":24},"end":{"line":6,"column":34}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":14},"end":{"line":8,"column":15}},"loc":{"start":{"line":8,"column":31},"end":{"line":8,"column":32}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":10,"column":15},"end":{"line":10,"column":16}},"loc":{"start":{"line":10,"column":38},"end":{"line":10,"column":40}},"line":10},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":13},"end":{"line":12,"column":14}},"loc":{"start":{"line":12,"column":29},"end":{"line":12,"column":31}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":14,"column":23},"end":{"line":14,"column":24}},"loc":{"start":{"line":14,"column":31},"end":{"line":14,"column":65}},"line":14},"5":{"name":"(anonymous_5)","decl":{"start":{"line":16,"column":16},"end":{"line":16,"column":17}},"loc":{"start":{"line":16,"column":24},"end":{"line":16,"column":77}},"line":16},"6":{"name":"(anonymous_6)","decl":{"start":{"line":19,"column":13},"end":{"line":19,"column":14}},"loc":{"start":{"line":19,"column":25},"end":{"line":19,"column":49}},"line":19}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":31},"end":{"line":14,"column":65}},"type":"binary-expr","locations":[{"start":{"line":14,"column":31},"end":{"line":14,"column":48}},{"start":{"line":14,"column":52},"end":{"line":14,"column":65}}],"line":14},"1":{"loc":{"start":{"line":16,"column":24},"end":{"line":16,"column":77}},"type":"binary-expr","locations":[{"start":{"line":16,"column":24},"end":{"line":16,"column":41}},{"start":{"line":16,"column":45},"end":{"line":16,"column":77}}],"line":16}},"s":{"0":1,"1":1,"2":1,"3":1,"4":140,"5":1,"6":1,"7":384,"8":1,"9":1,"10":41,"11":1,"12":1,"13":345,"14":1,"15":1,"16":579,"17":1,"18":1,"19":104,"20":1,"21":1,"22":898,"23":1},"f":{"0":140,"1":384,"2":41,"3":345,"4":579,"5":104,"6":898},"b":{"0":[579,579],"1":[104,104]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/shared/list.ts","sources":["D:/degree/ppl/assignment2/shared/list.ts"],"names":[],"mappings":";;;AAAA,oDAAoD;AACpD,iCAA4B;AAMrB,MAAM,IAAI,GAAG,CAAI,CAAI,EAAE,EAAW,EAAW,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;AAArD,QAAA,IAAI,QAAiD;AAC3D,MAAM,KAAK,GAAG,CAAI,CAAC,CAAC,EAAE,GAAG,GAAG,CAAkB,EAAK,EAAE,CAAC,CAAC,CAAC;AAAlD,QAAA,KAAK,SAA6C;AACxD,MAAM,MAAM,GAAG,CAAI,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,CAAkB,EAAK,EAAE,CAAC,EAAE,CAAC;AAA1D,QAAA,MAAM,UAAoD;AAChE,MAAM,IAAI,GAAG,CAAI,CAAC,CAAC,EAAE,GAAG,EAAE,CAAkB,EAAW,EAAE,CAAC,EAAE,CAAC;AAAvD,QAAA,IAAI,QAAmD;AAC7D,MAAM,cAAc,GAAG,CAAI,EAAO,EAAyB,EAAE,CAClE,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;AADxB,QAAA,cAAc,kBACU;AAC9B,MAAM,OAAO,GAAG,CAAI,EAAO,EAAe,EAAE,CACjD,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAE,IAAA,sBAAc,EAAI,EAAE,CAAC,CAAC;AADlC,QAAA,OAAO,WAC2B;AAE/C,gDAAgD;AACzC,MAAM,IAAI,GAAG,CAAI,GAAuB,EAAE,CAAQ,EAAY,EAAE,CACrE,IAAA,WAAG,EAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AADD,QAAA,IAAI,QACH","sourcesContent":["// List operations similar to car/cdr/cadr in Scheme\r\nimport { all } from \"ramda\";\r\n\r\nexport type List<T> = T[];\r\nexport type Empty = [];\r\nexport type NonEmptyList<T> = [T, ...T[]];\r\n\r\nexport const cons = <T>(x: T, xs: List<T>): List<T> => [x, ...xs];\r\nexport const first = <T>([x, ..._xs]: NonEmptyList<T>): T => x;\r\nexport const second = <T>([_x0, x1, ..._xs]: NonEmptyList<T>): T => x1;\r\nexport const rest = <T>([_, ...xs]: NonEmptyList<T>): List<T> => xs;\r\nexport const isNonEmptyList = <T>(xs: any): xs is NonEmptyList<T> =>\r\n  Array.isArray(xs) && xs.length > 0;\r\nexport const isEmpty = <T>(xs: any): xs is Empty =>\r\n  Array.isArray(xs) && ! isNonEmptyList<T>(xs);\r\n\r\n// A useful type predicate for homogeneous lists\r\nexport const allT = <T>(isT: (x: any) => x is T, x: any[]): x is T[] =>\r\n  all(isT, x);\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f11dace9d349b705b16e039ec721168a0e12bfe1","contentHash":"1730d5cc84dc54fc678482392b1c197247f47de1dc666d6858d2741bcd4d6b98"},"D:\\degree\\ppl\\assignment2\\shared\\optional.ts":{"path":"D:\\degree\\ppl\\assignment2\\shared\\optional.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":174}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":36}},"4":{"start":{"line":6,"column":17},"end":{"line":9,"column":2}},"5":{"start":{"line":6,"column":29},"end":{"line":9,"column":1}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":28}},"7":{"start":{"line":11,"column":17},"end":{"line":11,"column":40}},"8":{"start":{"line":11,"column":24},"end":{"line":11,"column":39}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":28}},"10":{"start":{"line":13,"column":15},"end":{"line":13,"column":38}},"11":{"start":{"line":13,"column":22},"end":{"line":13,"column":38}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":24}},"13":{"start":{"line":15,"column":15},"end":{"line":15,"column":38}},"14":{"start":{"line":15,"column":22},"end":{"line":15,"column":38}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":24}},"16":{"start":{"line":17,"column":13},"end":{"line":17,"column":64}},"17":{"start":{"line":17,"column":24},"end":{"line":17,"column":63}},"18":{"start":{"line":18,"column":0},"end":{"line":18,"column":20}},"19":{"start":{"line":19,"column":13},"end":{"line":19,"column":85}},"20":{"start":{"line":19,"column":23},"end":{"line":19,"column":85}},"21":{"start":{"line":20,"column":0},"end":{"line":20,"column":20}},"22":{"start":{"line":21,"column":14},"end":{"line":21,"column":90}},"23":{"start":{"line":21,"column":38},"end":{"line":21,"column":89}},"24":{"start":{"line":22,"column":0},"end":{"line":22,"column":22}},"25":{"start":{"line":23,"column":20},"end":{"line":24,"column":31}},"26":{"start":{"line":23,"column":33},"end":{"line":24,"column":31}},"27":{"start":{"line":23,"column":122},"end":{"line":23,"column":251}},"28":{"start":{"line":23,"column":202},"end":{"line":23,"column":250}},"29":{"start":{"line":25,"column":0},"end":{"line":25,"column":34}},"30":{"start":{"line":26,"column":25},"end":{"line":26,"column":144}},"31":{"start":{"line":26,"column":41},"end":{"line":26,"column":144}},"32":{"start":{"line":26,"column":74},"end":{"line":26,"column":101}},"33":{"start":{"line":26,"column":109},"end":{"line":26,"column":143}},"34":{"start":{"line":27,"column":0},"end":{"line":27,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":18}},"loc":{"start":{"line":6,"column":29},"end":{"line":9,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":17},"end":{"line":11,"column":18}},"loc":{"start":{"line":11,"column":24},"end":{"line":11,"column":39}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":15},"end":{"line":13,"column":16}},"loc":{"start":{"line":13,"column":22},"end":{"line":13,"column":38}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":15,"column":15},"end":{"line":15,"column":16}},"loc":{"start":{"line":15,"column":22},"end":{"line":15,"column":38}},"line":15},"4":{"name":"(anonymous_4)","decl":{"start":{"line":17,"column":13},"end":{"line":17,"column":14}},"loc":{"start":{"line":17,"column":24},"end":{"line":17,"column":63}},"line":17},"5":{"name":"(anonymous_5)","decl":{"start":{"line":19,"column":13},"end":{"line":19,"column":14}},"loc":{"start":{"line":19,"column":23},"end":{"line":19,"column":85}},"line":19},"6":{"name":"(anonymous_6)","decl":{"start":{"line":21,"column":14},"end":{"line":21,"column":15}},"loc":{"start":{"line":21,"column":38},"end":{"line":21,"column":89}},"line":21},"7":{"name":"(anonymous_7)","decl":{"start":{"line":23,"column":20},"end":{"line":23,"column":21}},"loc":{"start":{"line":23,"column":33},"end":{"line":24,"column":31}},"line":23},"8":{"name":"(anonymous_8)","decl":{"start":{"line":23,"column":114},"end":{"line":23,"column":115}},"loc":{"start":{"line":23,"column":122},"end":{"line":23,"column":251}},"line":23},"9":{"name":"(anonymous_9)","decl":{"start":{"line":23,"column":193},"end":{"line":23,"column":194}},"loc":{"start":{"line":23,"column":202},"end":{"line":23,"column":250}},"line":23},"10":{"name":"(anonymous_10)","decl":{"start":{"line":26,"column":25},"end":{"line":26,"column":26}},"loc":{"start":{"line":26,"column":41},"end":{"line":26,"column":144}},"line":26},"11":{"name":"(anonymous_11)","decl":{"start":{"line":26,"column":63},"end":{"line":26,"column":64}},"loc":{"start":{"line":26,"column":74},"end":{"line":26,"column":101}},"line":26},"12":{"name":"(anonymous_12)","decl":{"start":{"line":26,"column":103},"end":{"line":26,"column":104}},"loc":{"start":{"line":26,"column":109},"end":{"line":26,"column":143}},"line":26}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":24},"end":{"line":17,"column":63}},"type":"cond-expr","locations":[{"start":{"line":17,"column":49},"end":{"line":17,"column":59}},{"start":{"line":17,"column":62},"end":{"line":17,"column":63}}],"line":17},"1":{"loc":{"start":{"line":19,"column":23},"end":{"line":19,"column":85}},"type":"cond-expr","locations":[{"start":{"line":19,"column":48},"end":{"line":19,"column":81}},{"start":{"line":19,"column":84},"end":{"line":19,"column":85}}],"line":19},"2":{"loc":{"start":{"line":21,"column":38},"end":{"line":21,"column":89}},"type":"cond-expr","locations":[{"start":{"line":21,"column":63},"end":{"line":21,"column":78}},{"start":{"line":21,"column":81},"end":{"line":21,"column":89}}],"line":21},"3":{"loc":{"start":{"line":23,"column":33},"end":{"line":24,"column":31}},"type":"cond-expr","locations":[{"start":{"line":23,"column":68},"end":{"line":23,"column":252}},{"start":{"line":24,"column":6},"end":{"line":24,"column":31}}],"line":23}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":1,"8":0,"9":1,"10":1,"11":0,"12":1,"13":1,"14":0,"15":1,"16":1,"17":0,"18":1,"19":1,"20":0,"21":1,"22":1,"23":0,"24":1,"25":1,"26":0,"27":0,"28":0,"29":1,"30":1,"31":0,"32":0,"33":0,"34":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/shared/optional.ts","sources":["D:/degree/ppl/assignment2/shared/optional.ts"],"names":[],"mappings":";;;AAAA,iCAA0E;AAC1E,qCAAuD;AAahD,MAAM,QAAQ,GAAG,CAAI,KAAQ,EAAe,EAAE,CAAC,CAAC;IACrD,GAAG,EAAE,MAAM;IACX,KAAK,EAAE,KAAK;CACb,CAAC,CAAC;AAHU,QAAA,QAAQ,YAGlB;AAEI,MAAM,QAAQ,GAAG,GAAmB,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;AAAnD,QAAA,QAAQ,YAA2C;AAEzD,MAAM,MAAM,GAAG,CAAI,CAAc,EAAgB,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC;AAA/D,QAAA,MAAM,UAAyD;AAErE,MAAM,MAAM,GAAG,CAAI,CAAc,EAAa,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC;AAA5D,QAAA,MAAM,UAAsD;AAElE,MAAM,IAAI,GAAG,CAClB,CAAc,EACd,CAAwB,EACX,EAAE,CAAC,CAAC,IAAA,cAAM,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAHlC,QAAA,IAAI,QAG8B;AAExC,MAAM,IAAI,GAAG,CAAO,CAAc,EAAE,CAAc,EAAe,EAAE,CACxE,IAAA,cAAM,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,gBAAQ,EAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAD1B,QAAA,IAAI,QACsB;AAEhC,MAAM,KAAK,GAAG,CACnB,CAAc,EACd,MAAuB,EACvB,MAAe,EACZ,EAAE,CAAC,CAAC,IAAA,cAAM,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;AAJpC,QAAA,KAAK,SAI+B;AAE1C,MAAM,WAAW,GAAG,CACzB,CAAwB,EACxB,IAAa,EACM,EAAE,CACrB,IAAA,qBAAc,EAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAA,YAAI,EAAC,CAAC,CAAC,IAAA,YAAK,EAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAK,EAAE,EAAE,CACnD,IAAA,YAAI,EAAC,IAAA,mBAAW,EAAC,CAAC,EAAE,IAAA,WAAI,EAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAY,EAAE,EAAE,CAChD,IAAA,gBAAQ,EAAC,IAAA,WAAI,EAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,IAAA,gBAAQ,EAAC,EAAE,CAAC,CAAC;AAPJ,QAAA,WAAW,eAOP;AAEV,MAAM,gBAAgB,GAAG,CAC9B,CAAc,EACd,OAAe,EACJ,EAAE,CACb,IAAA,aAAK,EACH,CAAC,EACD,CAAC,KAAQ,EAAE,EAAE,CAAC,IAAA,eAAM,EAAC,KAAK,CAAC,EAC3B,GAAG,EAAE,CAAC,IAAA,oBAAW,EAAC,OAAO,CAAC,CAC3B,CAAC;AARS,QAAA,gBAAgB,oBAQzB","sourcesContent":["import { List, cons, isEmpty, isNonEmptyList, first, rest } from \"./list\";\nimport { makeOk, makeFailure, Result } from \"./result\";\n\nexport type Optional<T> = Some<T> | None;\n\ntype Some<T> = {\n  tag: \"Some\";\n  value: T;\n};\n\ntype None = {\n  tag: \"None\";\n};\n\nexport const makeSome = <T>(value: T): Optional<T> => ({\n  tag: \"Some\",\n  value: value,\n});\n\nexport const makeNone = <T>(): Optional<T> => ({ tag: \"None\" });\n\nexport const isSome = <T>(o: Optional<T>): o is Some<T> => o.tag === \"Some\";\n\nexport const isNone = <T>(o: Optional<T>): o is None => o.tag === \"None\";\n\nexport const bind = <T, U>(\n  o: Optional<T>,\n  f: (x: T) => Optional<U>\n): Optional<U> => (isSome(o) ? f(o.value) : o);\n\nexport const mapv = <T, U>(o: Optional<T>, f: (x: T) => U): Optional<U> =>\n  isSome(o) ? makeSome(f(o.value)) : o;\n\nexport const maybe = <T, U>(\n  o: Optional<T>,\n  ifSome: (value: T) => U,\n  ifNone: () => U\n): U => (isSome(o) ? ifSome(o.value) : ifNone());\n\nexport const mapOptional = <T, U>(\n  f: (x: T) => Optional<U>,\n  list: List<T>\n): Optional<List<U>> =>\n  isNonEmptyList<T>(list) ? bind(f(first(list)), (fa: U) =>\n        bind(mapOptional(f, rest(list)), (fas: List<U>) =>\n          makeSome(cons(fa, fas))))\n  : makeSome([]);\n\nexport const optionalToResult = <T>(\n  o: Optional<T>,\n  message: string\n): Result<T> =>\n  maybe(\n    o,\n    (value: T) => makeOk(value),\n    () => makeFailure(message)\n  );\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3988d9e7e71e7863399c2df5b3fa5d11c99a1ca3","contentHash":"9bb9dc67039fe0088ee1f93cf5f929997ae784e7ff0c28cf2c6483f8ddd2082b"},"D:\\degree\\ppl\\assignment2\\shared\\type-predicates.ts":{"path":"D:\\degree\\ppl\\assignment2\\shared\\type-predicates.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":150}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":32}},"3":{"start":{"line":7,"column":17},"end":{"line":7,"column":45}},"4":{"start":{"line":7,"column":24},"end":{"line":7,"column":45}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":28}},"6":{"start":{"line":9,"column":17},"end":{"line":9,"column":45}},"7":{"start":{"line":9,"column":24},"end":{"line":9,"column":45}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":28}},"9":{"start":{"line":11,"column":18},"end":{"line":11,"column":47}},"10":{"start":{"line":11,"column":25},"end":{"line":11,"column":47}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":30}},"12":{"start":{"line":13,"column":16},"end":{"line":13,"column":41}},"13":{"start":{"line":13,"column":23},"end":{"line":13,"column":41}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":26}},"15":{"start":{"line":18,"column":24},"end":{"line":20,"column":22}},"16":{"start":{"line":18,"column":32},"end":{"line":20,"column":21}},"17":{"start":{"line":21,"column":0},"end":{"line":21,"column":42}},"18":{"start":{"line":22,"column":21},"end":{"line":22,"column":60}},"19":{"start":{"line":22,"column":28},"end":{"line":22,"column":60}},"20":{"start":{"line":23,"column":0},"end":{"line":23,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":18}},"loc":{"start":{"line":7,"column":24},"end":{"line":7,"column":45}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":17},"end":{"line":9,"column":18}},"loc":{"start":{"line":9,"column":24},"end":{"line":9,"column":45}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":18},"end":{"line":11,"column":19}},"loc":{"start":{"line":11,"column":25},"end":{"line":11,"column":47}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":16},"end":{"line":13,"column":17}},"loc":{"start":{"line":13,"column":23},"end":{"line":13,"column":41}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":18,"column":24},"end":{"line":18,"column":25}},"loc":{"start":{"line":18,"column":32},"end":{"line":20,"column":21}},"line":18},"5":{"name":"(anonymous_5)","decl":{"start":{"line":22,"column":21},"end":{"line":22,"column":22}},"loc":{"start":{"line":22,"column":28},"end":{"line":22,"column":60}},"line":22}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":32},"end":{"line":20,"column":21}},"type":"binary-expr","locations":[{"start":{"line":18,"column":33},"end":{"line":18,"column":42}},{"start":{"line":19,"column":5},"end":{"line":19,"column":13}},{"start":{"line":20,"column":4},"end":{"line":20,"column":21}}],"line":18}},"s":{"0":1,"1":1,"2":1,"3":1,"4":3014,"5":1,"6":1,"7":8,"8":1,"9":1,"10":0,"11":1,"12":1,"13":17,"14":1,"15":1,"16":103,"17":1,"18":1,"19":41,"20":1},"f":{"0":3014,"1":8,"2":0,"3":17,"4":103,"5":41},"b":{"0":[103,103,103]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/shared/type-predicates.ts","sources":["D:/degree/ppl/assignment2/shared/type-predicates.ts"],"names":[],"mappings":";;;AAAA,2DAA2D;AAC3D,iBAAiB;AACJ,QAAA,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AAC9B,MAAM,QAAQ,GAAG,CAAC,CAAM,EAAe,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC;AAA1D,QAAA,QAAQ,YAAkD;AAChE,MAAM,QAAQ,GAAG,CAAC,CAAM,EAAe,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC;AAA1D,QAAA,QAAQ,YAAkD;AAChE,MAAM,SAAS,GAAG,CAAC,CAAM,EAAgB,EAAE,CAAC,OAAO,CAAC,KAAK,SAAS,CAAC;AAA7D,QAAA,SAAS,aAAoD;AACnE,MAAM,OAAO,GAAG,CAAC,CAAM,EAAc,EAAE,CAAC,CAAC,YAAY,KAAK,CAAC;AAArD,QAAA,OAAO,WAA8C;AAElE,6DAA6D;AAC7D,sFAAsF;AACtF,kDAAkD;AAC3C,MAAM,eAAe,GAAG,CAAC,CAAS,EAAW,EAAE,CAClD,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IACX,CAAC,CAAC,KAAK,EAAE,CAAC;IACV,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAHX,QAAA,eAAe,mBAGJ;AAKjB,MAAM,YAAY,GAAG,CAAC,CAAM,EAAmB,EAAE,CACpD,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AADxB,QAAA,YAAY,gBACY","sourcesContent":["// ========================================================\n// Type utilities\nexport const isArray = Array.isArray;\nexport const isString = (x: any): x is string => typeof x === \"string\";\nexport const isNumber = (x: any): x is number => typeof x === \"number\";\nexport const isBoolean = (x: any): x is boolean => typeof x === \"boolean\";\nexport const isError = (x: any): x is Error => x instanceof Error;\n\n// Check that a string encodes a number (also works for -3.0)\n// Uses the same conventions as JavaScript - covers octal, hexadecimal, decimal, float\n// '0xAB', '0o77' '-1.0e-12' are all valid numbers\nexport const isNumericString = (x: string): boolean => \n    ((x != null) &&\n     (x !== '') &&\n     !isNaN(Number(x)));\n\n\n// A predicate for a valid identifier\nexport type Identifier = string;\nexport const isIdentifier = (x: any): x is Identifier =>\n    /^[A-Za-z][A-Za-z0-9]*/i.test(x);"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2040c6a07fdbfc8ef7c5b2bff586b5cedcf6a232","contentHash":"4ac01a2017182b8b262820005c3bd0f8d85016f7c566f5a06fd0744bee6136dd"},"D:\\degree\\ppl\\assignment2\\shared\\parser.ts":{"path":"D:\\degree\\ppl\\assignment2\\shared\\parser.ts","statementMap":{"0":{"start":{"line":3,"column":22},"end":{"line":5,"column":1}},"1":{"start":{"line":4,"column":4},"end":{"line":4,"column":62}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":106}},"4":{"start":{"line":8,"column":23},"end":{"line":8,"column":63}},"5":{"start":{"line":9,"column":17},"end":{"line":9,"column":36}},"6":{"start":{"line":10,"column":26},"end":{"line":10,"column":54}},"7":{"start":{"line":11,"column":15},"end":{"line":11,"column":32}},"8":{"start":{"line":16,"column":21},"end":{"line":16,"column":115}},"9":{"start":{"line":16,"column":28},"end":{"line":16,"column":115}},"10":{"start":{"line":17,"column":0},"end":{"line":17,"column":36}},"11":{"start":{"line":18,"column":16},"end":{"line":18,"column":89}},"12":{"start":{"line":18,"column":23},"end":{"line":18,"column":89}},"13":{"start":{"line":19,"column":0},"end":{"line":19,"column":26}},"14":{"start":{"line":20,"column":15},"end":{"line":20,"column":79}},"15":{"start":{"line":20,"column":22},"end":{"line":20,"column":79}},"16":{"start":{"line":21,"column":0},"end":{"line":21,"column":24}},"17":{"start":{"line":22,"column":23},"end":{"line":22,"column":102}},"18":{"start":{"line":22,"column":30},"end":{"line":22,"column":102}},"19":{"start":{"line":23,"column":0},"end":{"line":23,"column":40}},"20":{"start":{"line":24,"column":14},"end":{"line":27,"column":1}},"21":{"start":{"line":25,"column":19},"end":{"line":25,"column":49}},"22":{"start":{"line":26,"column":4},"end":{"line":26,"column":125}},"23":{"start":{"line":28,"column":0},"end":{"line":28,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":56},"end":{"line":3,"column":57}},"loc":{"start":{"line":3,"column":71},"end":{"line":5,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":21},"end":{"line":16,"column":22}},"loc":{"start":{"line":16,"column":28},"end":{"line":16,"column":115}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":16},"end":{"line":18,"column":17}},"loc":{"start":{"line":18,"column":23},"end":{"line":18,"column":89}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":15},"end":{"line":20,"column":16}},"loc":{"start":{"line":20,"column":22},"end":{"line":20,"column":79}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":22,"column":23},"end":{"line":22,"column":24}},"loc":{"start":{"line":22,"column":30},"end":{"line":22,"column":102}},"line":22},"5":{"name":"(anonymous_5)","decl":{"start":{"line":24,"column":14},"end":{"line":24,"column":15}},"loc":{"start":{"line":24,"column":21},"end":{"line":27,"column":1}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":3,"column":22},"end":{"line":5,"column":1}},"type":"binary-expr","locations":[{"start":{"line":3,"column":23},"end":{"line":3,"column":27}},{"start":{"line":3,"column":31},"end":{"line":3,"column":51}},{"start":{"line":3,"column":56},"end":{"line":5,"column":1}}],"line":3},"1":{"loc":{"start":{"line":4,"column":11},"end":{"line":4,"column":61}},"type":"cond-expr","locations":[{"start":{"line":4,"column":37},"end":{"line":4,"column":40}},{"start":{"line":4,"column":43},"end":{"line":4,"column":61}}],"line":4},"2":{"loc":{"start":{"line":4,"column":12},"end":{"line":4,"column":33}},"type":"binary-expr","locations":[{"start":{"line":4,"column":12},"end":{"line":4,"column":15}},{"start":{"line":4,"column":19},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":16,"column":28},"end":{"line":16,"column":115}},"type":"binary-expr","locations":[{"start":{"line":16,"column":28},"end":{"line":16,"column":63}},{"start":{"line":16,"column":67},"end":{"line":16,"column":80}},{"start":{"line":16,"column":84},"end":{"line":16,"column":115}}],"line":16},"4":{"loc":{"start":{"line":18,"column":23},"end":{"line":18,"column":89}},"type":"binary-expr","locations":[{"start":{"line":18,"column":23},"end":{"line":18,"column":57}},{"start":{"line":18,"column":61},"end":{"line":18,"column":89}}],"line":18},"5":{"loc":{"start":{"line":20,"column":22},"end":{"line":20,"column":79}},"type":"binary-expr","locations":[{"start":{"line":20,"column":22},"end":{"line":20,"column":45}},{"start":{"line":20,"column":49},"end":{"line":20,"column":79}}],"line":20},"6":{"loc":{"start":{"line":22,"column":30},"end":{"line":22,"column":102}},"type":"binary-expr","locations":[{"start":{"line":22,"column":30},"end":{"line":22,"column":63}},{"start":{"line":22,"column":67},"end":{"line":22,"column":102}}],"line":22},"7":{"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":124}},"type":"cond-expr","locations":[{"start":{"line":26,"column":52},"end":{"line":26,"column":93}},{"start":{"line":26,"column":96},"end":{"line":26,"column":124}}],"line":26}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":737,"10":1,"11":1,"12":1910,"13":1,"14":1,"15":1802,"16":1,"17":1,"18":920,"19":1,"20":1,"21":17,"22":17,"23":1},"f":{"0":1,"1":737,"2":1910,"3":1802,"4":920,"5":17},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[737,725,725],"4":[1910,725],"5":[1802,710],"6":[920,827],"7":[0,17]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/shared/parser.ts","sources":["D:/degree/ppl/assignment2/shared/parser.ts"],"names":[],"mappings":";AAAA,0CAA0C;;;;;;AAE1C,gEAAwE;AACxE,qCAAuD;AACvD,uDAA+D;AAC/D,iCAA8B;AAE9B,sEAAsE;AACtE,8DAA8D;AAC9D,8DAA8D;AAC9D,0EAA0E;AACnE,MAAM,YAAY,GAAG,CAAC,CAAM,EAAmB,EAAE,CACtD,CAAC,IAAA,0BAAQ,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,QAAQ,CAAC;AADtD,QAAA,YAAY,gBAC0C;AAE5D,MAAM,OAAO,GAAG,CAAC,CAAM,EAAc,EAAE,CAAC,IAAA,0BAAQ,EAAC,CAAC,CAAC,IAAI,IAAA,oBAAY,EAAC,CAAC,CAAC,CAAC;AAAjE,QAAA,OAAO,WAA0D;AACvE,MAAM,MAAM,GAAG,CAAC,CAAM,EAAa,EAAE,CAAC,IAAA,eAAO,EAAC,CAAC,CAAC,IAAI,IAAA,sBAAc,EAAC,CAAC,CAAC,CAAC;AAAhE,QAAA,MAAM,UAA0D;AACtE,MAAM,cAAc,GAAG,CAAC,CAAM,EAAqB,EAAE,CAC1D,IAAA,yBAAO,EAAC,CAAC,CAAC,IAAI,IAAA,WAAI,EAAC,cAAM,EAAE,CAAC,CAAC,CAAC;AADnB,QAAA,cAAc,kBACK;AAEzB,MAAM,KAAK,GAAG,CAAC,CAAS,EAAgB,EAAE;IAC/C,MAAM,MAAM,GAAG,IAAA,sBAAC,EAAC,CAAC,CAAC,CAAC;IACpB,OAAO,IAAA,yBAAO,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAA,oBAAW,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC;AACxE,CAAC,CAAC;AAHW,QAAA,KAAK,SAGhB","sourcesContent":["/// <reference path=\"s-expression.d.ts\" />\n\nimport p, { Sexp, SexpString, Token, CompoundSexp } from \"s-expression\";\nimport { makeFailure, makeOk, Result } from \"./result\";\nimport { isString, isArray, isError } from \"./type-predicates\";\nimport { allT } from \"./list\";\n\n// s-expression returns strings quoted as \"a\" as [String: 'a'] objects\n// to distinguish them from symbols - which are encoded as 'a'\n// These are constructed using the new String(\"a\") constructor\n// and can be distinguished from regular strings based on the constructor.\nexport const isSexpString = (x: any): x is SexpString =>\n  !isString(x) && x.constructor && x.constructor.name === \"String\";\n\nexport const isToken = (x: any): x is Token => isString(x) || isSexpString(x);\nexport const isSexp = (x: any): x is Sexp => isToken(x) || isCompoundSexp(x);\nexport const isCompoundSexp = (x: any): x is CompoundSexp =>\n  isArray(x) && allT(isSexp, x);\n\nexport const parse = (x: string): Result<Sexp> => {\n  const parsed = p(x);\n  return isError(parsed) ? makeFailure(parsed.message) : makeOk(parsed);\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a2ade9b7fc861acc07800b1aecb27d88d053a77e","contentHash":"70e8ca378c139a4828547745a44dcf674662fbe6437449703021abaa2ec3144b"},"D:\\degree\\ppl\\assignment2\\shared\\format.ts":{"path":"D:\\degree\\ppl\\assignment2\\shared\\format.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":24}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":48}},"3":{"start":{"line":4,"column":22},"end":{"line":4,"column":48}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":15},"end":{"line":4,"column":16}},"loc":{"start":{"line":4,"column":22},"end":{"line":4,"column":48}},"line":4}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/shared/format.ts","sources":["D:/degree/ppl/assignment2/shared/format.ts"],"names":[],"mappings":";;;AAAO,MAAM,MAAM,GAAG,CAAC,CAAU,EAAU,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAA5D,QAAA,MAAM,UAAsD","sourcesContent":["export const format = (x: unknown): string => JSON.stringify(x, null, 2);"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7acc95df5cf34d345b1049a54106550b2a0e7ca1","contentHash":"6c0fc8c23bff2e027d10d08852dca1f298d9f2a06dbd9e61d3fbd810c9517426"},"D:\\degree\\ppl\\assignment2\\L3\\L3-eval-env.ts":{"path":"D:\\degree\\ppl\\assignment2\\L3\\L3-eval-env.ts","statementMap":{"0":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":96}},"2":{"start":{"line":6,"column":16},"end":{"line":6,"column":32}},"3":{"start":{"line":7,"column":17},"end":{"line":7,"column":36}},"4":{"start":{"line":8,"column":21},"end":{"line":8,"column":44}},"5":{"start":{"line":9,"column":19},"end":{"line":9,"column":40}},"6":{"start":{"line":10,"column":24},"end":{"line":10,"column":50}},"7":{"start":{"line":11,"column":15},"end":{"line":11,"column":40}},"8":{"start":{"line":12,"column":17},"end":{"line":12,"column":44}},"9":{"start":{"line":13,"column":17},"end":{"line":13,"column":44}},"10":{"start":{"line":14,"column":17},"end":{"line":14,"column":44}},"11":{"start":{"line":17,"column":24},"end":{"line":27,"column":94}},"12":{"start":{"line":17,"column":38},"end":{"line":27,"column":94}},"13":{"start":{"line":26,"column":128},"end":{"line":26,"column":258}},"14":{"start":{"line":26,"column":181},"end":{"line":26,"column":207}},"15":{"start":{"line":26,"column":231},"end":{"line":26,"column":257}},"16":{"start":{"line":28,"column":20},"end":{"line":28,"column":41}},"17":{"start":{"line":28,"column":27},"end":{"line":28,"column":41}},"18":{"start":{"line":29,"column":0},"end":{"line":29,"column":34}},"19":{"start":{"line":30,"column":15},"end":{"line":31,"column":34}},"20":{"start":{"line":30,"column":29},"end":{"line":31,"column":34}},"21":{"start":{"line":30,"column":90},"end":{"line":31,"column":33}},"22":{"start":{"line":32,"column":17},"end":{"line":32,"column":108}},"23":{"start":{"line":32,"column":31},"end":{"line":32,"column":108}},"24":{"start":{"line":35,"column":23},"end":{"line":37,"column":80}},"25":{"start":{"line":35,"column":39},"end":{"line":37,"column":80}},"26":{"start":{"line":38,"column":21},"end":{"line":41,"column":1}},"27":{"start":{"line":39,"column":17},"end":{"line":39,"column":60}},"28":{"start":{"line":39,"column":41},"end":{"line":39,"column":46}},"29":{"start":{"line":40,"column":4},"end":{"line":40,"column":100}},"30":{"start":{"line":43,"column":21},"end":{"line":44,"column":47}},"31":{"start":{"line":43,"column":35},"end":{"line":44,"column":47}},"32":{"start":{"line":45,"column":0},"end":{"line":45,"column":36}},"33":{"start":{"line":46,"column":18},"end":{"line":49,"column":17}},"34":{"start":{"line":46,"column":40},"end":{"line":49,"column":17}},"35":{"start":{"line":48,"column":91},"end":{"line":48,"column":127}},"36":{"start":{"line":53,"column":23},"end":{"line":53,"column":191}},"37":{"start":{"line":53,"column":43},"end":{"line":53,"column":191}},"38":{"start":{"line":53,"column":102},"end":{"line":53,"column":190}},"39":{"start":{"line":55,"column":22},"end":{"line":55,"column":108}},"40":{"start":{"line":55,"column":35},"end":{"line":55,"column":108}},"41":{"start":{"line":56,"column":0},"end":{"line":56,"column":38}},"42":{"start":{"line":57,"column":18},"end":{"line":57,"column":200}},"43":{"start":{"line":57,"column":25},"end":{"line":57,"column":200}},"44":{"start":{"line":57,"column":75},"end":{"line":57,"column":199}},"45":{"start":{"line":57,"column":132},"end":{"line":57,"column":198}},"46":{"start":{"line":58,"column":0},"end":{"line":58,"column":30}},"47":{"start":{"line":61,"column":16},"end":{"line":65,"column":1}},"48":{"start":{"line":62,"column":17},"end":{"line":62,"column":118}},"49":{"start":{"line":62,"column":48},"end":{"line":62,"column":71}},"50":{"start":{"line":62,"column":97},"end":{"line":62,"column":102}},"51":{"start":{"line":63,"column":17},"end":{"line":63,"column":65}},"52":{"start":{"line":63,"column":41},"end":{"line":63,"column":50}},"53":{"start":{"line":64,"column":4},"end":{"line":64,"column":130}},"54":{"start":{"line":64,"column":46},"end":{"line":64,"column":128}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":24},"end":{"line":17,"column":25}},"loc":{"start":{"line":17,"column":38},"end":{"line":27,"column":94}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":118},"end":{"line":26,"column":119}},"loc":{"start":{"line":26,"column":128},"end":{"line":26,"column":258}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":26,"column":171},"end":{"line":26,"column":172}},"loc":{"start":{"line":26,"column":181},"end":{"line":26,"column":207}},"line":26},"3":{"name":"(anonymous_3)","decl":{"start":{"line":26,"column":221},"end":{"line":26,"column":222}},"loc":{"start":{"line":26,"column":231},"end":{"line":26,"column":257}},"line":26},"4":{"name":"(anonymous_4)","decl":{"start":{"line":28,"column":20},"end":{"line":28,"column":21}},"loc":{"start":{"line":28,"column":27},"end":{"line":28,"column":41}},"line":28},"5":{"name":"(anonymous_5)","decl":{"start":{"line":30,"column":15},"end":{"line":30,"column":16}},"loc":{"start":{"line":30,"column":29},"end":{"line":31,"column":34}},"line":30},"6":{"name":"(anonymous_6)","decl":{"start":{"line":30,"column":80},"end":{"line":30,"column":81}},"loc":{"start":{"line":30,"column":90},"end":{"line":31,"column":33}},"line":30},"7":{"name":"(anonymous_7)","decl":{"start":{"line":32,"column":17},"end":{"line":32,"column":18}},"loc":{"start":{"line":32,"column":31},"end":{"line":32,"column":108}},"line":32},"8":{"name":"(anonymous_8)","decl":{"start":{"line":35,"column":23},"end":{"line":35,"column":24}},"loc":{"start":{"line":35,"column":39},"end":{"line":37,"column":80}},"line":35},"9":{"name":"(anonymous_9)","decl":{"start":{"line":38,"column":21},"end":{"line":38,"column":22}},"loc":{"start":{"line":38,"column":37},"end":{"line":41,"column":1}},"line":38},"10":{"name":"(anonymous_10)","decl":{"start":{"line":39,"column":34},"end":{"line":39,"column":35}},"loc":{"start":{"line":39,"column":41},"end":{"line":39,"column":46}},"line":39},"11":{"name":"(anonymous_11)","decl":{"start":{"line":43,"column":21},"end":{"line":43,"column":22}},"loc":{"start":{"line":43,"column":35},"end":{"line":44,"column":47}},"line":43},"12":{"name":"(anonymous_12)","decl":{"start":{"line":46,"column":18},"end":{"line":46,"column":19}},"loc":{"start":{"line":46,"column":40},"end":{"line":49,"column":17}},"line":46},"13":{"name":"(anonymous_13)","decl":{"start":{"line":48,"column":86},"end":{"line":48,"column":87}},"loc":{"start":{"line":48,"column":91},"end":{"line":48,"column":127}},"line":48},"14":{"name":"(anonymous_14)","decl":{"start":{"line":53,"column":23},"end":{"line":53,"column":24}},"loc":{"start":{"line":53,"column":43},"end":{"line":53,"column":191}},"line":53},"15":{"name":"(anonymous_15)","decl":{"start":{"line":53,"column":93},"end":{"line":53,"column":94}},"loc":{"start":{"line":53,"column":102},"end":{"line":53,"column":190}},"line":53},"16":{"name":"(anonymous_16)","decl":{"start":{"line":55,"column":22},"end":{"line":55,"column":23}},"loc":{"start":{"line":55,"column":35},"end":{"line":55,"column":108}},"line":55},"17":{"name":"(anonymous_17)","decl":{"start":{"line":57,"column":18},"end":{"line":57,"column":19}},"loc":{"start":{"line":57,"column":25},"end":{"line":57,"column":200}},"line":57},"18":{"name":"(anonymous_18)","decl":{"start":{"line":57,"column":68},"end":{"line":57,"column":69}},"loc":{"start":{"line":57,"column":75},"end":{"line":57,"column":199}},"line":57},"19":{"name":"(anonymous_19)","decl":{"start":{"line":57,"column":123},"end":{"line":57,"column":124}},"loc":{"start":{"line":57,"column":132},"end":{"line":57,"column":198}},"line":57},"20":{"name":"(anonymous_20)","decl":{"start":{"line":61,"column":16},"end":{"line":61,"column":17}},"loc":{"start":{"line":61,"column":30},"end":{"line":65,"column":1}},"line":61},"21":{"name":"(anonymous_21)","decl":{"start":{"line":62,"column":41},"end":{"line":62,"column":42}},"loc":{"start":{"line":62,"column":48},"end":{"line":62,"column":71}},"line":62},"22":{"name":"(anonymous_22)","decl":{"start":{"line":62,"column":90},"end":{"line":62,"column":91}},"loc":{"start":{"line":62,"column":97},"end":{"line":62,"column":102}},"line":62},"23":{"name":"(anonymous_23)","decl":{"start":{"line":63,"column":34},"end":{"line":63,"column":35}},"loc":{"start":{"line":63,"column":41},"end":{"line":63,"column":50}},"line":63},"24":{"name":"(anonymous_24)","decl":{"start":{"line":64,"column":36},"end":{"line":64,"column":37}},"loc":{"start":{"line":64,"column":46},"end":{"line":64,"column":128}},"line":64}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":38},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":17,"column":68},"end":{"line":17,"column":97}},{"start":{"line":18,"column":4},"end":{"line":27,"column":94}}],"line":17},"1":{"loc":{"start":{"line":18,"column":4},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":18,"column":35},"end":{"line":18,"column":64}},{"start":{"line":19,"column":8},"end":{"line":27,"column":94}}],"line":18},"2":{"loc":{"start":{"line":19,"column":8},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":19,"column":38},"end":{"line":19,"column":67}},{"start":{"line":20,"column":12},"end":{"line":27,"column":94}}],"line":19},"3":{"loc":{"start":{"line":20,"column":12},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":20,"column":42},"end":{"line":20,"column":67}},{"start":{"line":21,"column":16},"end":{"line":27,"column":94}}],"line":20},"4":{"loc":{"start":{"line":21,"column":16},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":21,"column":46},"end":{"line":21,"column":86}},{"start":{"line":22,"column":20},"end":{"line":27,"column":94}}],"line":21},"5":{"loc":{"start":{"line":22,"column":20},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":22,"column":50},"end":{"line":22,"column":79}},{"start":{"line":23,"column":24},"end":{"line":27,"column":94}}],"line":22},"6":{"loc":{"start":{"line":23,"column":24},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":23,"column":53},"end":{"line":23,"column":69}},{"start":{"line":24,"column":28},"end":{"line":27,"column":94}}],"line":23},"7":{"loc":{"start":{"line":24,"column":28},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":24,"column":59},"end":{"line":24,"column":77}},{"start":{"line":25,"column":32},"end":{"line":27,"column":94}}],"line":24},"8":{"loc":{"start":{"line":25,"column":32},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":25,"column":62},"end":{"line":25,"column":79}},{"start":{"line":26,"column":36},"end":{"line":27,"column":94}}],"line":25},"9":{"loc":{"start":{"line":26,"column":36},"end":{"line":27,"column":94}},"type":"cond-expr","locations":[{"start":{"line":26,"column":66},"end":{"line":26,"column":259}},{"start":{"line":27,"column":40},"end":{"line":27,"column":94}}],"line":26},"10":{"loc":{"start":{"line":30,"column":90},"end":{"line":31,"column":33}},"type":"cond-expr","locations":[{"start":{"line":30,"column":123},"end":{"line":30,"column":153}},{"start":{"line":31,"column":4},"end":{"line":31,"column":33}}],"line":30},"11":{"loc":{"start":{"line":35,"column":39},"end":{"line":37,"column":80}},"type":"cond-expr","locations":[{"start":{"line":35,"column":70},"end":{"line":35,"column":117}},{"start":{"line":36,"column":4},"end":{"line":37,"column":80}}],"line":35},"12":{"loc":{"start":{"line":36,"column":4},"end":{"line":37,"column":80}},"type":"cond-expr","locations":[{"start":{"line":36,"column":38},"end":{"line":36,"column":62}},{"start":{"line":37,"column":8},"end":{"line":37,"column":80}}],"line":36},"13":{"loc":{"start":{"line":43,"column":35},"end":{"line":44,"column":47}},"type":"cond-expr","locations":[{"start":{"line":43,"column":69},"end":{"line":43,"column":130}},{"start":{"line":44,"column":4},"end":{"line":44,"column":47}}],"line":43},"14":{"loc":{"start":{"line":46,"column":40},"end":{"line":49,"column":17}},"type":"cond-expr","locations":[{"start":{"line":46,"column":75},"end":{"line":46,"column":107}},{"start":{"line":47,"column":4},"end":{"line":49,"column":17}}],"line":46},"15":{"loc":{"start":{"line":47,"column":4},"end":{"line":49,"column":17}},"type":"cond-expr","locations":[{"start":{"line":47,"column":63},"end":{"line":47,"column":90}},{"start":{"line":48,"column":8},"end":{"line":49,"column":17}}],"line":47},"16":{"loc":{"start":{"line":47,"column":4},"end":{"line":47,"column":60}},"type":"binary-expr","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":31}},{"start":{"line":47,"column":35},"end":{"line":47,"column":60}}],"line":47},"17":{"loc":{"start":{"line":48,"column":8},"end":{"line":49,"column":17}},"type":"cond-expr","locations":[{"start":{"line":48,"column":38},"end":{"line":48,"column":128}},{"start":{"line":49,"column":12},"end":{"line":49,"column":17}}],"line":48}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":10,"13":1,"14":1,"15":0,"16":1,"17":0,"18":1,"19":1,"20":0,"21":0,"22":1,"23":1,"24":1,"25":0,"26":1,"27":0,"28":0,"29":0,"30":1,"31":7,"32":1,"33":1,"34":7,"35":0,"36":1,"37":6,"38":0,"39":1,"40":7,"41":1,"42":1,"43":0,"44":0,"45":0,"46":1,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0},"f":{"0":10,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":7,"12":7,"13":0,"14":6,"15":0,"16":7,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"0":[0,10],"1":[0,10],"2":[0,10],"3":[0,10],"4":[0,10],"5":[0,10],"6":[0,10],"7":[1,9],"8":[0,9],"9":[2,7],"10":[0,0],"11":[0,0],"12":[0,0],"13":[7,0],"14":[6,1],"15":[1,0],"16":[1,1],"17":[0,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/L3/L3-eval-env.ts","sources":["D:/degree/ppl/assignment2/L3/L3-eval-env.ts"],"names":[],"mappings":"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","sourcesContent":["// L3-eval.ts\r\n// Evaluator with Environments model\r\n\r\nimport { map } from \"ramda\";\r\nimport { isBoolExp, isCExp, isLitExp, isNumExp, isPrimOp, isStrExp, isVarRef,\r\n         isAppExp, isDefineExp, isIfExp, isLetExp, isProcExp,\r\n         Binding, VarDecl, CExp, Exp, IfExp, LetExp, ProcExp, Program,\r\n         parseL3Exp,  DefineExp} from \"./L3-ast\";\r\nimport { applyEnv, makeEmptyEnv, makeExtEnv, Env } from \"./L3-env-env\";\r\nimport { isClosure, makeClosureEnv, Closure, Value } from \"./L3-value\";\r\nimport { applyPrimitive } from \"./evalPrimitive\";\r\nimport { allT, first, rest, isEmpty, isNonEmptyList } from \"../shared/list\";\r\nimport { Result, makeOk, makeFailure, bind, mapResult } from \"../shared/result\";\r\nimport { parse as p } from \"../shared/parser\";\r\nimport { format } from \"../shared/format\";\r\n\r\n// ========================================================\r\n// Eval functions\r\n\r\nconst applicativeEval = (exp: CExp, env: Env): Result<Value> =>\r\n    isNumExp(exp) ? makeOk(exp.val) :\r\n    isBoolExp(exp) ? makeOk(exp.val) :\r\n    isStrExp(exp) ? makeOk(exp.val) :\r\n    isPrimOp(exp) ? makeOk(exp) :\r\n    isVarRef(exp) ? applyEnv(env, exp.var) :\r\n    isLitExp(exp) ? makeOk(exp.val) :\r\n    isIfExp(exp) ? evalIf(exp, env) :\r\n    isProcExp(exp) ? evalProc(exp, env) :\r\n    isLetExp(exp) ? evalLet(exp, env) :\r\n    isAppExp(exp) ? bind(applicativeEval(exp.rator, env),\r\n                      (proc: Value) =>\r\n                        bind(mapResult((rand: CExp) => \r\n                           applicativeEval(rand, env), exp.rands),\r\n                              (args: Value[]) =>\r\n                                 applyProcedure(proc, args))) :\r\n    makeFailure('\"let\" not supported (yet)');\r\n\r\nexport const isTrueValue = (x: Value): boolean =>\r\n    ! (x === false);\r\n\r\nconst evalIf = (exp: IfExp, env: Env): Result<Value> =>\r\n    bind(applicativeEval(exp.test, env), (test: Value) => \r\n            isTrueValue(test) ? applicativeEval(exp.then, env) : \r\n            applicativeEval(exp.alt, env));\r\n\r\nconst evalProc = (exp: ProcExp, env: Env): Result<Closure> =>\r\n    makeOk(makeClosureEnv(exp.args, exp.body, env));\r\n\r\n// KEY: This procedure does NOT have an env parameter.\r\n//      Instead we use the env of the closure.\r\nconst applyProcedure = (proc: Value, args: Value[]): Result<Value> =>\r\n    isPrimOp(proc) ? applyPrimitive(proc, args) :\r\n    isClosure(proc) ? applyClosure(proc, args) :\r\n    makeFailure(`Bad procedure ${format(proc)}`);\r\n\r\nconst applyClosure = (proc: Closure, args: Value[]): Result<Value> => {\r\n    const vars = map((v: VarDecl) => v.var, proc.params);\r\n    return evalSequence(proc.body, makeExtEnv(vars, args, proc.env));\r\n}\r\n\r\n// Evaluate a sequence of expressions (in a program)\r\nexport const evalSequence = (seq: Exp[], env: Env): Result<Value> =>\r\n    isNonEmptyList<Exp>(seq) ? evalCExps(first(seq), rest(seq), env) : \r\n    makeFailure(\"Empty sequence\");\r\n    \r\nconst evalCExps = (first: Exp, rest: Exp[], env: Env): Result<Value> =>\r\n    isDefineExp(first) ? evalDefineExps(first, rest, env) :\r\n    isCExp(first) && isEmpty(rest) ? applicativeEval(first, env) :\r\n    isCExp(first) ? bind(applicativeEval(first, env), _ => evalSequence(rest, env)) :\r\n    first;\r\n    \r\n// Eval a sequence of expressions when the first exp is a Define.\r\n// Compute the rhs of the define, extend the env with the new binding\r\n// then compute the rest of the exps in the new env.\r\nconst evalDefineExps = (def: DefineExp, exps: Exp[], env: Env): Result<Value> =>\r\n    bind(applicativeEval(def.val, env), (rhs: Value) => \r\n            evalSequence(exps, makeExtEnv([def.var.var], [rhs], env)));\r\n\r\n\r\n// Main program\r\nexport const evalL3program = (program: Program): Result<Value> =>\r\n    evalSequence(program.exps, makeEmptyEnv());\r\n\r\nexport const evalParse = (s: string): Result<Value> =>\r\n    bind(p(s), (x) => \r\n        bind(parseL3Exp(x), (exp: Exp) =>\r\n            evalSequence([exp], makeEmptyEnv())));\r\n\r\n// LET: Direct evaluation rule without syntax expansion\r\n// compute the values, extend the env, eval the body.\r\nconst evalLet = (exp: LetExp, env: Env): Result<Value> => {\r\n    const vals  = mapResult((v: CExp) => \r\n        applicativeEval(v, env), map((b: Binding) => b.val, exp.bindings));\r\n    const vars = map((b: Binding) => b.var.var, exp.bindings);\r\n    return bind(vals, (vals: Value[]) => \r\n        evalSequence(exp.body, makeExtEnv(vars, vals, env)));\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b08c83f5dd2d69f18813150315fb6b5f6a636424","contentHash":"da5e264e553cef5249e78e4f1f47f491ea776d94ede1fa8c421dde0cddfdb140"},"D:\\degree\\ppl\\assignment2\\L3\\evalPrimitive.ts":{"path":"D:\\degree\\ppl\\assignment2\\L3\\evalPrimitive.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":19},"end":{"line":5,"column":40}},"4":{"start":{"line":6,"column":15},"end":{"line":6,"column":40}},"5":{"start":{"line":7,"column":26},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":17},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":17},"end":{"line":9,"column":44}},"8":{"start":{"line":10,"column":23},"end":{"line":35,"column":163}},"9":{"start":{"line":10,"column":39},"end":{"line":35,"column":163}},"10":{"start":{"line":10,"column":162},"end":{"line":10,"column":167}},"11":{"start":{"line":13,"column":131},"end":{"line":13,"column":136}},"12":{"start":{"line":36,"column":0},"end":{"line":36,"column":40}},"13":{"start":{"line":37,"column":18},"end":{"line":46,"column":1}},"14":{"start":{"line":39,"column":14},"end":{"line":39,"column":21}},"15":{"start":{"line":39,"column":27},"end":{"line":39,"column":34}},"16":{"start":{"line":40,"column":4},"end":{"line":45,"column":5}},"17":{"start":{"line":41,"column":8},"end":{"line":41,"column":43}},"18":{"start":{"line":44,"column":8},"end":{"line":44,"column":104}},"19":{"start":{"line":47,"column":16},"end":{"line":56,"column":1}},"20":{"start":{"line":49,"column":14},"end":{"line":49,"column":21}},"21":{"start":{"line":49,"column":27},"end":{"line":49,"column":34}},"22":{"start":{"line":50,"column":4},"end":{"line":55,"column":5}},"23":{"start":{"line":51,"column":8},"end":{"line":51,"column":43}},"24":{"start":{"line":54,"column":8},"end":{"line":54,"column":104}},"25":{"start":{"line":57,"column":15},"end":{"line":77,"column":1}},"26":{"start":{"line":58,"column":14},"end":{"line":58,"column":21}},"27":{"start":{"line":58,"column":27},"end":{"line":58,"column":34}},"28":{"start":{"line":59,"column":4},"end":{"line":76,"column":5}},"29":{"start":{"line":60,"column":8},"end":{"line":60,"column":31}},"30":{"start":{"line":62,"column":9},"end":{"line":76,"column":5}},"31":{"start":{"line":63,"column":8},"end":{"line":63,"column":20}},"32":{"start":{"line":65,"column":9},"end":{"line":76,"column":5}},"33":{"start":{"line":66,"column":8},"end":{"line":66,"column":23}},"34":{"start":{"line":68,"column":9},"end":{"line":76,"column":5}},"35":{"start":{"line":69,"column":8},"end":{"line":69,"column":23}},"36":{"start":{"line":71,"column":9},"end":{"line":76,"column":5}},"37":{"start":{"line":72,"column":8},"end":{"line":72,"column":23}},"38":{"start":{"line":75,"column":8},"end":{"line":75,"column":21}},"39":{"start":{"line":78,"column":16},"end":{"line":79,"column":86}},"40":{"start":{"line":78,"column":23},"end":{"line":79,"column":86}},"41":{"start":{"line":80,"column":16},"end":{"line":81,"column":86}},"42":{"start":{"line":80,"column":23},"end":{"line":81,"column":86}},"43":{"start":{"line":82,"column":17},"end":{"line":82,"column":69}},"44":{"start":{"line":82,"column":29},"end":{"line":82,"column":69}},"45":{"start":{"line":83,"column":17},"end":{"line":84,"column":35}},"46":{"start":{"line":83,"column":27},"end":{"line":84,"column":35}},"47":{"start":{"line":85,"column":0},"end":{"line":85,"column":28}},"48":{"start":{"line":86,"column":19},"end":{"line":86,"column":59}},"49":{"start":{"line":86,"column":26},"end":{"line":86,"column":59}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":23},"end":{"line":10,"column":24}},"loc":{"start":{"line":10,"column":39},"end":{"line":35,"column":163}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":152},"end":{"line":10,"column":153}},"loc":{"start":{"line":10,"column":162},"end":{"line":10,"column":167}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":121},"end":{"line":13,"column":122}},"loc":{"start":{"line":13,"column":131},"end":{"line":13,"column":136}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":37,"column":18},"end":{"line":37,"column":19}},"loc":{"start":{"line":37,"column":28},"end":{"line":46,"column":1}},"line":37},"4":{"name":"(anonymous_4)","decl":{"start":{"line":47,"column":16},"end":{"line":47,"column":17}},"loc":{"start":{"line":47,"column":26},"end":{"line":56,"column":1}},"line":47},"5":{"name":"(anonymous_5)","decl":{"start":{"line":57,"column":15},"end":{"line":57,"column":16}},"loc":{"start":{"line":57,"column":25},"end":{"line":77,"column":1}},"line":57},"6":{"name":"(anonymous_6)","decl":{"start":{"line":78,"column":16},"end":{"line":78,"column":17}},"loc":{"start":{"line":78,"column":23},"end":{"line":79,"column":86}},"line":78},"7":{"name":"(anonymous_7)","decl":{"start":{"line":80,"column":16},"end":{"line":80,"column":17}},"loc":{"start":{"line":80,"column":23},"end":{"line":81,"column":86}},"line":80},"8":{"name":"(anonymous_8)","decl":{"start":{"line":82,"column":17},"end":{"line":82,"column":18}},"loc":{"start":{"line":82,"column":29},"end":{"line":82,"column":69}},"line":82},"9":{"name":"(anonymous_9)","decl":{"start":{"line":83,"column":17},"end":{"line":83,"column":18}},"loc":{"start":{"line":83,"column":27},"end":{"line":84,"column":35}},"line":83},"10":{"name":"(anonymous_10)","decl":{"start":{"line":86,"column":19},"end":{"line":86,"column":20}},"loc":{"start":{"line":86,"column":26},"end":{"line":86,"column":59}},"line":86}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":39},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":10,"column":58},"end":{"line":11,"column":86}},{"start":{"line":12,"column":4},"end":{"line":35,"column":163}}],"line":10},"1":{"loc":{"start":{"line":10,"column":58},"end":{"line":11,"column":86}},"type":"cond-expr","locations":[{"start":{"line":10,"column":111},"end":{"line":10,"column":178}},{"start":{"line":11,"column":4},"end":{"line":11,"column":86}}],"line":10},"2":{"loc":{"start":{"line":12,"column":4},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":12,"column":22},"end":{"line":12,"column":37}},{"start":{"line":13,"column":8},"end":{"line":35,"column":163}}],"line":12},"3":{"loc":{"start":{"line":13,"column":8},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":13,"column":27},"end":{"line":14,"column":94}},{"start":{"line":15,"column":12},"end":{"line":35,"column":163}}],"line":13},"4":{"loc":{"start":{"line":13,"column":27},"end":{"line":14,"column":94}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":13,"column":147}},{"start":{"line":14,"column":12},"end":{"line":14,"column":94}}],"line":13},"5":{"loc":{"start":{"line":15,"column":12},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":15,"column":30},"end":{"line":15,"column":43}},{"start":{"line":16,"column":16},"end":{"line":35,"column":163}}],"line":15},"6":{"loc":{"start":{"line":16,"column":16},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":16,"column":34},"end":{"line":16,"column":73}},{"start":{"line":17,"column":20},"end":{"line":35,"column":163}}],"line":16},"7":{"loc":{"start":{"line":17,"column":20},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":17,"column":38},"end":{"line":17,"column":77}},{"start":{"line":18,"column":24},"end":{"line":35,"column":163}}],"line":17},"8":{"loc":{"start":{"line":18,"column":24},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":18,"column":42},"end":{"line":18,"column":83}},{"start":{"line":19,"column":28},"end":{"line":35,"column":163}}],"line":18},"9":{"loc":{"start":{"line":19,"column":28},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":19,"column":48},"end":{"line":19,"column":78}},{"start":{"line":20,"column":32},"end":{"line":35,"column":163}}],"line":19},"10":{"loc":{"start":{"line":20,"column":32},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":20,"column":52},"end":{"line":21,"column":127}},{"start":{"line":22,"column":36},"end":{"line":35,"column":163}}],"line":20},"11":{"loc":{"start":{"line":20,"column":52},"end":{"line":21,"column":127}},"type":"cond-expr","locations":[{"start":{"line":20,"column":141},"end":{"line":20,"column":181}},{"start":{"line":21,"column":36},"end":{"line":21,"column":127}}],"line":20},"12":{"loc":{"start":{"line":20,"column":52},"end":{"line":20,"column":138}},"type":"binary-expr","locations":[{"start":{"line":20,"column":52},"end":{"line":20,"column":93}},{"start":{"line":20,"column":97},"end":{"line":20,"column":138}}],"line":20},"13":{"loc":{"start":{"line":20,"column":162},"end":{"line":20,"column":180}},"type":"binary-expr","locations":[{"start":{"line":20,"column":162},"end":{"line":20,"column":169}},{"start":{"line":20,"column":173},"end":{"line":20,"column":180}}],"line":20},"14":{"loc":{"start":{"line":22,"column":36},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":22,"column":55},"end":{"line":23,"column":130}},{"start":{"line":24,"column":40},"end":{"line":35,"column":163}}],"line":22},"15":{"loc":{"start":{"line":22,"column":55},"end":{"line":23,"column":130}},"type":"cond-expr","locations":[{"start":{"line":22,"column":144},"end":{"line":22,"column":184}},{"start":{"line":23,"column":40},"end":{"line":23,"column":130}}],"line":22},"16":{"loc":{"start":{"line":22,"column":55},"end":{"line":22,"column":141}},"type":"binary-expr","locations":[{"start":{"line":22,"column":55},"end":{"line":22,"column":96}},{"start":{"line":22,"column":100},"end":{"line":22,"column":141}}],"line":22},"17":{"loc":{"start":{"line":22,"column":165},"end":{"line":22,"column":183}},"type":"binary-expr","locations":[{"start":{"line":22,"column":165},"end":{"line":22,"column":172}},{"start":{"line":22,"column":176},"end":{"line":22,"column":183}}],"line":22},"18":{"loc":{"start":{"line":24,"column":40},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":24,"column":60},"end":{"line":24,"column":94}},{"start":{"line":25,"column":44},"end":{"line":35,"column":163}}],"line":24},"19":{"loc":{"start":{"line":25,"column":44},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":25,"column":69},"end":{"line":25,"column":110}},{"start":{"line":26,"column":48},"end":{"line":35,"column":163}}],"line":25},"20":{"loc":{"start":{"line":26,"column":48},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":26,"column":69},"end":{"line":26,"column":117}},{"start":{"line":27,"column":52},"end":{"line":35,"column":163}}],"line":26},"21":{"loc":{"start":{"line":27,"column":52},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":27,"column":72},"end":{"line":27,"column":88}},{"start":{"line":28,"column":56},"end":{"line":35,"column":163}}],"line":27},"22":{"loc":{"start":{"line":28,"column":56},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":28,"column":76},"end":{"line":28,"column":92}},{"start":{"line":29,"column":60},"end":{"line":35,"column":163}}],"line":28},"23":{"loc":{"start":{"line":29,"column":60},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":29,"column":81},"end":{"line":29,"column":130}},{"start":{"line":30,"column":64},"end":{"line":35,"column":163}}],"line":29},"24":{"loc":{"start":{"line":30,"column":64},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":30,"column":86},"end":{"line":30,"column":127}},{"start":{"line":31,"column":68},"end":{"line":35,"column":163}}],"line":30},"25":{"loc":{"start":{"line":31,"column":68},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":31,"column":92},"end":{"line":31,"column":143}},{"start":{"line":32,"column":72},"end":{"line":35,"column":163}}],"line":31},"26":{"loc":{"start":{"line":32,"column":72},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":32,"column":97},"end":{"line":32,"column":149}},{"start":{"line":33,"column":76},"end":{"line":35,"column":163}}],"line":32},"27":{"loc":{"start":{"line":33,"column":76},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":33,"column":100},"end":{"line":33,"column":159}},{"start":{"line":34,"column":80},"end":{"line":35,"column":163}}],"line":33},"28":{"loc":{"start":{"line":34,"column":80},"end":{"line":35,"column":163}},"type":"cond-expr","locations":[{"start":{"line":34,"column":104},"end":{"line":34,"column":166}},{"start":{"line":35,"column":84},"end":{"line":35,"column":163}}],"line":34},"29":{"loc":{"start":{"line":40,"column":4},"end":{"line":45,"column":5}},"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":45,"column":5}},{"start":{"line":40,"column":4},"end":{"line":45,"column":5}}],"line":40},"30":{"loc":{"start":{"line":40,"column":8},"end":{"line":40,"column":80}},"type":"binary-expr","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":42}},{"start":{"line":40,"column":46},"end":{"line":40,"column":80}}],"line":40},"31":{"loc":{"start":{"line":50,"column":4},"end":{"line":55,"column":5}},"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":55,"column":5}},{"start":{"line":50,"column":4},"end":{"line":55,"column":5}}],"line":50},"32":{"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":80}},"type":"binary-expr","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":42}},{"start":{"line":50,"column":46},"end":{"line":50,"column":80}}],"line":50},"33":{"loc":{"start":{"line":59,"column":4},"end":{"line":76,"column":5}},"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":76,"column":5}},{"start":{"line":59,"column":4},"end":{"line":76,"column":5}}],"line":59},"34":{"loc":{"start":{"line":59,"column":8},"end":{"line":59,"column":74}},"type":"binary-expr","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":39}},{"start":{"line":59,"column":43},"end":{"line":59,"column":74}}],"line":59},"35":{"loc":{"start":{"line":62,"column":9},"end":{"line":76,"column":5}},"type":"if","locations":[{"start":{"line":62,"column":9},"end":{"line":76,"column":5}},{"start":{"line":62,"column":9},"end":{"line":76,"column":5}}],"line":62},"36":{"loc":{"start":{"line":62,"column":13},"end":{"line":62,"column":77}},"type":"binary-expr","locations":[{"start":{"line":62,"column":13},"end":{"line":62,"column":43}},{"start":{"line":62,"column":47},"end":{"line":62,"column":77}}],"line":62},"37":{"loc":{"start":{"line":65,"column":9},"end":{"line":76,"column":5}},"type":"if","locations":[{"start":{"line":65,"column":9},"end":{"line":76,"column":5}},{"start":{"line":65,"column":9},"end":{"line":76,"column":5}}],"line":65},"38":{"loc":{"start":{"line":65,"column":13},"end":{"line":65,"column":85}},"type":"binary-expr","locations":[{"start":{"line":65,"column":13},"end":{"line":65,"column":47}},{"start":{"line":65,"column":51},"end":{"line":65,"column":85}}],"line":65},"39":{"loc":{"start":{"line":68,"column":9},"end":{"line":76,"column":5}},"type":"if","locations":[{"start":{"line":68,"column":9},"end":{"line":76,"column":5}},{"start":{"line":68,"column":9},"end":{"line":76,"column":5}}],"line":68},"40":{"loc":{"start":{"line":68,"column":13},"end":{"line":68,"column":85}},"type":"binary-expr","locations":[{"start":{"line":68,"column":13},"end":{"line":68,"column":47}},{"start":{"line":68,"column":51},"end":{"line":68,"column":85}}],"line":68},"41":{"loc":{"start":{"line":71,"column":9},"end":{"line":76,"column":5}},"type":"if","locations":[{"start":{"line":71,"column":9},"end":{"line":76,"column":5}},{"start":{"line":71,"column":9},"end":{"line":76,"column":5}}],"line":71},"42":{"loc":{"start":{"line":71,"column":13},"end":{"line":71,"column":87}},"type":"binary-expr","locations":[{"start":{"line":71,"column":13},"end":{"line":71,"column":48}},{"start":{"line":71,"column":52},"end":{"line":71,"column":87}}],"line":71},"43":{"loc":{"start":{"line":78,"column":23},"end":{"line":79,"column":86}},"type":"cond-expr","locations":[{"start":{"line":78,"column":59},"end":{"line":78,"column":87}},{"start":{"line":79,"column":4},"end":{"line":79,"column":86}}],"line":78},"44":{"loc":{"start":{"line":80,"column":23},"end":{"line":81,"column":86}},"type":"cond-expr","locations":[{"start":{"line":80,"column":59},"end":{"line":80,"column":87}},{"start":{"line":81,"column":4},"end":{"line":81,"column":86}}],"line":80},"45":{"loc":{"start":{"line":83,"column":27},"end":{"line":84,"column":35}},"type":"cond-expr","locations":[{"start":{"line":83,"column":62},"end":{"line":83,"column":166}},{"start":{"line":84,"column":4},"end":{"line":84,"column":35}}],"line":83}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":1,"42":0,"43":1,"44":0,"45":1,"46":0,"47":1,"48":1,"49":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/L3/evalPrimitive.ts","sources":["D:/degree/ppl/assignment2/L3/evalPrimitive.ts"],"names":[],"mappings":";;;AAAA,iCAA+B;AAE/B,yCAAwI;AACxI,yCAAyE;AACzE,+DAA0E;AAC1E,6CAA+D;AAC/D,6CAA0C;AAEnC,MAAM,cAAc,GAAG,CAAC,IAAY,EAAE,IAAa,EAAiB,EAAE,CACzE,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,WAAI,EAAC,0BAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAA,cAAM,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1C,IAAA,oBAAW,EAAC,2BAA2B,IAAA,eAAM,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACnG,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,WAAI,EAAC,0BAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAA,cAAM,EAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAA,oBAAW,EAAC,2BAA2B,IAAA,eAAM,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACnG,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7C,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7C,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC/C,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACtC,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,IAAA,2BAAS,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAA,2BAAS,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oCAC5B,IAAA,oBAAW,EAAC,oCAAoC,IAAA,eAAM,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;oCAChI,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,IAAA,2BAAS,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAA,2BAAS,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wCAC5B,IAAA,oBAAW,EAAC,mCAAmC,IAAA,eAAM,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;wCAC9H,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4CAC1C,IAAI,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gDACtD,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oDACzD,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wDACtC,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4DACtC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAA,gBAAQ,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gEAC7C,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oEACnD,IAAI,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;wEAC/D,IAAI,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;4EACjE,IAAI,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAA,uBAAY,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gFACvD,IAAI,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,IAAA,0BAAQ,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oFACnD,IAAA,oBAAW,EAAC,qBAAqB,IAAA,eAAM,EAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AA1B3C,QAAA,cAAc,kBA0B6B;AAExD,MAAM,SAAS,GAAG,CAAC,IAAa,EAAkB,EAAE;IAChD,gBAAgB;IAChB,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAI,IAAA,0BAAQ,EAAC,CAAC,CAAC,IAAI,IAAA,0BAAQ,EAAC,CAAC,CAAC,EAAE;QAC5B,OAAO,IAAA,eAAM,EAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KACxB;SACI;QACD,OAAO,IAAA,oBAAW,EAAC,iCAAiC,IAAA,eAAM,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACvE;AACL,CAAC,CAAC;AAEF,MAAM,OAAO,GAAG,CAAC,IAAa,EAAkB,EAAE;IAC9C,gBAAgB;IAChB,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAI,IAAA,0BAAQ,EAAC,CAAC,CAAC,IAAI,IAAA,0BAAQ,EAAC,CAAC,CAAC,EAAE;QAC5B,OAAO,IAAA,eAAM,EAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KACxB;SACI;QACD,OAAO,IAAA,oBAAW,EAAC,iCAAiC,IAAA,eAAM,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACvE;AACL,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,CAAC,IAAa,EAAW,EAAE;IACtC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAI,IAAA,uBAAY,EAAC,CAAC,CAAC,IAAI,IAAA,uBAAY,EAAC,CAAC,CAAC,EAAE;QACpC,OAAO,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC;KAC1B;SACI,IAAI,IAAA,sBAAW,EAAC,CAAC,CAAC,IAAI,IAAA,sBAAW,EAAC,CAAC,CAAC,EAAE;QACvC,OAAO,IAAI,CAAC;KACf;SACI,IAAI,IAAA,0BAAQ,EAAC,CAAC,CAAC,IAAI,IAAA,0BAAQ,EAAC,CAAC,CAAC,EAAE;QACjC,OAAO,CAAC,KAAK,CAAC,CAAC;KAClB;SACI,IAAI,IAAA,0BAAQ,EAAC,CAAC,CAAC,IAAI,IAAA,0BAAQ,EAAC,CAAC,CAAC,EAAE;QACjC,OAAO,CAAC,KAAK,CAAC,CAAC;KAClB;SACI,IAAI,IAAA,2BAAS,EAAC,CAAC,CAAC,IAAI,IAAA,2BAAS,EAAC,CAAC,CAAC,EAAE;QACnC,OAAO,CAAC,KAAK,CAAC,CAAC;KAClB;SACI;QACD,OAAO,KAAK,CAAC;KAChB;AACL,CAAC,CAAC;AAEF,MAAM,OAAO,GAAG,CAAC,CAAQ,EAAiB,EAAE,CACxC,IAAA,yBAAc,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACpC,IAAA,oBAAW,EAAC,8BAA8B,IAAA,eAAM,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAE3D,MAAM,OAAO,GAAG,CAAC,CAAQ,EAAiB,EAAE,CACxC,IAAA,yBAAc,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACpC,IAAA,oBAAW,EAAC,8BAA8B,IAAA,eAAM,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAE3D,MAAM,QAAQ,GAAG,CAAC,EAAS,EAAE,EAAS,EAAgB,EAAE,CACpD,IAAA,2BAAgB,EAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAEtB,MAAM,QAAQ,GAAG,CAAC,IAAiB,EAA4B,EAAE,CACpE,IAAA,qBAAc,EAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,IAAA,2BAAgB,EAAC,IAAA,YAAK,EAAC,IAAI,CAAC,EAAE,IAAA,gBAAQ,EAAC,IAAA,WAAI,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACnF,IAAA,wBAAa,GAAE,CAAC;AAFP,QAAA,QAAQ,YAED;AAEpB,MAAM,UAAU,GAAG,CAAC,CAAQ,EAAW,EAAE,CACrC,IAAA,yBAAc,EAAC,CAAC,CAAC,CAAC","sourcesContent":["import { reduce } from \"ramda\";\nimport { PrimOp } from \"./L3-ast\";\nimport { isCompoundSExp, isEmptySExp, isSymbolSExp, makeCompoundSExp, makeEmptySExp, CompoundSExp, EmptySExp, Value } from \"./L3-value\";\nimport { List, allT, first, isNonEmptyList, rest } from '../shared/list';\nimport { isBoolean, isNumber, isString } from \"../shared/type-predicates\";\nimport { Result, makeOk, makeFailure } from \"../shared/result\";\nimport { format } from \"../shared/format\";\n\nexport const applyPrimitive = (proc: PrimOp, args: Value[]): Result<Value> =>\n    proc.op === \"+\" ? (allT(isNumber, args) ? makeOk(reduce((x, y) => x + y, 0, args)) : \n                                              makeFailure(`+ expects numbers only: ${format(args)}`)) :\n    proc.op === \"-\" ? minusPrim(args) :\n    proc.op === \"*\" ? (allT(isNumber, args) ? makeOk(reduce((x, y) => x * y, 1, args)) : \n                                              makeFailure(`* expects numbers only: ${format(args)}`)) :\n    proc.op === \"/\" ? divPrim(args) :\n    proc.op === \">\" ? makeOk(args[0] > args[1]) :\n    proc.op === \"<\" ? makeOk(args[0] < args[1]) :\n    proc.op === \"=\" ? makeOk(args[0] === args[1]) :\n    proc.op === \"not\" ? makeOk(!args[0]) :\n    proc.op === \"and\" ? isBoolean(args[0]) && isBoolean(args[1]) ? makeOk(args[0] && args[1]) : \n                                                                   makeFailure(`Arguments to \"and\" not booleans: ${format(args)}`) :\n    proc.op === \"or\" ? isBoolean(args[0]) && isBoolean(args[1]) ? makeOk(args[0] || args[1]) : \n                                                                  makeFailure(`Arguments to \"or\" not booleans: ${format(args)}`) :\n    proc.op === \"eq?\" ? makeOk(eqPrim(args)) :\n    proc.op === \"string=?\" ? makeOk(args[0] === args[1]) :\n    proc.op === \"cons\" ? makeOk(consPrim(args[0], args[1])) :\n    proc.op === \"car\" ? carPrim(args[0]) :\n    proc.op === \"cdr\" ? cdrPrim(args[0]) :\n    proc.op === \"list\" ? makeOk(listPrim(args)) :\n    proc.op === \"pair?\" ? makeOk(isPairPrim(args[0])) :\n    proc.op === \"number?\" ? makeOk(typeof (args[0]) === 'number') :\n    proc.op === \"boolean?\" ? makeOk(typeof (args[0]) === 'boolean') :\n    proc.op === \"symbol?\" ? makeOk(isSymbolSExp(args[0])) :\n    proc.op === \"string?\" ? makeOk(isString(args[0])) :\n    makeFailure(`Bad primitive op: ${format(proc.op)}`);\n\nconst minusPrim = (args: Value[]): Result<number> => {\n    // TODO complete\n    const x = args[0], y = args[1];\n    if (isNumber(x) && isNumber(y)) {\n        return makeOk(x - y);\n    }\n    else {\n        return makeFailure(`Type error: - expects numbers ${format(args)}`);\n    }\n};\n\nconst divPrim = (args: Value[]): Result<number> => {\n    // TODO complete\n    const x = args[0], y = args[1];\n    if (isNumber(x) && isNumber(y)) {\n        return makeOk(x / y);\n    }\n    else {\n        return makeFailure(`Type error: / expects numbers ${format(args)}`);\n    }\n};\n\nconst eqPrim = (args: Value[]): boolean => {\n    const x = args[0], y = args[1];\n    if (isSymbolSExp(x) && isSymbolSExp(y)) {\n        return x.val === y.val;\n    }\n    else if (isEmptySExp(x) && isEmptySExp(y)) {\n        return true;\n    }\n    else if (isNumber(x) && isNumber(y)) {\n        return x === y;\n    }\n    else if (isString(x) && isString(y)) {\n        return x === y;\n    }\n    else if (isBoolean(x) && isBoolean(y)) {\n        return x === y;\n    }\n    else {\n        return false;\n    }\n};\n\nconst carPrim = (v: Value): Result<Value> => \n    isCompoundSExp(v) ? makeOk(v.val1) :\n    makeFailure(`Car: param is not compound ${format(v)}`);\n\nconst cdrPrim = (v: Value): Result<Value> =>\n    isCompoundSExp(v) ? makeOk(v.val2) :\n    makeFailure(`Cdr: param is not compound ${format(v)}`);\n\nconst consPrim = (v1: Value, v2: Value): CompoundSExp =>\n    makeCompoundSExp(v1, v2);\n\nexport const listPrim = (vals: List<Value>): EmptySExp | CompoundSExp =>\n    isNonEmptyList<Value>(vals) ? makeCompoundSExp(first(vals), listPrim(rest(vals))) :\n    makeEmptySExp();\n\nconst isPairPrim = (v: Value): boolean =>\n    isCompoundSExp(v);\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"af700a7bc511b013d92d8a635e024845ab9a5d67","contentHash":"a714063da96ef2399b63398732297e447e06c38dc7a5622e85dc2534ef15fe92"},"D:\\degree\\ppl\\assignment2\\L3\\L3-eval-sub.ts":{"path":"D:\\degree\\ppl\\assignment2\\L3\\L3-eval-sub.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":96}},"2":{"start":{"line":5,"column":16},"end":{"line":5,"column":32}},"3":{"start":{"line":6,"column":17},"end":{"line":6,"column":36}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":36}},"5":{"start":{"line":8,"column":17},"end":{"line":8,"column":36}},"6":{"start":{"line":9,"column":17},"end":{"line":9,"column":36}},"7":{"start":{"line":10,"column":21},"end":{"line":10,"column":44}},"8":{"start":{"line":11,"column":19},"end":{"line":11,"column":40}},"9":{"start":{"line":12,"column":15},"end":{"line":12,"column":40}},"10":{"start":{"line":13,"column":26},"end":{"line":13,"column":62}},"11":{"start":{"line":14,"column":17},"end":{"line":14,"column":44}},"12":{"start":{"line":15,"column":21},"end":{"line":15,"column":44}},"13":{"start":{"line":16,"column":24},"end":{"line":16,"column":50}},"14":{"start":{"line":17,"column":17},"end":{"line":17,"column":44}},"15":{"start":{"line":18,"column":17},"end":{"line":18,"column":44}},"16":{"start":{"line":21,"column":26},"end":{"line":31,"column":74}},"17":{"start":{"line":21,"column":40},"end":{"line":31,"column":74}},"18":{"start":{"line":29,"column":127},"end":{"line":29,"column":269}},"19":{"start":{"line":29,"column":179},"end":{"line":29,"column":208}},"20":{"start":{"line":29,"column":233},"end":{"line":29,"column":268}},"21":{"start":{"line":32,"column":20},"end":{"line":32,"column":41}},"22":{"start":{"line":32,"column":27},"end":{"line":32,"column":41}},"23":{"start":{"line":33,"column":0},"end":{"line":33,"column":34}},"24":{"start":{"line":34,"column":15},"end":{"line":35,"column":36}},"25":{"start":{"line":34,"column":29},"end":{"line":35,"column":36}},"26":{"start":{"line":34,"column":92},"end":{"line":35,"column":35}},"27":{"start":{"line":36,"column":17},"end":{"line":36,"column":100}},"28":{"start":{"line":36,"column":31},"end":{"line":36,"column":100}},"29":{"start":{"line":37,"column":25},"end":{"line":39,"column":80}},"30":{"start":{"line":37,"column":46},"end":{"line":39,"column":80}},"31":{"start":{"line":44,"column":22},"end":{"line":49,"column":47}},"32":{"start":{"line":44,"column":29},"end":{"line":49,"column":47}},"33":{"start":{"line":50,"column":21},"end":{"line":56,"column":1}},"34":{"start":{"line":51,"column":17},"end":{"line":51,"column":60}},"35":{"start":{"line":51,"column":41},"end":{"line":51,"column":46}},"36":{"start":{"line":52,"column":17},"end":{"line":52,"column":56}},"37":{"start":{"line":53,"column":20},"end":{"line":53,"column":57}},"38":{"start":{"line":54,"column":4},"end":{"line":54,"column":93}},"39":{"start":{"line":58,"column":21},"end":{"line":61,"column":47}},"40":{"start":{"line":58,"column":35},"end":{"line":61,"column":47}},"41":{"start":{"line":62,"column":0},"end":{"line":62,"column":36}},"42":{"start":{"line":63,"column":18},"end":{"line":65,"column":42}},"43":{"start":{"line":63,"column":40},"end":{"line":65,"column":42}},"44":{"start":{"line":64,"column":89},"end":{"line":64,"column":125}},"45":{"start":{"line":69,"column":23},"end":{"line":70,"column":87}},"46":{"start":{"line":69,"column":43},"end":{"line":70,"column":87}},"47":{"start":{"line":69,"column":137},"end":{"line":69,"column":218}},"48":{"start":{"line":72,"column":22},"end":{"line":72,"column":108}},"49":{"start":{"line":72,"column":35},"end":{"line":72,"column":108}},"50":{"start":{"line":73,"column":0},"end":{"line":73,"column":38}},"51":{"start":{"line":74,"column":18},"end":{"line":74,"column":206}},"52":{"start":{"line":74,"column":25},"end":{"line":74,"column":206}},"53":{"start":{"line":74,"column":78},"end":{"line":74,"column":205}},"54":{"start":{"line":74,"column":138},"end":{"line":74,"column":204}},"55":{"start":{"line":75,"column":0},"end":{"line":75,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":26},"end":{"line":21,"column":27}},"loc":{"start":{"line":21,"column":40},"end":{"line":31,"column":74}},"line":21},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":116},"end":{"line":29,"column":117}},"loc":{"start":{"line":29,"column":127},"end":{"line":29,"column":269}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":170},"end":{"line":29,"column":171}},"loc":{"start":{"line":29,"column":179},"end":{"line":29,"column":208}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":222},"end":{"line":29,"column":223}},"loc":{"start":{"line":29,"column":233},"end":{"line":29,"column":268}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":32,"column":20},"end":{"line":32,"column":21}},"loc":{"start":{"line":32,"column":27},"end":{"line":32,"column":41}},"line":32},"5":{"name":"(anonymous_5)","decl":{"start":{"line":34,"column":15},"end":{"line":34,"column":16}},"loc":{"start":{"line":34,"column":29},"end":{"line":35,"column":36}},"line":34},"6":{"name":"(anonymous_6)","decl":{"start":{"line":34,"column":82},"end":{"line":34,"column":83}},"loc":{"start":{"line":34,"column":92},"end":{"line":35,"column":35}},"line":34},"7":{"name":"(anonymous_7)","decl":{"start":{"line":36,"column":17},"end":{"line":36,"column":18}},"loc":{"start":{"line":36,"column":31},"end":{"line":36,"column":100}},"line":36},"8":{"name":"(anonymous_8)","decl":{"start":{"line":37,"column":25},"end":{"line":37,"column":26}},"loc":{"start":{"line":37,"column":46},"end":{"line":39,"column":80}},"line":37},"9":{"name":"(anonymous_9)","decl":{"start":{"line":44,"column":22},"end":{"line":44,"column":23}},"loc":{"start":{"line":44,"column":29},"end":{"line":49,"column":47}},"line":44},"10":{"name":"(anonymous_10)","decl":{"start":{"line":50,"column":21},"end":{"line":50,"column":22}},"loc":{"start":{"line":50,"column":42},"end":{"line":56,"column":1}},"line":50},"11":{"name":"(anonymous_11)","decl":{"start":{"line":51,"column":34},"end":{"line":51,"column":35}},"loc":{"start":{"line":51,"column":41},"end":{"line":51,"column":46}},"line":51},"12":{"name":"(anonymous_12)","decl":{"start":{"line":58,"column":21},"end":{"line":58,"column":22}},"loc":{"start":{"line":58,"column":35},"end":{"line":61,"column":47}},"line":58},"13":{"name":"(anonymous_13)","decl":{"start":{"line":63,"column":18},"end":{"line":63,"column":19}},"loc":{"start":{"line":63,"column":40},"end":{"line":65,"column":42}},"line":63},"14":{"name":"(anonymous_14)","decl":{"start":{"line":64,"column":84},"end":{"line":64,"column":85}},"loc":{"start":{"line":64,"column":89},"end":{"line":64,"column":125}},"line":64},"15":{"name":"(anonymous_15)","decl":{"start":{"line":69,"column":23},"end":{"line":69,"column":24}},"loc":{"start":{"line":69,"column":43},"end":{"line":70,"column":87}},"line":69},"16":{"name":"(anonymous_16)","decl":{"start":{"line":69,"column":128},"end":{"line":69,"column":129}},"loc":{"start":{"line":69,"column":137},"end":{"line":69,"column":218}},"line":69},"17":{"name":"(anonymous_17)","decl":{"start":{"line":72,"column":22},"end":{"line":72,"column":23}},"loc":{"start":{"line":72,"column":35},"end":{"line":72,"column":108}},"line":72},"18":{"name":"(anonymous_18)","decl":{"start":{"line":74,"column":18},"end":{"line":74,"column":19}},"loc":{"start":{"line":74,"column":25},"end":{"line":74,"column":206}},"line":74},"19":{"name":"(anonymous_19)","decl":{"start":{"line":74,"column":68},"end":{"line":74,"column":69}},"loc":{"start":{"line":74,"column":78},"end":{"line":74,"column":205}},"line":74},"20":{"name":"(anonymous_20)","decl":{"start":{"line":74,"column":129},"end":{"line":74,"column":130}},"loc":{"start":{"line":74,"column":138},"end":{"line":74,"column":204}},"line":74}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":40},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":21,"column":70},"end":{"line":21,"column":99}},{"start":{"line":22,"column":4},"end":{"line":31,"column":74}}],"line":21},"1":{"loc":{"start":{"line":22,"column":4},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":22,"column":35},"end":{"line":22,"column":64}},{"start":{"line":23,"column":8},"end":{"line":31,"column":74}}],"line":22},"2":{"loc":{"start":{"line":23,"column":8},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":23,"column":38},"end":{"line":23,"column":67}},{"start":{"line":24,"column":12},"end":{"line":31,"column":74}}],"line":23},"3":{"loc":{"start":{"line":24,"column":12},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":24,"column":42},"end":{"line":24,"column":67}},{"start":{"line":25,"column":16},"end":{"line":31,"column":74}}],"line":24},"4":{"loc":{"start":{"line":25,"column":16},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":25,"column":46},"end":{"line":25,"column":86}},{"start":{"line":26,"column":20},"end":{"line":31,"column":74}}],"line":25},"5":{"loc":{"start":{"line":26,"column":20},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":26,"column":50},"end":{"line":26,"column":79}},{"start":{"line":27,"column":24},"end":{"line":31,"column":74}}],"line":26},"6":{"loc":{"start":{"line":27,"column":24},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":27,"column":53},"end":{"line":27,"column":69}},{"start":{"line":28,"column":28},"end":{"line":31,"column":74}}],"line":27},"7":{"loc":{"start":{"line":28,"column":28},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":28,"column":59},"end":{"line":28,"column":77}},{"start":{"line":29,"column":32},"end":{"line":31,"column":74}}],"line":28},"8":{"loc":{"start":{"line":29,"column":32},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":29,"column":62},"end":{"line":29,"column":270}},{"start":{"line":30,"column":36},"end":{"line":31,"column":74}}],"line":29},"9":{"loc":{"start":{"line":30,"column":36},"end":{"line":31,"column":74}},"type":"cond-expr","locations":[{"start":{"line":30,"column":66},"end":{"line":30,"column":120}},{"start":{"line":31,"column":40},"end":{"line":31,"column":74}}],"line":30},"10":{"loc":{"start":{"line":34,"column":92},"end":{"line":35,"column":35}},"type":"cond-expr","locations":[{"start":{"line":34,"column":125},"end":{"line":34,"column":157}},{"start":{"line":35,"column":4},"end":{"line":35,"column":35}}],"line":34},"11":{"loc":{"start":{"line":37,"column":46},"end":{"line":39,"column":80}},"type":"cond-expr","locations":[{"start":{"line":37,"column":77},"end":{"line":37,"column":124}},{"start":{"line":38,"column":4},"end":{"line":39,"column":80}}],"line":37},"12":{"loc":{"start":{"line":38,"column":4},"end":{"line":39,"column":80}},"type":"cond-expr","locations":[{"start":{"line":38,"column":38},"end":{"line":38,"column":67}},{"start":{"line":39,"column":8},"end":{"line":39,"column":80}}],"line":38},"13":{"loc":{"start":{"line":44,"column":29},"end":{"line":49,"column":47}},"type":"cond-expr","locations":[{"start":{"line":44,"column":66},"end":{"line":44,"column":93}},{"start":{"line":45,"column":4},"end":{"line":49,"column":47}}],"line":44},"14":{"loc":{"start":{"line":45,"column":4},"end":{"line":49,"column":47}},"type":"cond-expr","locations":[{"start":{"line":45,"column":42},"end":{"line":45,"column":70}},{"start":{"line":46,"column":8},"end":{"line":49,"column":47}}],"line":45},"15":{"loc":{"start":{"line":46,"column":8},"end":{"line":49,"column":47}},"type":"cond-expr","locations":[{"start":{"line":46,"column":45},"end":{"line":46,"column":72}},{"start":{"line":47,"column":12},"end":{"line":49,"column":47}}],"line":46},"16":{"loc":{"start":{"line":47,"column":12},"end":{"line":49,"column":47}},"type":"cond-expr","locations":[{"start":{"line":47,"column":40},"end":{"line":47,"column":41}},{"start":{"line":48,"column":16},"end":{"line":49,"column":47}}],"line":47},"17":{"loc":{"start":{"line":48,"column":16},"end":{"line":49,"column":47}},"type":"cond-expr","locations":[{"start":{"line":48,"column":47},"end":{"line":48,"column":90}},{"start":{"line":49,"column":20},"end":{"line":49,"column":47}}],"line":48},"18":{"loc":{"start":{"line":58,"column":35},"end":{"line":61,"column":47}},"type":"cond-expr","locations":[{"start":{"line":59,"column":4},"end":{"line":60,"column":69}},{"start":{"line":61,"column":4},"end":{"line":61,"column":47}}],"line":58},"19":{"loc":{"start":{"line":59,"column":4},"end":{"line":60,"column":69}},"type":"cond-expr","locations":[{"start":{"line":59,"column":56},"end":{"line":59,"column":122}},{"start":{"line":60,"column":8},"end":{"line":60,"column":69}}],"line":59},"20":{"loc":{"start":{"line":63,"column":40},"end":{"line":65,"column":42}},"type":"cond-expr","locations":[{"start":{"line":63,"column":99},"end":{"line":63,"column":128}},{"start":{"line":64,"column":4},"end":{"line":65,"column":42}}],"line":63},"21":{"loc":{"start":{"line":63,"column":40},"end":{"line":63,"column":96}},"type":"binary-expr","locations":[{"start":{"line":63,"column":40},"end":{"line":63,"column":67}},{"start":{"line":63,"column":71},"end":{"line":63,"column":96}}],"line":63},"22":{"loc":{"start":{"line":64,"column":4},"end":{"line":65,"column":42}},"type":"cond-expr","locations":[{"start":{"line":64,"column":34},"end":{"line":64,"column":126}},{"start":{"line":65,"column":8},"end":{"line":65,"column":42}}],"line":64},"23":{"loc":{"start":{"line":69,"column":43},"end":{"line":70,"column":87}},"type":"cond-expr","locations":[{"start":{"line":69,"column":76},"end":{"line":69,"column":219}},{"start":{"line":70,"column":4},"end":{"line":70,"column":87}}],"line":69}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":10,"18":1,"19":1,"20":0,"21":1,"22":0,"23":1,"24":1,"25":0,"26":0,"27":1,"28":1,"29":1,"30":0,"31":1,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":7,"41":1,"42":1,"43":1,"44":0,"45":1,"46":6,"47":0,"48":1,"49":7,"50":1,"51":1,"52":0,"53":0,"54":0,"55":1},"f":{"0":10,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":7,"13":1,"14":0,"15":6,"16":0,"17":7,"18":0,"19":0,"20":0},"b":{"0":[0,10],"1":[0,10],"2":[0,10],"3":[0,10],"4":[0,10],"5":[0,10],"6":[0,10],"7":[1,9],"8":[2,7],"9":[0,7],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[7,0],"19":[6,1],"20":[1,0],"21":[1,1],"22":[0,0],"23":[6,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/L3/L3-eval-sub.ts","sources":["D:/degree/ppl/assignment2/L3/L3-eval-sub.ts"],"names":[],"mappings":"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","sourcesContent":["// L3-eval.ts\r\nimport { map } from \"ramda\";\r\nimport { isCExp, isLetExp } from \"./L3-ast\";\r\nimport { BoolExp, CExp, Exp, IfExp, LitExp, NumExp,\r\n         PrimOp, ProcExp, Program, StrExp, VarDecl } from \"./L3-ast\";\r\nimport { isAppExp, isBoolExp, isDefineExp, isIfExp, isLitExp, isNumExp,\r\n             isPrimOp, isProcExp, isStrExp, isVarRef } from \"./L3-ast\";\r\nimport { makeBoolExp, makeLitExp, makeNumExp, makeProcExp, makeStrExp } from \"./L3-ast\";\r\nimport { parseL3Exp } from \"./L3-ast\";\r\nimport { applyEnv, makeEmptyEnv, makeEnv, Env } from \"./L3-env-sub\";\r\nimport { isClosure, makeClosure, Closure, Value } from \"./L3-value\";\r\nimport { first, rest, isEmpty, List, isNonEmptyList } from '../shared/list';\r\nimport { isBoolean, isNumber, isString } from \"../shared/type-predicates\";\r\nimport { Result, makeOk, makeFailure, bind, mapResult, mapv } from \"../shared/result\";\r\nimport { renameExps, substitute } from \"./substitute\";\r\nimport { applyPrimitive } from \"./evalPrimitive\";\r\nimport { parse as p } from \"../shared/parser\";\r\nimport { Sexp } from \"s-expression\";\r\nimport { format } from \"../shared/format\";\r\n\r\n// ========================================================\r\n// Eval functions\r\n\r\nconst L3applicativeEval = (exp: CExp, env: Env): Result<Value> =>\r\n    isNumExp(exp) ? makeOk(exp.val) : \r\n    isBoolExp(exp) ? makeOk(exp.val) :\r\n    isStrExp(exp) ? makeOk(exp.val) :\r\n    isPrimOp(exp) ? makeOk(exp) :\r\n    isVarRef(exp) ? applyEnv(env, exp.var) :\r\n    isLitExp(exp) ? makeOk(exp.val) :\r\n    isIfExp(exp) ? evalIf(exp, env) :\r\n    isProcExp(exp) ? evalProc(exp, env) :\r\n    isAppExp(exp) ? bind(L3applicativeEval(exp.rator, env), (rator: Value) =>\r\n                        bind(mapResult(param => \r\n                            L3applicativeEval(param, env), \r\n                              exp.rands), \r\n                            (rands: Value[]) =>\r\n                                L3applyProcedure(rator, rands, env))) :\r\n    isLetExp(exp) ? makeFailure('\"let\" not supported (yet)') :\r\n    makeFailure('Never');\r\n\r\nexport const isTrueValue = (x: Value): boolean =>\r\n    ! (x === false);\r\n\r\nconst evalIf = (exp: IfExp, env: Env): Result<Value> =>\r\n    bind(L3applicativeEval(exp.test, env), (test: Value) => \r\n        isTrueValue(test) ? L3applicativeEval(exp.then, env) : \r\n        L3applicativeEval(exp.alt, env));\r\n\r\nconst evalProc = (exp: ProcExp, env: Env): Result<Closure> =>\r\n    makeOk(makeClosure(exp.args, exp.body));\r\n\r\nconst L3applyProcedure = (proc: Value, args: Value[], env: Env): Result<Value> =>\r\n    isPrimOp(proc) ? applyPrimitive(proc, args) :\r\n    isClosure(proc) ? applyClosure(proc, args, env) :\r\n    makeFailure(`Bad procedure ${format(proc)}`);\r\n\r\n// Applications are computed by substituting computed\r\n// values into the body of the closure.\r\n// To make the types fit - computed values of params must be\r\n// turned back in Literal Expressions that eval to the computed value.\r\nconst valueToLitExp = (v: Value): NumExp | BoolExp | StrExp | LitExp | PrimOp | ProcExp =>\r\n    isNumber(v) ? makeNumExp(v) :\r\n    isBoolean(v) ? makeBoolExp(v) :\r\n    isString(v) ? makeStrExp(v) :\r\n    isPrimOp(v) ? v :\r\n    isClosure(v) ? makeProcExp(v.params, v.body) :\r\n    makeLitExp(v);\r\n\r\nconst applyClosure = (proc: Closure, args: Value[], env: Env): Result<Value> => {\r\n    const vars = map((v: VarDecl) => v.var, proc.params);\r\n    const body = renameExps(proc.body);\r\n    const litArgs : CExp[] = map(valueToLitExp, args);\r\n    return evalSequence(substitute(body, vars, litArgs), env);\r\n    //return evalSequence(substitute(proc.body, vars, litArgs), env);\r\n}\r\n\r\n// Evaluate a sequence of expressions (in a program)\r\nexport const evalSequence = (seq: List<Exp>, env: Env): Result<Value> =>\r\n    isNonEmptyList<Exp>(seq) ? \r\n        isDefineExp(first(seq)) ? evalDefineExps(first(seq), rest(seq), env) :\r\n        evalCExps(first(seq), rest(seq), env) :\r\n    makeFailure(\"Empty sequence\");\r\n\r\nconst evalCExps = (first: Exp, rest: Exp[], env: Env): Result<Value> =>\r\n    isCExp(first) && isEmpty(rest) ? L3applicativeEval(first, env) :\r\n    isCExp(first) ? bind(L3applicativeEval(first, env), _ => \r\n                            evalSequence(rest, env)) :\r\n    makeFailure(\"Never\");\r\n\r\n// Eval a sequence of expressions when the first exp is a Define.\r\n// Compute the rhs of the define, extend the env with the new binding\r\n// then compute the rest of the exps in the new env.\r\nconst evalDefineExps = (def: Exp, exps: Exp[], env: Env): Result<Value> =>\r\n    isDefineExp(def) ? bind(L3applicativeEval(def.val, env), \r\n                            (rhs: Value) => \r\n                                evalSequence(exps, \r\n                                    makeEnv(def.var.var, rhs, env))) :\r\n    makeFailure(`Unexpected in evalDefine: ${format(def)}`);\r\n\r\n// Main program\r\nexport const evalL3program = (program: Program): Result<Value> =>\r\n    evalSequence(program.exps, makeEmptyEnv());\r\n\r\nexport const evalParse = (s: string): Result<Value> =>\r\n    bind(p(s), (sexp: Sexp) => \r\n        bind(parseL3Exp(sexp), (exp: Exp) =>\r\n            evalSequence([exp], makeEmptyEnv())));\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2cc7c3949d82f888c8473078f58405846a53a118","contentHash":"74ad3c9cac8393bafc2f94951c5e3deb5a770cb3641d078df9cb3cbd6d0aa23e"},"D:\\degree\\ppl\\assignment2\\L3\\L3-env-sub.ts":{"path":"D:\\degree\\ppl\\assignment2\\L3\\L3-env-sub.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":128}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":21},"end":{"line":5,"column":48}},"4":{"start":{"line":5,"column":28},"end":{"line":5,"column":47}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"6":{"start":{"line":7,"column":16},"end":{"line":7,"column":81}},"7":{"start":{"line":7,"column":34},"end":{"line":7,"column":80}},"8":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"9":{"start":{"line":9,"column":19},"end":{"line":9,"column":46}},"10":{"start":{"line":9,"column":26},"end":{"line":9,"column":46}},"11":{"start":{"line":10,"column":0},"end":{"line":10,"column":32}},"12":{"start":{"line":11,"column":22},"end":{"line":11,"column":44}},"13":{"start":{"line":11,"column":29},"end":{"line":11,"column":44}},"14":{"start":{"line":12,"column":0},"end":{"line":12,"column":38}},"15":{"start":{"line":13,"column":14},"end":{"line":13,"column":80}},"16":{"start":{"line":13,"column":21},"end":{"line":13,"column":80}},"17":{"start":{"line":14,"column":0},"end":{"line":14,"column":22}},"18":{"start":{"line":15,"column":17},"end":{"line":17,"column":45}},"19":{"start":{"line":15,"column":29},"end":{"line":17,"column":45}},"20":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":21},"end":{"line":5,"column":22}},"loc":{"start":{"line":5,"column":28},"end":{"line":5,"column":47}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":16},"end":{"line":7,"column":17}},"loc":{"start":{"line":7,"column":34},"end":{"line":7,"column":80}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":19},"end":{"line":9,"column":20}},"loc":{"start":{"line":9,"column":26},"end":{"line":9,"column":46}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":11,"column":22},"end":{"line":11,"column":23}},"loc":{"start":{"line":11,"column":29},"end":{"line":11,"column":44}},"line":11},"4":{"name":"(anonymous_4)","decl":{"start":{"line":13,"column":14},"end":{"line":13,"column":15}},"loc":{"start":{"line":13,"column":21},"end":{"line":13,"column":80}},"line":13},"5":{"name":"(anonymous_5)","decl":{"start":{"line":15,"column":17},"end":{"line":15,"column":18}},"loc":{"start":{"line":15,"column":29},"end":{"line":17,"column":45}},"line":15}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":21},"end":{"line":13,"column":80}},"type":"binary-expr","locations":[{"start":{"line":13,"column":21},"end":{"line":13,"column":47}},{"start":{"line":13,"column":51},"end":{"line":13,"column":80}}],"line":13},"1":{"loc":{"start":{"line":15,"column":29},"end":{"line":17,"column":45}},"type":"cond-expr","locations":[{"start":{"line":15,"column":60},"end":{"line":15,"column":108}},{"start":{"line":16,"column":4},"end":{"line":17,"column":45}}],"line":15},"2":{"loc":{"start":{"line":16,"column":4},"end":{"line":17,"column":45}},"type":"cond-expr","locations":[{"start":{"line":16,"column":20},"end":{"line":16,"column":49}},{"start":{"line":17,"column":8},"end":{"line":17,"column":45}}],"line":16}},"s":{"0":1,"1":1,"2":1,"3":1,"4":7,"5":1,"6":1,"7":0,"8":1,"9":1,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":0,"17":1,"18":1,"19":0,"20":1},"f":{"0":7,"1":0,"2":0,"3":0,"4":0,"5":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/L3/L3-env-sub.ts","sources":["D:/degree/ppl/assignment2/L3/L3-env-sub.ts"],"names":[],"mappings":";;;AAGA,6CAA+D;AAUxD,MAAM,YAAY,GAAG,GAAa,EAAE,CAAC,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC;AAAnD,QAAA,YAAY,gBAAuC;AACzD,MAAM,OAAO,GAAG,CAAC,CAAS,EAAE,GAAU,EAAE,GAAQ,EAAe,EAAE,CACpE,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAC,CAAC,CAAC;AADtC,QAAA,OAAO,WAC+B;AAC5C,MAAM,UAAU,GAAG,CAAC,CAAM,EAAiB,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,UAAU,CAAC;AAA7D,QAAA,UAAU,cAAmD;AACnE,MAAM,aAAa,GAAG,CAAC,CAAM,EAAoB,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,KAAK,CAAC;AAA9D,QAAA,aAAa,iBAAiD;AACpE,MAAM,KAAK,GAAG,CAAC,CAAM,EAAY,EAAE,CAAC,IAAA,kBAAU,EAAC,CAAC,CAAC,IAAI,IAAA,qBAAa,EAAC,CAAC,CAAC,CAAC;AAAhE,QAAA,KAAK,SAA2D;AAEtE,MAAM,QAAQ,GAAG,CAAC,GAAQ,EAAE,CAAS,EAAiB,EAAE,CAC3D,IAAA,kBAAU,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,oBAAW,EAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;IACtD,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAA,eAAM,EAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACjC,IAAA,gBAAQ,EAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAHhB,QAAA,QAAQ,YAGQ","sourcesContent":["// ========================================================\r\n// Environment data type for L3\r\nimport { Value } from './L3-value';\r\nimport { Result, makeFailure, makeOk } from '../shared/result';\r\n\r\nexport type Env = EmptyEnv | NonEmptyEnv;\r\nexport type EmptyEnv = {tag: \"EmptyEnv\" }\r\nexport type NonEmptyEnv = {\r\n    tag: \"Env\";\r\n    var: string;\r\n    val: Value;\r\n    nextEnv: Env;\r\n}\r\nexport const makeEmptyEnv = (): EmptyEnv => ({tag: \"EmptyEnv\"});\r\nexport const makeEnv = (v: string, val: Value, env: Env): NonEmptyEnv =>\r\n    ({tag: \"Env\", var: v, val: val, nextEnv: env});\r\nexport const isEmptyEnv = (x: any): x is EmptyEnv => x.tag === \"EmptyEnv\";\r\nexport const isNonEmptyEnv = (x: any): x is NonEmptyEnv => x.tag === \"Env\";\r\nexport const isEnv = (x: any): x is Env => isEmptyEnv(x) || isNonEmptyEnv(x);\r\n\r\nexport const applyEnv = (env: Env, v: string): Result<Value> =>\r\n    isEmptyEnv(env) ? makeFailure(`var not found: ${v}`) :\r\n    env.var === v ? makeOk(env.val) :\r\n    applyEnv(env.nextEnv, v);\r\n\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c82c52ccc80cf18f4d8cb2b7b4503e814e9d1d37","contentHash":"eed7c16c50caa9b593206a89e3934c0a2f25161fad09b92f823fb024c2d711e6"},"D:\\degree\\ppl\\assignment2\\L3\\substitute.ts":{"path":"D:\\degree\\ppl\\assignment2\\L3\\substitute.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":70}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":36}},"4":{"start":{"line":6,"column":17},"end":{"line":6,"column":36}},"5":{"start":{"line":7,"column":15},"end":{"line":7,"column":40}},"6":{"start":{"line":29,"column":19},"end":{"line":51,"column":1}},"7":{"start":{"line":30,"column":22},"end":{"line":33,"column":5}},"8":{"start":{"line":31,"column":20},"end":{"line":31,"column":53}},"9":{"start":{"line":32,"column":8},"end":{"line":32,"column":44}},"10":{"start":{"line":34,"column":23},"end":{"line":39,"column":5}},"11":{"start":{"line":35,"column":25},"end":{"line":35,"column":63}},"12":{"start":{"line":35,"column":49},"end":{"line":35,"column":54}},"13":{"start":{"line":36,"column":22},"end":{"line":36,"column":50}},"14":{"start":{"line":37,"column":26},"end":{"line":37,"column":151}},"15":{"start":{"line":37,"column":54},"end":{"line":37,"column":143}},"16":{"start":{"line":38,"column":8},"end":{"line":38,"column":166}},"17":{"start":{"line":38,"column":105},"end":{"line":38,"column":109}},"18":{"start":{"line":38,"column":147},"end":{"line":38,"column":151}},"19":{"start":{"line":40,"column":16},"end":{"line":49,"column":41}},"20":{"start":{"line":40,"column":23},"end":{"line":49,"column":41}},"21":{"start":{"line":50,"column":4},"end":{"line":50,"column":39}},"22":{"start":{"line":52,"column":0},"end":{"line":52,"column":32}},"23":{"start":{"line":57,"column":19},"end":{"line":63,"column":1}},"24":{"start":{"line":58,"column":16},"end":{"line":58,"column":17}},"25":{"start":{"line":59,"column":4},"end":{"line":62,"column":6}},"26":{"start":{"line":60,"column":8},"end":{"line":60,"column":16}},"27":{"start":{"line":61,"column":8},"end":{"line":61,"column":32}},"28":{"start":{"line":64,"column":0},"end":{"line":64,"column":32}},"29":{"start":{"line":69,"column":19},"end":{"line":84,"column":1}},"30":{"start":{"line":70,"column":19},"end":{"line":70,"column":44}},"31":{"start":{"line":71,"column":20},"end":{"line":74,"column":17}},"32":{"start":{"line":71,"column":27},"end":{"line":74,"column":17}},"33":{"start":{"line":77,"column":24},"end":{"line":82,"column":5}},"34":{"start":{"line":78,"column":24},"end":{"line":78,"column":66}},"35":{"start":{"line":78,"column":50},"end":{"line":78,"column":57}},"36":{"start":{"line":79,"column":24},"end":{"line":79,"column":57}},"37":{"start":{"line":80,"column":24},"end":{"line":80,"column":57}},"38":{"start":{"line":81,"column":8},"end":{"line":81,"column":181}},"39":{"start":{"line":83,"column":4},"end":{"line":83,"column":43}},"40":{"start":{"line":85,"column":0},"end":{"line":85,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":29,"column":19},"end":{"line":29,"column":20}},"loc":{"start":{"line":29,"column":41},"end":{"line":51,"column":1}},"line":29},"1":{"name":"(anonymous_1)","decl":{"start":{"line":30,"column":22},"end":{"line":30,"column":23}},"loc":{"start":{"line":30,"column":29},"end":{"line":33,"column":5}},"line":30},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":23},"end":{"line":34,"column":24}},"loc":{"start":{"line":34,"column":30},"end":{"line":39,"column":5}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":35,"column":42},"end":{"line":35,"column":43}},"loc":{"start":{"line":35,"column":49},"end":{"line":35,"column":54}},"line":35},"4":{"name":"(anonymous_4)","decl":{"start":{"line":37,"column":46},"end":{"line":37,"column":47}},"loc":{"start":{"line":37,"column":54},"end":{"line":37,"column":143}},"line":37},"5":{"name":"(anonymous_5)","decl":{"start":{"line":38,"column":98},"end":{"line":38,"column":99}},"loc":{"start":{"line":38,"column":105},"end":{"line":38,"column":109}},"line":38},"6":{"name":"(anonymous_6)","decl":{"start":{"line":38,"column":140},"end":{"line":38,"column":141}},"loc":{"start":{"line":38,"column":147},"end":{"line":38,"column":151}},"line":38},"7":{"name":"(anonymous_7)","decl":{"start":{"line":40,"column":16},"end":{"line":40,"column":17}},"loc":{"start":{"line":40,"column":23},"end":{"line":49,"column":41}},"line":40},"8":{"name":"(anonymous_8)","decl":{"start":{"line":57,"column":19},"end":{"line":57,"column":20}},"loc":{"start":{"line":57,"column":25},"end":{"line":63,"column":1}},"line":57},"9":{"name":"(anonymous_9)","decl":{"start":{"line":59,"column":11},"end":{"line":59,"column":12}},"loc":{"start":{"line":59,"column":18},"end":{"line":62,"column":5}},"line":59},"10":{"name":"(anonymous_10)","decl":{"start":{"line":69,"column":19},"end":{"line":69,"column":20}},"loc":{"start":{"line":69,"column":29},"end":{"line":84,"column":1}},"line":69},"11":{"name":"(anonymous_11)","decl":{"start":{"line":71,"column":20},"end":{"line":71,"column":21}},"loc":{"start":{"line":71,"column":27},"end":{"line":74,"column":17}},"line":71},"12":{"name":"(anonymous_12)","decl":{"start":{"line":77,"column":24},"end":{"line":77,"column":25}},"loc":{"start":{"line":77,"column":31},"end":{"line":82,"column":5}},"line":77},"13":{"name":"(anonymous_13)","decl":{"start":{"line":78,"column":41},"end":{"line":78,"column":42}},"loc":{"start":{"line":78,"column":50},"end":{"line":78,"column":57}},"line":78}},"branchMap":{"0":{"loc":{"start":{"line":32,"column":16},"end":{"line":32,"column":42}},"type":"cond-expr","locations":[{"start":{"line":32,"column":29},"end":{"line":32,"column":38}},{"start":{"line":32,"column":41},"end":{"line":32,"column":42}}],"line":32},"1":{"loc":{"start":{"line":37,"column":54},"end":{"line":37,"column":143}},"type":"binary-expr","locations":[{"start":{"line":37,"column":54},"end":{"line":37,"column":84}},{"start":{"line":37,"column":88},"end":{"line":37,"column":143}}],"line":37},"2":{"loc":{"start":{"line":40,"column":23},"end":{"line":49,"column":41}},"type":"cond-expr","locations":[{"start":{"line":40,"column":51},"end":{"line":40,"column":52}},{"start":{"line":41,"column":8},"end":{"line":49,"column":41}}],"line":40},"3":{"loc":{"start":{"line":41,"column":8},"end":{"line":49,"column":41}},"type":"cond-expr","locations":[{"start":{"line":41,"column":37},"end":{"line":41,"column":38}},{"start":{"line":42,"column":12},"end":{"line":49,"column":41}}],"line":41},"4":{"loc":{"start":{"line":42,"column":12},"end":{"line":49,"column":41}},"type":"cond-expr","locations":[{"start":{"line":42,"column":40},"end":{"line":42,"column":41}},{"start":{"line":43,"column":16},"end":{"line":49,"column":41}}],"line":42},"5":{"loc":{"start":{"line":43,"column":16},"end":{"line":49,"column":41}},"type":"cond-expr","locations":[{"start":{"line":43,"column":44},"end":{"line":43,"column":45}},{"start":{"line":44,"column":20},"end":{"line":49,"column":41}}],"line":43},"6":{"loc":{"start":{"line":44,"column":20},"end":{"line":49,"column":41}},"type":"cond-expr","locations":[{"start":{"line":44,"column":48},"end":{"line":44,"column":49}},{"start":{"line":45,"column":24},"end":{"line":49,"column":41}}],"line":44},"7":{"loc":{"start":{"line":45,"column":24},"end":{"line":49,"column":41}},"type":"cond-expr","locations":[{"start":{"line":45,"column":52},"end":{"line":45,"column":64}},{"start":{"line":46,"column":28},"end":{"line":49,"column":41}}],"line":45},"8":{"loc":{"start":{"line":46,"column":28},"end":{"line":49,"column":41}},"type":"cond-expr","locations":[{"start":{"line":46,"column":55},"end":{"line":46,"column":116}},{"start":{"line":47,"column":32},"end":{"line":49,"column":41}}],"line":46},"9":{"loc":{"start":{"line":47,"column":32},"end":{"line":49,"column":41}},"type":"cond-expr","locations":[{"start":{"line":47,"column":61},"end":{"line":47,"column":74}},{"start":{"line":48,"column":36},"end":{"line":49,"column":41}}],"line":47},"10":{"loc":{"start":{"line":48,"column":36},"end":{"line":49,"column":41}},"type":"cond-expr","locations":[{"start":{"line":48,"column":64},"end":{"line":48,"column":134}},{"start":{"line":49,"column":40},"end":{"line":49,"column":41}}],"line":48},"11":{"loc":{"start":{"line":71,"column":27},"end":{"line":74,"column":17}},"type":"cond-expr","locations":[{"start":{"line":71,"column":54},"end":{"line":71,"column":127}},{"start":{"line":72,"column":8},"end":{"line":74,"column":17}}],"line":71},"12":{"loc":{"start":{"line":72,"column":8},"end":{"line":74,"column":17}},"type":"cond-expr","locations":[{"start":{"line":72,"column":36},"end":{"line":72,"column":114}},{"start":{"line":73,"column":12},"end":{"line":74,"column":17}}],"line":72},"13":{"loc":{"start":{"line":73,"column":12},"end":{"line":74,"column":17}},"type":"cond-expr","locations":[{"start":{"line":73,"column":41},"end":{"line":73,"column":55}},{"start":{"line":74,"column":16},"end":{"line":74,"column":17}}],"line":73}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":1,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"inputSourceMap":{"version":3,"file":"D:/degree/ppl/assignment2/L3/substitute.ts","sources":["D:/degree/ppl/assignment2/L3/substitute.ts"],"names":[],"mappings":"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","sourcesContent":["import { filter, indexOf, map, includes, zip, KeyValuePair } from \"ramda\";\nimport { CExp, ProcExp, VarDecl, VarRef } from \"./L3-ast\";\nimport { isAppExp, isBoolExp, isIfExp, isLitExp, isNumExp, isPrimOp, isProcExp, isStrExp, isVarRef } from \"./L3-ast\";\nimport { makeAppExp, makeIfExp, makeProcExp, makeVarDecl, makeVarRef } from \"./L3-ast\";\nimport { first, isNonEmptyList } from '../shared/list';\n\n// For applicative eval - the type of exps should be ValueExp[] | VarRef[];\n// where ValueExp is an expression which directly encodes a value:\n// export type ValueExp = LitExp | NumExp | BoolExp | StrExp | PrimOp;\n// In order to support normal eval as well - we generalize the types to CExp.\n// @Pre: vars and exps have the same length\n/*\n   Example:\n   (\n     (lambda (x y) (+ ( (lambda (x) (* x y)) x ) y)\n     3 4\n    )\n\n    vars = [x,y]\n    exps = [3,4]\n\n    argNames = [x]\n    subst = [[x,3],[y,4]]\n    freeSubst = [[y,4]] \n    vars = [y]\n    exps = [4]\n*/\n\nexport const substitute = (body: CExp[], vars: string[], exps: CExp[]): CExp[] => {\n    const subVarRef = (e: VarRef): CExp => {\n        const pos = indexOf(e.var, vars);\n        return ((pos > -1) ? exps[pos] : e);\n    };\n    \n    const subProcExp = (e: ProcExp): ProcExp => {\n        const argNames = map((x) => x.var, e.args);\n        const subst = zip(vars, exps);\n        const freeSubst = filter((ve) => \n            isNonEmptyList<String>(ve) && !includes(first(ve), argNames), subst);\n        return makeProcExp(\n            e.args,\n            substitute(\n                e.body,\n                map((x: KeyValuePair<string, CExp>) => x[0], freeSubst),\n                map((x: KeyValuePair<string, CExp>) => x[1], freeSubst)\n            )\n        );\n    };\n    \n    const sub = (e: CExp): CExp => \n        isNumExp(e) ? e :\n        isBoolExp(e) ? e :\n        isPrimOp(e) ? e :\n        isLitExp(e) ? e :\n        isStrExp(e) ? e :\n        isVarRef(e) ? subVarRef(e) :\n        isIfExp(e) ? makeIfExp(sub(e.test), sub(e.then), sub(e.alt)) :\n        isProcExp(e) ? subProcExp(e) :\n        isAppExp(e) ? makeAppExp(sub(e.rator), map(sub, e.rands)) :\n        e;\n    \n    return map(sub, body);\n};\n/*\n    Purpose: create a generator of new symbols of the form v__n\n    with n incremented at each call.\n*/\nexport const makeVarGen = (): (v: string) => string => {\n    let count: number = 0;\n    return (v: string) => {\n        count++;\n        return `${v}__${count}`;\n    };\n};\n/*\nPurpose: Consistently rename bound variables in 'exps' to fresh names.\n         Start numbering at 1 for all new var names.\n*/\nexport const renameExps = (exps: CExp[]): CExp[] => {\n    const varGen = makeVarGen();\n    const replace = (e: CExp): CExp =>\n        isIfExp(e) ? makeIfExp(replace(e.test), replace(e.then), replace(e.alt)) :\n        isAppExp(e) ? makeAppExp(replace(e.rator), map(replace, e.rands)) :\n        isProcExp(e) ? replaceProc(e) :\n        e;\n    \n    // Rename the params and substitute old params with renamed ones.\n    //  First recursively rename all ProcExps inside the body.\n    const replaceProc = (e: ProcExp): ProcExp => {\n        const oldArgs = map((arg: VarDecl): string => arg.var, e.args);\n        const newArgs = map(varGen, oldArgs);\n        const newBody = map(replace, e.body);\n        return makeProcExp(map(makeVarDecl, newArgs), substitute(newBody, oldArgs, map(makeVarRef, newArgs)));\n    };\n    \n    return map(replace, exps);\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e982b555f1f160a3d9d2af8c9e9ab461c0603ce9","contentHash":"44d2ed9069cadc5ec2d37f7b37d1eea29c1d854a0f2b1f602431db6b52a7b47b"}}